1..2625
ok 1 - Amazon::AWS::EC2::Types::BlobAttributeValue loads. Is not a Failure object
ok 2 - Amazon::AWS::EC2::Types::BlobAttributeValue exists
ok 3 - Amazon::AWS::EC2::Types::BlobAttributeValue can be populated
ok 4 - Amazon::AWS::EC2::Types::BlobAttributeValue serializes ok
ok 5 - Amazon::AWS::EC2::Types::BlobAttributeValue deseralizes ok
# Value
ok 6 - Amazon::AWS::EC2::Types::BlobAttributeValue compares ok
# CHANGE!
# vicselect
# Value
# Value -- Str
# Setting Value to syzygy!AEPOWNsVpuWOnXO
ok 7 - Changed Amazon::AWS::EC2::Types::BlobAttributeValue fails eqv
ok 8 - Amazon::AWS::EC2::Types::BundleTaskError loads. Is not a Failure object
ok 9 - Amazon::AWS::EC2::Types::BundleTaskError exists
ok 10 - Amazon::AWS::EC2::Types::BundleTaskError can be populated
ok 11 - Amazon::AWS::EC2::Types::BundleTaskError serializes ok
ok 12 - Amazon::AWS::EC2::Types::BundleTaskError deseralizes ok
# code
# message
ok 13 - Amazon::AWS::EC2::Types::BundleTaskError compares ok
# CHANGE!
# vicselect
# code, message
# code -- Str
# Setting code to syzygy!iOwgjcMkLkYJKHN
ok 14 - Changed Amazon::AWS::EC2::Types::BundleTaskError fails eqv
ok 15 - Amazon::AWS::EC2::Types::ByoipCidr loads. Is not a Failure object
ok 16 - Amazon::AWS::EC2::Types::ByoipCidr exists
ok 17 - Amazon::AWS::EC2::Types::ByoipCidr can be populated
ok 18 - Amazon::AWS::EC2::Types::ByoipCidr serializes ok
ok 19 - Amazon::AWS::EC2::Types::ByoipCidr deseralizes ok
# cidr
# description
# state
# statusMessage
ok 20 - Amazon::AWS::EC2::Types::ByoipCidr compares ok
# CHANGE!
# vicselect
# cidr, description, state, statusMessage
# description -- Str
# Setting description to syzygy!GbRODFteIAiPFMjyjxIHIurj
ok 21 - Changed Amazon::AWS::EC2::Types::ByoipCidr fails eqv
ok 22 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsError loads. Is not a Failure object
ok 23 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsError exists
ok 24 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsError can be populated
ok 25 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsError serializes ok
ok 26 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsError deseralizes ok
# code
# message
ok 27 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsError compares ok
# CHANGE!
# vicselect
# code, message
# code -- Str
# Setting code to syzygy!unexpectedError
ok 28 - Changed Amazon::AWS::EC2::Types::CancelSpotFleetRequestsError fails eqv
ok 29 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsErrorItem loads. Is not a Failure object
ok 30 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsErrorItem exists
ok 31 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsErrorItem can be populated
ok 32 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsErrorItem serializes ok
ok 33 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsErrorItem deseralizes ok
# error
# code
not ok 34 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsErrorItem compares ok
# Failed test 'Amazon::AWS::EC2::Types::CancelSpotFleetRequestsErrorItem compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 119
# CHANGE!
# vicselect
# error, spotFleetRequestId
# spotFleetRequestId -- Str
# Setting spotFleetRequestId to syzygy!nRlOZv
ok 35 - Changed Amazon::AWS::EC2::Types::CancelSpotFleetRequestsErrorItem fails eqv
ok 36 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsSuccessItem loads. Is not a Failure object
ok 37 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsSuccessItem exists
ok 38 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsSuccessItem can be populated
ok 39 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsSuccessItem serializes ok
ok 40 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsSuccessItem deseralizes ok
# currentSpotFleetRequestState
# previousSpotFleetRequestState
# spotFleetRequestId
ok 41 - Amazon::AWS::EC2::Types::CancelSpotFleetRequestsSuccessItem compares ok
# CHANGE!
# vicselect
# currentSpotFleetRequestState, previousSpotFleetRequestState, spotFleetRequestId
# previousSpotFleetRequestState -- Str
# Setting previousSpotFleetRequestState to syzygy!cancelled_running
ok 42 - Changed Amazon::AWS::EC2::Types::CancelSpotFleetRequestsSuccessItem fails eqv
ok 43 - Amazon::AWS::EC2::Types::CancelledSpotInstanceRequest loads. Is not a Failure object
ok 44 - Amazon::AWS::EC2::Types::CancelledSpotInstanceRequest exists
ok 45 - Amazon::AWS::EC2::Types::CancelledSpotInstanceRequest can be populated
ok 46 - Amazon::AWS::EC2::Types::CancelledSpotInstanceRequest serializes ok
ok 47 - Amazon::AWS::EC2::Types::CancelledSpotInstanceRequest deseralizes ok
# spotInstanceRequestId
# state
ok 48 - Amazon::AWS::EC2::Types::CancelledSpotInstanceRequest compares ok
# CHANGE!
# vicselect
# spotInstanceRequestId, state
# state -- Str
# Setting state to syzygy!active
ok 49 - Changed Amazon::AWS::EC2::Types::CancelledSpotInstanceRequest fails eqv
ok 50 - Amazon::AWS::EC2::Types::CapacityReservationTarget loads. Is not a Failure object
ok 51 - Amazon::AWS::EC2::Types::CapacityReservationTarget exists
ok 52 - Amazon::AWS::EC2::Types::CapacityReservationTarget can be populated
ok 53 - Amazon::AWS::EC2::Types::CapacityReservationTarget serializes ok
ok 54 - Amazon::AWS::EC2::Types::CapacityReservationTarget deseralizes ok
# CapacityReservationId
ok 55 - Amazon::AWS::EC2::Types::CapacityReservationTarget compares ok
# CHANGE!
# vicselect
# CapacityReservationId
# CapacityReservationId -- Str
# Setting CapacityReservationId to syzygy!oRsVfxbqRuDEVveNHVYfynqtQxMj
ok 56 - Changed Amazon::AWS::EC2::Types::CapacityReservationTarget fails eqv
ok 57 - Amazon::AWS::EC2::Types::CapacityReservationTargetResponse loads. Is not a Failure object
ok 58 - Amazon::AWS::EC2::Types::CapacityReservationTargetResponse exists
ok 59 - Amazon::AWS::EC2::Types::CapacityReservationTargetResponse can be populated
ok 60 - Amazon::AWS::EC2::Types::CapacityReservationTargetResponse serializes ok
ok 61 - Amazon::AWS::EC2::Types::CapacityReservationTargetResponse deseralizes ok
# capacityReservationId
ok 62 - Amazon::AWS::EC2::Types::CapacityReservationTargetResponse compares ok
# CHANGE!
# vicselect
# capacityReservationId
# capacityReservationId -- Str
# Setting capacityReservationId to syzygy!gBDObqdoJRUnuyDOnZxV
ok 63 - Changed Amazon::AWS::EC2::Types::CapacityReservationTargetResponse fails eqv
ok 64 - Amazon::AWS::EC2::Types::CertificateAuthentication loads. Is not a Failure object
ok 65 - Amazon::AWS::EC2::Types::CertificateAuthentication exists
ok 66 - Amazon::AWS::EC2::Types::CertificateAuthentication can be populated
ok 67 - Amazon::AWS::EC2::Types::CertificateAuthentication serializes ok
ok 68 - Amazon::AWS::EC2::Types::CertificateAuthentication deseralizes ok
# clientRootCertificateChain
ok 69 - Amazon::AWS::EC2::Types::CertificateAuthentication compares ok
# CHANGE!
# vicselect
# clientRootCertificateChain
# clientRootCertificateChain -- Str
# Setting clientRootCertificateChain to syzygy!XuCslJtoRvaeuQxswWgqzZ
ok 70 - Changed Amazon::AWS::EC2::Types::CertificateAuthentication fails eqv
ok 71 - Amazon::AWS::EC2::Types::CertificateAuthenticationRequest loads. Is not a Failure object
ok 72 - Amazon::AWS::EC2::Types::CertificateAuthenticationRequest exists
ok 73 - Amazon::AWS::EC2::Types::CertificateAuthenticationRequest can be populated
ok 74 - Amazon::AWS::EC2::Types::CertificateAuthenticationRequest serializes ok
ok 75 - Amazon::AWS::EC2::Types::CertificateAuthenticationRequest deseralizes ok
# ClientRootCertificateChainArn
ok 76 - Amazon::AWS::EC2::Types::CertificateAuthenticationRequest compares ok
# CHANGE!
# vicselect
# ClientRootCertificateChainArn
# ClientRootCertificateChainArn -- Str
# Setting ClientRootCertificateChainArn to syzygy!xdxDDfttGlzRKEdJagfKzVxtmd
ok 77 - Changed Amazon::AWS::EC2::Types::CertificateAuthenticationRequest fails eqv
ok 78 - Amazon::AWS::EC2::Types::CidrAuthorizationContext loads. Is not a Failure object
ok 79 - Amazon::AWS::EC2::Types::CidrAuthorizationContext exists
ok 80 - Amazon::AWS::EC2::Types::CidrAuthorizationContext can be populated
ok 81 - Amazon::AWS::EC2::Types::CidrAuthorizationContext serializes ok
ok 82 - Amazon::AWS::EC2::Types::CidrAuthorizationContext deseralizes ok
# Message
# Signature
ok 83 - Amazon::AWS::EC2::Types::CidrAuthorizationContext compares ok
# CHANGE!
# vicselect
# Message, Signature
# Signature -- Str
# Setting Signature to syzygy!TzWSapofpdBLSwicckp
ok 84 - Changed Amazon::AWS::EC2::Types::CidrAuthorizationContext fails eqv
ok 85 - Amazon::AWS::EC2::Types::CidrBlock loads. Is not a Failure object
ok 86 - Amazon::AWS::EC2::Types::CidrBlock exists
ok 87 - Amazon::AWS::EC2::Types::CidrBlock can be populated
ok 88 - Amazon::AWS::EC2::Types::CidrBlock serializes ok
ok 89 - Amazon::AWS::EC2::Types::CidrBlock deseralizes ok
# cidrBlock
ok 90 - Amazon::AWS::EC2::Types::CidrBlock compares ok
# CHANGE!
# vicselect
# cidrBlock
# cidrBlock -- Str
# Setting cidrBlock to syzygy!eAvAvkXBlPJEVGoWBJuUKdoQW
ok 91 - Changed Amazon::AWS::EC2::Types::CidrBlock fails eqv
ok 92 - Amazon::AWS::EC2::Types::ClassicLinkDnsSupport loads. Is not a Failure object
ok 93 - Amazon::AWS::EC2::Types::ClassicLinkDnsSupport exists
ok 94 - Amazon::AWS::EC2::Types::ClassicLinkDnsSupport can be populated
ok 95 - Amazon::AWS::EC2::Types::ClassicLinkDnsSupport serializes ok
ok 96 - Amazon::AWS::EC2::Types::ClassicLinkDnsSupport deseralizes ok
# classicLinkDnsSupported
# vpcId
ok 97 - Amazon::AWS::EC2::Types::ClassicLinkDnsSupport compares ok
# CHANGE!
# vicselect
# classicLinkDnsSupported, vpcId
# vpcId -- Str
# Setting vpcId to syzygy!akFikjXdZnsHmULPIUQii
ok 98 - Changed Amazon::AWS::EC2::Types::ClassicLinkDnsSupport fails eqv
ok 99 - Amazon::AWS::EC2::Types::ClassicLoadBalancer loads. Is not a Failure object
ok 100 - Amazon::AWS::EC2::Types::ClassicLoadBalancer exists
ok 101 - Amazon::AWS::EC2::Types::ClassicLoadBalancer can be populated
ok 102 - Amazon::AWS::EC2::Types::ClassicLoadBalancer serializes ok
ok 103 - Amazon::AWS::EC2::Types::ClassicLoadBalancer deseralizes ok
# Name
# name
ok 104 - Amazon::AWS::EC2::Types::ClassicLoadBalancer compares ok
# CHANGE!
# vicselect
# Name, name
# Name -- Str
# Setting Name to syzygy!HCfDpficHzxhrhcXdXulF
ok 105 - Changed Amazon::AWS::EC2::Types::ClassicLoadBalancer fails eqv
ok 106 - Amazon::AWS::EC2::Types::ClassicLoadBalancersConfig loads. Is not a Failure object
ok 107 - Amazon::AWS::EC2::Types::ClassicLoadBalancersConfig exists
ok 108 - Amazon::AWS::EC2::Types::ClassicLoadBalancersConfig can be populated
ok 109 - Amazon::AWS::EC2::Types::ClassicLoadBalancersConfig serializes ok
ok 110 - Amazon::AWS::EC2::Types::ClassicLoadBalancersConfig deseralizes ok
# ClassicLoadBalancers
Amazon::AWS::EC2::Types::ClassicLoadBalancer.new(Name => "htagfg", name => "QFydErgsr")
Amazon::AWS::EC2::Types::ClassicLoadBalancer.new(Name => "htagfg", name => "QFydErgsr")
# Name
# name
Amazon::AWS::EC2::Types::ClassicLoadBalancer.new(Name => "EvyILjXynVeW", name => "rzPZyoZiJsjYXPMUpDYMTAk")
Amazon::AWS::EC2::Types::ClassicLoadBalancer.new(Name => "EvyILjXynVeW", name => "rzPZyoZiJsjYXPMUpDYMTAk")
# Name
# name
Amazon::AWS::EC2::Types::ClassicLoadBalancer.new(Name => "eLjtefnVGGRMyvtoNRUz", name => "wIBGlfLtgZYXlVrZONnzvWz")
Amazon::AWS::EC2::Types::ClassicLoadBalancer.new(Name => "eLjtefnVGGRMyvtoNRUz", name => "wIBGlfLtgZYXlVrZONnzvWz")
# Name
# name
Amazon::AWS::EC2::Types::ClassicLoadBalancer.new(Name => "PwjdjdDReqUVQQzmjp", name => "apemZRwHjolEMHvhqfWwZMOa")
Amazon::AWS::EC2::Types::ClassicLoadBalancer.new(Name => "PwjdjdDReqUVQQzmjp", name => "apemZRwHjolEMHvhqfWwZMOa")
# Name
# name
# classicLoadBalancers
Amazon::AWS::EC2::Types::ClassicLoadBalancer.new(Name => "irmrXTHKECnYuLuAtxzesPGgTRsUTI", name => "PTZHPRmdeQNOZReHCnBWl")
Amazon::AWS::EC2::Types::ClassicLoadBalancer.new(Name => "irmrXTHKECnYuLuAtxzesPGgTRsUTI", name => "PTZHPRmdeQNOZReHCnBWl")
# Name
# name
Amazon::AWS::EC2::Types::ClassicLoadBalancer.new(Name => "axbAuYTTAzFRUdVhZFLTy", name => "nNodzaYouI")
Amazon::AWS::EC2::Types::ClassicLoadBalancer.new(Name => "axbAuYTTAzFRUdVhZFLTy", name => "nNodzaYouI")
# Name
# name
ok 111 - Amazon::AWS::EC2::Types::ClassicLoadBalancersConfig compares ok
# CHANGE!
# vicselect
# ClassicLoadBalancers, classicLoadBalancers
# classicLoadBalancers -- Str
# Setting classicLoadBalancers to []
# Type check failed in assignment to @!classicLoadBalancers; expected Amazon::AWS::EC2::Types::ClassicLoadBalancer but got Array[Amazon::AWS::EC2::Types::ClassicLoadBalancer] (Array[Amazon::AWS::EC2::Types::ClassicLoadBalancer].new())
ok 112 - Amazon::AWS::EC2::Types::ClientCertificateRevocationListStatus loads. Is not a Failure object
ok 113 - Amazon::AWS::EC2::Types::ClientCertificateRevocationListStatus exists
ok 114 - Amazon::AWS::EC2::Types::ClientCertificateRevocationListStatus can be populated
ok 115 - Amazon::AWS::EC2::Types::ClientCertificateRevocationListStatus serializes ok
ok 116 - Amazon::AWS::EC2::Types::ClientCertificateRevocationListStatus deseralizes ok
# code
# message
ok 117 - Amazon::AWS::EC2::Types::ClientCertificateRevocationListStatus compares ok
# CHANGE!
# vicselect
# code, message
# message -- Str
# Setting message to syzygy!KXeUqYpTCU
ok 118 - Changed Amazon::AWS::EC2::Types::ClientCertificateRevocationListStatus fails eqv
ok 119 - Amazon::AWS::EC2::Types::ClientData loads. Is not a Failure object
ok 120 - Amazon::AWS::EC2::Types::ClientData exists
ok 121 - Amazon::AWS::EC2::Types::ClientData can be populated
ok 122 - Amazon::AWS::EC2::Types::ClientData serializes ok
ok 123 - Amazon::AWS::EC2::Types::ClientData deseralizes ok
# Comment
# UploadEnd
# UploadSize
# UploadStart
ok 124 - Amazon::AWS::EC2::Types::ClientData compares ok
# CHANGE!
# vicselect
# vicselect
# Comment, UploadEnd, UploadSize, UploadStart
# UploadStart -- Str
# Setting UploadStart to syzygy!wqZLpZuKCSnxTETUZQcFLxLzy
ok 125 - Changed Amazon::AWS::EC2::Types::ClientData fails eqv
ok 126 - Amazon::AWS::EC2::Types::ClientVpnAuthorizationRuleStatus loads. Is not a Failure object
ok 127 - Amazon::AWS::EC2::Types::ClientVpnAuthorizationRuleStatus exists
ok 128 - Amazon::AWS::EC2::Types::ClientVpnAuthorizationRuleStatus can be populated
ok 129 - Amazon::AWS::EC2::Types::ClientVpnAuthorizationRuleStatus serializes ok
ok 130 - Amazon::AWS::EC2::Types::ClientVpnAuthorizationRuleStatus deseralizes ok
# code
# message
ok 131 - Amazon::AWS::EC2::Types::ClientVpnAuthorizationRuleStatus compares ok
# CHANGE!
# vicselect
# code, message
# message -- Str
# Setting message to syzygy!RdzctWV
ok 132 - Changed Amazon::AWS::EC2::Types::ClientVpnAuthorizationRuleStatus fails eqv
ok 133 - Amazon::AWS::EC2::Types::ClientVpnConnectionStatus loads. Is not a Failure object
ok 134 - Amazon::AWS::EC2::Types::ClientVpnConnectionStatus exists
ok 135 - Amazon::AWS::EC2::Types::ClientVpnConnectionStatus can be populated
ok 136 - Amazon::AWS::EC2::Types::ClientVpnConnectionStatus serializes ok
ok 137 - Amazon::AWS::EC2::Types::ClientVpnConnectionStatus deseralizes ok
# code
# message
ok 138 - Amazon::AWS::EC2::Types::ClientVpnConnectionStatus compares ok
# CHANGE!
# vicselect
# code, message
# code -- Str
# Setting code to syzygy!failed
ok 139 - Changed Amazon::AWS::EC2::Types::ClientVpnConnectionStatus fails eqv
ok 140 - Amazon::AWS::EC2::Types::ClientVpnEndpointStatus loads. Is not a Failure object
ok 141 - Amazon::AWS::EC2::Types::ClientVpnEndpointStatus exists
ok 142 - Amazon::AWS::EC2::Types::ClientVpnEndpointStatus can be populated
ok 143 - Amazon::AWS::EC2::Types::ClientVpnEndpointStatus serializes ok
ok 144 - Amazon::AWS::EC2::Types::ClientVpnEndpointStatus deseralizes ok
# code
# message
ok 145 - Amazon::AWS::EC2::Types::ClientVpnEndpointStatus compares ok
# CHANGE!
# vicselect
# code, message
# code -- Str
# Setting code to syzygy!pending
ok 146 - Changed Amazon::AWS::EC2::Types::ClientVpnEndpointStatus fails eqv
ok 147 - Amazon::AWS::EC2::Types::ClientVpnRouteStatus loads. Is not a Failure object
ok 148 - Amazon::AWS::EC2::Types::ClientVpnRouteStatus exists
ok 149 - Amazon::AWS::EC2::Types::ClientVpnRouteStatus can be populated
ok 150 - Amazon::AWS::EC2::Types::ClientVpnRouteStatus serializes ok
ok 151 - Amazon::AWS::EC2::Types::ClientVpnRouteStatus deseralizes ok
# code
# message
ok 152 - Amazon::AWS::EC2::Types::ClientVpnRouteStatus compares ok
# CHANGE!
# vicselect
# code, message
# message -- Str
# Setting message to syzygy!QgAQMYwgtZynNUJFvBPErSN
ok 153 - Changed Amazon::AWS::EC2::Types::ClientVpnRouteStatus fails eqv
ok 154 - Amazon::AWS::EC2::Types::ConnectionLogOptions loads. Is not a Failure object
ok 155 - Amazon::AWS::EC2::Types::ConnectionLogOptions exists
ok 156 - Amazon::AWS::EC2::Types::ConnectionLogOptions can be populated
ok 157 - Amazon::AWS::EC2::Types::ConnectionLogOptions serializes ok
ok 158 - Amazon::AWS::EC2::Types::ConnectionLogOptions deseralizes ok
# CloudwatchLogGroup
# CloudwatchLogStream
# Enabled
ok 159 - Amazon::AWS::EC2::Types::ConnectionLogOptions compares ok
# CHANGE!
# vicselect
# CloudwatchLogGroup, CloudwatchLogStream, Enabled
# Enabled -- Str
# Setting Enabled to True
not ok 160 - Changed Amazon::AWS::EC2::Types::ConnectionLogOptions fails eqv
# Failed test 'Changed Amazon::AWS::EC2::Types::ConnectionLogOptions fails eqv'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 120
ok 161 - Amazon::AWS::EC2::Types::ConnectionLogResponseOptions loads. Is not a Failure object
ok 162 - Amazon::AWS::EC2::Types::ConnectionLogResponseOptions exists
ok 163 - Amazon::AWS::EC2::Types::ConnectionLogResponseOptions can be populated
ok 164 - Amazon::AWS::EC2::Types::ConnectionLogResponseOptions serializes ok
ok 165 - Amazon::AWS::EC2::Types::ConnectionLogResponseOptions deseralizes ok
# CloudwatchLogGroup
# CloudwatchLogStream
# Enabled
ok 166 - Amazon::AWS::EC2::Types::ConnectionLogResponseOptions compares ok
# CHANGE!
# vicselect
# CloudwatchLogGroup, CloudwatchLogStream, Enabled
# CloudwatchLogStream -- Str
# Setting CloudwatchLogStream to syzygy!uiKMLVY
ok 167 - Changed Amazon::AWS::EC2::Types::ConnectionLogResponseOptions fails eqv
ok 168 - Amazon::AWS::EC2::Types::ConnectionNotification loads. Is not a Failure object
ok 169 - Amazon::AWS::EC2::Types::ConnectionNotification exists
ok 170 - Amazon::AWS::EC2::Types::ConnectionNotification can be populated
ok 171 - Amazon::AWS::EC2::Types::ConnectionNotification serializes ok
ok 172 - Amazon::AWS::EC2::Types::ConnectionNotification deseralizes ok
# connectionEvents
spFuGPMhDuLXVNB
spFuGPMhDuLXVNB
WFtJyZAVgHUpoPm
WFtJyZAVgHUpoPm
dItDIllNIHmrvQuCMOpyfnDdkNT
dItDIllNIHmrvQuCMOpyfnDdkNT
# connectionNotificationArn
# connectionNotificationId
# connectionNotificationState
# connectionNotificationType
# serviceId
# vpcEndpointId
ok 173 - Amazon::AWS::EC2::Types::ConnectionNotification compares ok
# CHANGE!
# vicselect
# connectionEvents, connectionNotificationArn, connectionNotificationId, connectionNotificationState, connectionNotificationType, serviceId, vpcEndpointId
# connectionEvents -- Str
# Setting connectionEvents to []
# Type check failed in assignment to @!connectionEvents; expected Str but got Array[Str] (Array[Str].new())
ok 174 - Amazon::AWS::EC2::Types::CpuOptions loads. Is not a Failure object
ok 175 - Amazon::AWS::EC2::Types::CpuOptions exists
ok 176 - Amazon::AWS::EC2::Types::CpuOptions can be populated
ok 177 - Amazon::AWS::EC2::Types::CpuOptions serializes ok
ok 178 - Amazon::AWS::EC2::Types::CpuOptions deseralizes ok
# coreCount
# threadsPerCore
ok 179 - Amazon::AWS::EC2::Types::CpuOptions compares ok
# CHANGE!
# vicselect
# coreCount, threadsPerCore
# coreCount -- Str
# Setting coreCount to 12
ok 180 - Changed Amazon::AWS::EC2::Types::CpuOptions fails eqv
ok 181 - Amazon::AWS::EC2::Types::CpuOptionsRequest loads. Is not a Failure object
ok 182 - Amazon::AWS::EC2::Types::CpuOptionsRequest exists
ok 183 - Amazon::AWS::EC2::Types::CpuOptionsRequest can be populated
ok 184 - Amazon::AWS::EC2::Types::CpuOptionsRequest serializes ok
ok 185 - Amazon::AWS::EC2::Types::CpuOptionsRequest deseralizes ok
# CoreCount
# ThreadsPerCore
ok 186 - Amazon::AWS::EC2::Types::CpuOptionsRequest compares ok
# CHANGE!
# vicselect
# CoreCount, ThreadsPerCore
# ThreadsPerCore -- Str
# Setting ThreadsPerCore to 25
ok 187 - Changed Amazon::AWS::EC2::Types::CpuOptionsRequest fails eqv
ok 188 - Amazon::AWS::EC2::Types::CreateTransitGatewayVpcAttachmentRequestOptions loads. Is not a Failure object
ok 189 - Amazon::AWS::EC2::Types::CreateTransitGatewayVpcAttachmentRequestOptions exists
ok 190 - Amazon::AWS::EC2::Types::CreateTransitGatewayVpcAttachmentRequestOptions can be populated
ok 191 - Amazon::AWS::EC2::Types::CreateTransitGatewayVpcAttachmentRequestOptions serializes ok
ok 192 - Amazon::AWS::EC2::Types::CreateTransitGatewayVpcAttachmentRequestOptions deseralizes ok
# DnsSupport
# Ipv6Support
ok 193 - Amazon::AWS::EC2::Types::CreateTransitGatewayVpcAttachmentRequestOptions compares ok
# CHANGE!
# vicselect
# DnsSupport, Ipv6Support
# DnsSupport -- Str
# Setting DnsSupport to syzygy!disable
ok 194 - Changed Amazon::AWS::EC2::Types::CreateTransitGatewayVpcAttachmentRequestOptions fails eqv
ok 195 - Amazon::AWS::EC2::Types::CreateVolumePermission loads. Is not a Failure object
ok 196 - Amazon::AWS::EC2::Types::CreateVolumePermission exists
ok 197 - Amazon::AWS::EC2::Types::CreateVolumePermission can be populated
ok 198 - Amazon::AWS::EC2::Types::CreateVolumePermission serializes ok
ok 199 - Amazon::AWS::EC2::Types::CreateVolumePermission deseralizes ok
# Group
# group
# UserId
# userId
ok 200 - Amazon::AWS::EC2::Types::CreateVolumePermission compares ok
# CHANGE!
# vicselect
# Group, group, UserId, userId
# Group -- Str
# Setting Group to syzygy!all
ok 201 - Changed Amazon::AWS::EC2::Types::CreateVolumePermission fails eqv
ok 202 - Amazon::AWS::EC2::Types::CreateVolumePermissionModifications loads. Is not a Failure object
ok 203 - Amazon::AWS::EC2::Types::CreateVolumePermissionModifications exists
ok 204 - Amazon::AWS::EC2::Types::CreateVolumePermissionModifications can be populated
ok 205 - Amazon::AWS::EC2::Types::CreateVolumePermissionModifications serializes ok
ok 206 - Amazon::AWS::EC2::Types::CreateVolumePermissionModifications deseralizes ok
# Add
Amazon::AWS::EC2::Types::CreateVolumePermission.new(Group => "all", group => "all", UserId => "yLTZKORzFireZUBPMiXiv", userId => "fdxQWUFZXXEllsZr")
Amazon::AWS::EC2::Types::CreateVolumePermission.new(Group => "all", group => "all", UserId => "yLTZKORzFireZUBPMiXiv", userId => "fdxQWUFZXXEllsZr")
# Group
# group
# UserId
# userId
Amazon::AWS::EC2::Types::CreateVolumePermission.new(Group => "all", group => "all", UserId => "PPlrBSGO", userId => "FqDNgunOJApFBJAcznqxnVEZb")
Amazon::AWS::EC2::Types::CreateVolumePermission.new(Group => "all", group => "all", UserId => "PPlrBSGO", userId => "FqDNgunOJApFBJAcznqxnVEZb")
# Group
# group
# UserId
# userId
Amazon::AWS::EC2::Types::CreateVolumePermission.new(Group => "all", group => "all", UserId => "HPOEUMxyMP", userId => "nMLCFAQdmBBDH")
Amazon::AWS::EC2::Types::CreateVolumePermission.new(Group => "all", group => "all", UserId => "HPOEUMxyMP", userId => "nMLCFAQdmBBDH")
# Group
# group
# UserId
# userId
Amazon::AWS::EC2::Types::CreateVolumePermission.new(Group => "all", group => "all", UserId => "ujRgXDD", userId => "snbBSOmYrWFHyNbSGqKHCTqUkfr")
Amazon::AWS::EC2::Types::CreateVolumePermission.new(Group => "all", group => "all", UserId => "ujRgXDD", userId => "snbBSOmYrWFHyNbSGqKHCTqUkfr")
# Group
# group
# UserId
# userId
# Remove
Amazon::AWS::EC2::Types::CreateVolumePermission.new(Group => "all", group => "all", UserId => "EfiJXKcfzxYEJMViiRuqEueYJ", userId => "DbsjY")
Amazon::AWS::EC2::Types::CreateVolumePermission.new(Group => "all", group => "all", UserId => "EfiJXKcfzxYEJMViiRuqEueYJ", userId => "DbsjY")
# Group
# group
# UserId
# userId
ok 207 - Amazon::AWS::EC2::Types::CreateVolumePermissionModifications compares ok
# CHANGE!
# vicselect
# Add, Remove
# Remove -- Str
# Setting Remove to []
# Type check failed in assignment to @!Remove; expected Amazon::AWS::EC2::Types::CreateVolumePermission but got Array[Amazon::AWS::EC2::Types::CreateVolumePermission] (Array[Amazon::AWS::EC2::Types::CreateVolumePermission].new())
ok 208 - Amazon::AWS::EC2::Types::CreditSpecification loads. Is not a Failure object
ok 209 - Amazon::AWS::EC2::Types::CreditSpecification exists
ok 210 - Amazon::AWS::EC2::Types::CreditSpecification can be populated
ok 211 - Amazon::AWS::EC2::Types::CreditSpecification serializes ok
ok 212 - Amazon::AWS::EC2::Types::CreditSpecification deseralizes ok
# cpuCredits
ok 213 - Amazon::AWS::EC2::Types::CreditSpecification compares ok
# CHANGE!
# vicselect
# cpuCredits
# cpuCredits -- Str
# Setting cpuCredits to syzygy!zQjWjhqObDsSbMZhHlsVGbUVpTw
ok 214 - Changed Amazon::AWS::EC2::Types::CreditSpecification fails eqv
ok 215 - Amazon::AWS::EC2::Types::CreditSpecificationRequest loads. Is not a Failure object
ok 216 - Amazon::AWS::EC2::Types::CreditSpecificationRequest exists
ok 217 - Amazon::AWS::EC2::Types::CreditSpecificationRequest can be populated
ok 218 - Amazon::AWS::EC2::Types::CreditSpecificationRequest serializes ok
ok 219 - Amazon::AWS::EC2::Types::CreditSpecificationRequest deseralizes ok
# CpuCredits
ok 220 - Amazon::AWS::EC2::Types::CreditSpecificationRequest compares ok
# CHANGE!
# vicselect
# CpuCredits
# CpuCredits -- Str
# Setting CpuCredits to syzygy!jEPthjnMEIJAXuAYEhoPwUyTKjidt
ok 221 - Changed Amazon::AWS::EC2::Types::CreditSpecificationRequest fails eqv
ok 222 - Amazon::AWS::EC2::Types::DeleteFleetError loads. Is not a Failure object
ok 223 - Amazon::AWS::EC2::Types::DeleteFleetError exists
ok 224 - Amazon::AWS::EC2::Types::DeleteFleetError can be populated
ok 225 - Amazon::AWS::EC2::Types::DeleteFleetError serializes ok
ok 226 - Amazon::AWS::EC2::Types::DeleteFleetError deseralizes ok
# code
# message
ok 227 - Amazon::AWS::EC2::Types::DeleteFleetError compares ok
# CHANGE!
# vicselect
# code, message
# message -- Str
# Setting message to syzygy!aaSJiQxXaXtf
ok 228 - Changed Amazon::AWS::EC2::Types::DeleteFleetError fails eqv
ok 229 - Amazon::AWS::EC2::Types::DeleteFleetErrorItem loads. Is not a Failure object
ok 230 - Amazon::AWS::EC2::Types::DeleteFleetErrorItem exists
ok 231 - Amazon::AWS::EC2::Types::DeleteFleetErrorItem can be populated
ok 232 - Amazon::AWS::EC2::Types::DeleteFleetErrorItem serializes ok
ok 233 - Amazon::AWS::EC2::Types::DeleteFleetErrorItem deseralizes ok
# error
# code
not ok 234 - Amazon::AWS::EC2::Types::DeleteFleetErrorItem compares ok
# Failed test 'Amazon::AWS::EC2::Types::DeleteFleetErrorItem compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 119
# CHANGE!
# vicselect
# error, fleetId
# error -- Str
# Setting error to Amazon::AWS::EC2::Types::DeleteFleetError.new(code => Str, message => Str)
ok 235 - Changed Amazon::AWS::EC2::Types::DeleteFleetErrorItem fails eqv
ok 236 - Amazon::AWS::EC2::Types::DeleteFleetSuccessItem loads. Is not a Failure object
ok 237 - Amazon::AWS::EC2::Types::DeleteFleetSuccessItem exists
ok 238 - Amazon::AWS::EC2::Types::DeleteFleetSuccessItem can be populated
ok 239 - Amazon::AWS::EC2::Types::DeleteFleetSuccessItem serializes ok
ok 240 - Amazon::AWS::EC2::Types::DeleteFleetSuccessItem deseralizes ok
# currentFleetState
# fleetId
# previousFleetState
ok 241 - Amazon::AWS::EC2::Types::DeleteFleetSuccessItem compares ok
# CHANGE!
# vicselect
# currentFleetState, fleetId, previousFleetState
# fleetId -- Str
# Setting fleetId to syzygy!xyUbskMMpnYETQw
ok 242 - Changed Amazon::AWS::EC2::Types::DeleteFleetSuccessItem fails eqv
ok 243 - Amazon::AWS::EC2::Types::DeleteLaunchTemplateVersionsResponseSuccessItem loads. Is not a Failure object
ok 244 - Amazon::AWS::EC2::Types::DeleteLaunchTemplateVersionsResponseSuccessItem exists
ok 245 - Amazon::AWS::EC2::Types::DeleteLaunchTemplateVersionsResponseSuccessItem can be populated
ok 246 - Amazon::AWS::EC2::Types::DeleteLaunchTemplateVersionsResponseSuccessItem serializes ok
ok 247 - Amazon::AWS::EC2::Types::DeleteLaunchTemplateVersionsResponseSuccessItem deseralizes ok
# launchTemplateId
# launchTemplateName
# versionNumber
ok 248 - Amazon::AWS::EC2::Types::DeleteLaunchTemplateVersionsResponseSuccessItem compares ok
# CHANGE!
# vicselect
# launchTemplateId, launchTemplateName, versionNumber
# launchTemplateId -- Str
# Setting launchTemplateId to syzygy!SZJeX
ok 249 - Changed Amazon::AWS::EC2::Types::DeleteLaunchTemplateVersionsResponseSuccessItem fails eqv
ok 250 - Amazon::AWS::EC2::Types::DirectoryServiceAuthentication loads. Is not a Failure object
ok 251 - Amazon::AWS::EC2::Types::DirectoryServiceAuthentication exists
ok 252 - Amazon::AWS::EC2::Types::DirectoryServiceAuthentication can be populated
ok 253 - Amazon::AWS::EC2::Types::DirectoryServiceAuthentication serializes ok
ok 254 - Amazon::AWS::EC2::Types::DirectoryServiceAuthentication deseralizes ok
# directoryId
ok 255 - Amazon::AWS::EC2::Types::DirectoryServiceAuthentication compares ok
# CHANGE!
# vicselect
# directoryId
# directoryId -- Str
# Setting directoryId to syzygy!wQtRHMjtjkiictLNfPkhSMSIgrZ
ok 256 - Changed Amazon::AWS::EC2::Types::DirectoryServiceAuthentication fails eqv
ok 257 - Amazon::AWS::EC2::Types::DirectoryServiceAuthenticationRequest loads. Is not a Failure object
ok 258 - Amazon::AWS::EC2::Types::DirectoryServiceAuthenticationRequest exists
ok 259 - Amazon::AWS::EC2::Types::DirectoryServiceAuthenticationRequest can be populated
ok 260 - Amazon::AWS::EC2::Types::DirectoryServiceAuthenticationRequest serializes ok
ok 261 - Amazon::AWS::EC2::Types::DirectoryServiceAuthenticationRequest deseralizes ok
# DirectoryId
ok 262 - Amazon::AWS::EC2::Types::DirectoryServiceAuthenticationRequest compares ok
# CHANGE!
# vicselect
# DirectoryId
# DirectoryId -- Str
# Setting DirectoryId to syzygy!fwMKyUv
ok 263 - Changed Amazon::AWS::EC2::Types::DirectoryServiceAuthenticationRequest fails eqv
ok 264 - Amazon::AWS::EC2::Types::DiskImageDescription loads. Is not a Failure object
ok 265 - Amazon::AWS::EC2::Types::DiskImageDescription exists
ok 266 - Amazon::AWS::EC2::Types::DiskImageDescription can be populated
ok 267 - Amazon::AWS::EC2::Types::DiskImageDescription serializes ok
ok 268 - Amazon::AWS::EC2::Types::DiskImageDescription deseralizes ok
# checksum
# format
# importManifestUrl
# size
ok 269 - Amazon::AWS::EC2::Types::DiskImageDescription compares ok
# CHANGE!
# vicselect
# checksum, format, importManifestUrl, size
# importManifestUrl -- Str
# Setting importManifestUrl to syzygy!WUcjkDhigTXXKvCxlHCuUIgVHdWcD
ok 270 - Changed Amazon::AWS::EC2::Types::DiskImageDescription fails eqv
ok 271 - Amazon::AWS::EC2::Types::DiskImageDetail loads. Is not a Failure object
ok 272 - Amazon::AWS::EC2::Types::DiskImageDetail exists
ok 273 - Amazon::AWS::EC2::Types::DiskImageDetail can be populated
ok 274 - Amazon::AWS::EC2::Types::DiskImageDetail serializes ok
ok 275 - Amazon::AWS::EC2::Types::DiskImageDetail deseralizes ok
# Bytes
# Format
# ImportManifestUrl
ok 276 - Amazon::AWS::EC2::Types::DiskImageDetail compares ok
# CHANGE!
# vicselect
# Bytes, Format, ImportManifestUrl
# Format -- Str
# Setting Format to syzygy!VHD
ok 277 - Changed Amazon::AWS::EC2::Types::DiskImageDetail fails eqv
ok 278 - Amazon::AWS::EC2::Types::DiskImageVolumeDescription loads. Is not a Failure object
ok 279 - Amazon::AWS::EC2::Types::DiskImageVolumeDescription exists
ok 280 - Amazon::AWS::EC2::Types::DiskImageVolumeDescription can be populated
ok 281 - Amazon::AWS::EC2::Types::DiskImageVolumeDescription serializes ok
ok 282 - Amazon::AWS::EC2::Types::DiskImageVolumeDescription deseralizes ok
# id
# size
ok 283 - Amazon::AWS::EC2::Types::DiskImageVolumeDescription compares ok
# CHANGE!
# vicselect
# id, size
# id -- Str
# Setting id to syzygy!COrtYrNVOwadALBPs
ok 284 - Changed Amazon::AWS::EC2::Types::DiskImageVolumeDescription fails eqv
ok 285 - Amazon::AWS::EC2::Types::DnsEntry loads. Is not a Failure object
ok 286 - Amazon::AWS::EC2::Types::DnsEntry exists
ok 287 - Amazon::AWS::EC2::Types::DnsEntry can be populated
ok 288 - Amazon::AWS::EC2::Types::DnsEntry serializes ok
ok 289 - Amazon::AWS::EC2::Types::DnsEntry deseralizes ok
# dnsName
# hostedZoneId
ok 290 - Amazon::AWS::EC2::Types::DnsEntry compares ok
# CHANGE!
# vicselect
# dnsName, hostedZoneId
# dnsName -- Str
# Setting dnsName to syzygy!NgbNfZMieMKBTKrnvJtj
ok 291 - Changed Amazon::AWS::EC2::Types::DnsEntry fails eqv
ok 292 - Amazon::AWS::EC2::Types::DnsServersOptionsModifyStructure loads. Is not a Failure object
ok 293 - Amazon::AWS::EC2::Types::DnsServersOptionsModifyStructure exists
ok 294 - Amazon::AWS::EC2::Types::DnsServersOptionsModifyStructure can be populated
ok 295 - Amazon::AWS::EC2::Types::DnsServersOptionsModifyStructure serializes ok
ok 296 - Amazon::AWS::EC2::Types::DnsServersOptionsModifyStructure deseralizes ok
# CustomDnsServers
fHfeQbnwEPuRhFZTOxokssmhLKOng
fHfeQbnwEPuRhFZTOxokssmhLKOng
# Enabled
ok 297 - Amazon::AWS::EC2::Types::DnsServersOptionsModifyStructure compares ok
# CHANGE!
# vicselect
# CustomDnsServers, Enabled
# CustomDnsServers -- Str
# Setting CustomDnsServers to []
# Type check failed in assignment to @!CustomDnsServers; expected Str but got Array[Str] (Array[Str].new())
ok 298 - Amazon::AWS::EC2::Types::EbsBlockDevice loads. Is not a Failure object
not ok 299 - Amazon::AWS::EC2::Types::EbsBlockDevice exists
# Failed test 'Amazon::AWS::EC2::Types::EbsBlockDevice exists'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 105
Nil
Perl6::Metamodel::ClassHOW.new
# No such symbol 'Amazon::AWS::EC2::Types::EbsBlockDevice'
not ok 300 - Amazon::AWS::EC2::Types::EbsBlockDevice can be populated
# Failed test 'Amazon::AWS::EC2::Types::EbsBlockDevice can be populated'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 106
# No such symbol 'Amazon::AWS::EC2::Types::EbsBlockDevice'
not ok 301 - Amazon::AWS::EC2::Types::EbsBlockDevice serializes ok
# Failed test 'Amazon::AWS::EC2::Types::EbsBlockDevice serializes ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 117
# No such method 'to-xml' for invocant of type 'Any'
ok 302 - Amazon::AWS::EC2::Types::EbsBlockDevice deseralizes ok
# No such method 'eqv' for invocant of type 'Any'
ok 303 - Amazon::AWS::EC2::Types::EbsInstanceBlockDevice loads. Is not a Failure object
ok 304 - Amazon::AWS::EC2::Types::EbsInstanceBlockDevice exists
ok 305 - Amazon::AWS::EC2::Types::EbsInstanceBlockDevice can be populated
ok 306 - Amazon::AWS::EC2::Types::EbsInstanceBlockDevice serializes ok
ok 307 - Amazon::AWS::EC2::Types::EbsInstanceBlockDevice deseralizes ok
# attachTime
# deleteOnTermination
# status
# volumeId
ok 308 - Amazon::AWS::EC2::Types::EbsInstanceBlockDevice compares ok
# CHANGE!
# vicselect
# attachTime, deleteOnTermination, status, volumeId
# volumeId -- Str
# Setting volumeId to syzygy!YYhhqdRkMYsA
ok 309 - Changed Amazon::AWS::EC2::Types::EbsInstanceBlockDevice fails eqv
ok 310 - Amazon::AWS::EC2::Types::EbsInstanceBlockDeviceSpecification loads. Is not a Failure object
ok 311 - Amazon::AWS::EC2::Types::EbsInstanceBlockDeviceSpecification exists
ok 312 - Amazon::AWS::EC2::Types::EbsInstanceBlockDeviceSpecification can be populated
ok 313 - Amazon::AWS::EC2::Types::EbsInstanceBlockDeviceSpecification serializes ok
ok 314 - Amazon::AWS::EC2::Types::EbsInstanceBlockDeviceSpecification deseralizes ok
# DeleteOnTermination
# VolumeId
ok 315 - Amazon::AWS::EC2::Types::EbsInstanceBlockDeviceSpecification compares ok
# CHANGE!
# vicselect
# DeleteOnTermination, VolumeId
# DeleteOnTermination -- Str
# Setting DeleteOnTermination to True
ok 316 - Changed Amazon::AWS::EC2::Types::EbsInstanceBlockDeviceSpecification fails eqv
ok 317 - Amazon::AWS::EC2::Types::ElasticGpuAssociation loads. Is not a Failure object
ok 318 - Amazon::AWS::EC2::Types::ElasticGpuAssociation exists
ok 319 - Amazon::AWS::EC2::Types::ElasticGpuAssociation can be populated
ok 320 - Amazon::AWS::EC2::Types::ElasticGpuAssociation serializes ok
ok 321 - Amazon::AWS::EC2::Types::ElasticGpuAssociation deseralizes ok
# elasticGpuAssociationId
# elasticGpuAssociationState
# elasticGpuAssociationTime
# elasticGpuId
ok 322 - Amazon::AWS::EC2::Types::ElasticGpuAssociation compares ok
# CHANGE!
# vicselect
# elasticGpuAssociationId, elasticGpuAssociationState, elasticGpuAssociationTime, elasticGpuId
# elasticGpuAssociationId -- Str
# Setting elasticGpuAssociationId to syzygy!EYKsAl
ok 323 - Changed Amazon::AWS::EC2::Types::ElasticGpuAssociation fails eqv
ok 324 - Amazon::AWS::EC2::Types::ElasticGpuHealth loads. Is not a Failure object
ok 325 - Amazon::AWS::EC2::Types::ElasticGpuHealth exists
ok 326 - Amazon::AWS::EC2::Types::ElasticGpuHealth can be populated
ok 327 - Amazon::AWS::EC2::Types::ElasticGpuHealth serializes ok
ok 328 - Amazon::AWS::EC2::Types::ElasticGpuHealth deseralizes ok
# status
ok 329 - Amazon::AWS::EC2::Types::ElasticGpuHealth compares ok
# CHANGE!
# vicselect
# status
# status -- Str
# Setting status to syzygy!OK
ok 330 - Changed Amazon::AWS::EC2::Types::ElasticGpuHealth fails eqv
ok 331 - Amazon::AWS::EC2::Types::ElasticGpuSpecification loads. Is not a Failure object
ok 332 - Amazon::AWS::EC2::Types::ElasticGpuSpecification exists
ok 333 - Amazon::AWS::EC2::Types::ElasticGpuSpecification can be populated
ok 334 - Amazon::AWS::EC2::Types::ElasticGpuSpecification serializes ok
ok 335 - Amazon::AWS::EC2::Types::ElasticGpuSpecification deseralizes ok
# Type
ok 336 - Amazon::AWS::EC2::Types::ElasticGpuSpecification compares ok
# CHANGE!
# vicselect
# Type
# Type -- Str
# Setting Type to syzygy!KAHpnXumcBCXwYuKxHMJRJHurwK
ok 337 - Changed Amazon::AWS::EC2::Types::ElasticGpuSpecification fails eqv
ok 338 - Amazon::AWS::EC2::Types::ElasticGpuSpecificationResponse loads. Is not a Failure object
ok 339 - Amazon::AWS::EC2::Types::ElasticGpuSpecificationResponse exists
ok 340 - Amazon::AWS::EC2::Types::ElasticGpuSpecificationResponse can be populated
ok 341 - Amazon::AWS::EC2::Types::ElasticGpuSpecificationResponse serializes ok
ok 342 - Amazon::AWS::EC2::Types::ElasticGpuSpecificationResponse deseralizes ok
# type
ok 343 - Amazon::AWS::EC2::Types::ElasticGpuSpecificationResponse compares ok
# CHANGE!
# vicselect
# type
# type -- Str
# Setting type to syzygy!toRObMYuaZhPdcMgLzoNAONuAd
ok 344 - Changed Amazon::AWS::EC2::Types::ElasticGpuSpecificationResponse fails eqv
ok 345 - Amazon::AWS::EC2::Types::ElasticGpus loads. Is not a Failure object
ok 346 - Amazon::AWS::EC2::Types::ElasticGpus exists
ok 347 - Amazon::AWS::EC2::Types::ElasticGpus can be populated
ok 348 - Amazon::AWS::EC2::Types::ElasticGpus serializes ok
ok 349 - Amazon::AWS::EC2::Types::ElasticGpus deseralizes ok
# availabilityZone
# elasticGpuHealth
# status
not ok 350 - Amazon::AWS::EC2::Types::ElasticGpus compares ok
# Failed test 'Amazon::AWS::EC2::Types::ElasticGpus compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 119
# CHANGE!
# vicselect
# availabilityZone, elasticGpuHealth, elasticGpuId, elasticGpuState, elasticGpuType, instanceId
# elasticGpuHealth -- Str
# Setting elasticGpuHealth to Amazon::AWS::EC2::Types::ElasticGpuHealth.new(status => Str)
ok 351 - Changed Amazon::AWS::EC2::Types::ElasticGpus fails eqv
ok 352 - Amazon::AWS::EC2::Types::ElasticInferenceAccelerator loads. Is not a Failure object
ok 353 - Amazon::AWS::EC2::Types::ElasticInferenceAccelerator exists
ok 354 - Amazon::AWS::EC2::Types::ElasticInferenceAccelerator can be populated
ok 355 - Amazon::AWS::EC2::Types::ElasticInferenceAccelerator serializes ok
ok 356 - Amazon::AWS::EC2::Types::ElasticInferenceAccelerator deseralizes ok
# type
ok 357 - Amazon::AWS::EC2::Types::ElasticInferenceAccelerator compares ok
# CHANGE!
# vicselect
# type
# type -- Str
# Setting type to syzygy!GMQigIfkl
ok 358 - Changed Amazon::AWS::EC2::Types::ElasticInferenceAccelerator fails eqv
ok 359 - Amazon::AWS::EC2::Types::ElasticInferenceAcceleratorAssociation loads. Is not a Failure object
ok 360 - Amazon::AWS::EC2::Types::ElasticInferenceAcceleratorAssociation exists
ok 361 - Amazon::AWS::EC2::Types::ElasticInferenceAcceleratorAssociation can be populated
ok 362 - Amazon::AWS::EC2::Types::ElasticInferenceAcceleratorAssociation serializes ok
ok 363 - Amazon::AWS::EC2::Types::ElasticInferenceAcceleratorAssociation deseralizes ok
# elasticInferenceAcceleratorArn
# elasticInferenceAcceleratorAssociationId
# elasticInferenceAcceleratorAssociationState
# elasticInferenceAcceleratorAssociationTime
ok 364 - Amazon::AWS::EC2::Types::ElasticInferenceAcceleratorAssociation compares ok
# CHANGE!
# vicselect
# elasticInferenceAcceleratorArn, elasticInferenceAcceleratorAssociationId, elasticInferenceAcceleratorAssociationState, elasticInferenceAcceleratorAssociationTime
# elasticInferenceAcceleratorAssociationId -- Str
# Setting elasticInferenceAcceleratorAssociationId to syzygy!iBHvojreRkHziJIK
ok 365 - Changed Amazon::AWS::EC2::Types::ElasticInferenceAcceleratorAssociation fails eqv
ok 366 - Amazon::AWS::EC2::Types::EventInformation loads. Is not a Failure object
ok 367 - Amazon::AWS::EC2::Types::EventInformation exists
ok 368 - Amazon::AWS::EC2::Types::EventInformation can be populated
ok 369 - Amazon::AWS::EC2::Types::EventInformation serializes ok
ok 370 - Amazon::AWS::EC2::Types::EventInformation deseralizes ok
# eventDescription
# eventSubType
# instanceId
ok 371 - Amazon::AWS::EC2::Types::EventInformation compares ok
# CHANGE!
# vicselect
# eventDescription, eventSubType, instanceId
# eventDescription -- Str
# Setting eventDescription to syzygy!mbhaxSEcnqaZjgBCj
ok 372 - Changed Amazon::AWS::EC2::Types::EventInformation fails eqv
ok 373 - Amazon::AWS::EC2::Types::ExportToS3Task loads. Is not a Failure object
ok 374 - Amazon::AWS::EC2::Types::ExportToS3Task exists
ok 375 - Amazon::AWS::EC2::Types::ExportToS3Task can be populated
ok 376 - Amazon::AWS::EC2::Types::ExportToS3Task serializes ok
ok 377 - Amazon::AWS::EC2::Types::ExportToS3Task deseralizes ok
# containerFormat
# diskImageFormat
# s3Bucket
# s3Key
ok 378 - Amazon::AWS::EC2::Types::ExportToS3Task compares ok
# CHANGE!
# vicselect
# containerFormat, diskImageFormat, s3Bucket, s3Key
# diskImageFormat -- Str
# Setting diskImageFormat to syzygy!RAW
ok 379 - Changed Amazon::AWS::EC2::Types::ExportToS3Task fails eqv
ok 380 - Amazon::AWS::EC2::Types::ExportToS3TaskSpecification loads. Is not a Failure object
ok 381 - Amazon::AWS::EC2::Types::ExportToS3TaskSpecification exists
ok 382 - Amazon::AWS::EC2::Types::ExportToS3TaskSpecification can be populated
ok 383 - Amazon::AWS::EC2::Types::ExportToS3TaskSpecification serializes ok
ok 384 - Amazon::AWS::EC2::Types::ExportToS3TaskSpecification deseralizes ok
# ContainerFormat
# DiskImageFormat
# S3Bucket
# S3Prefix
ok 385 - Amazon::AWS::EC2::Types::ExportToS3TaskSpecification compares ok
# CHANGE!
# vicselect
# ContainerFormat, DiskImageFormat, S3Bucket, S3Prefix
# S3Prefix -- Str
# Setting S3Prefix to syzygy!XpPNqvJ
ok 386 - Changed Amazon::AWS::EC2::Types::ExportToS3TaskSpecification fails eqv
ok 387 - Amazon::AWS::EC2::Types::Filter loads. Is not a Failure object
ok 388 - Amazon::AWS::EC2::Types::Filter exists
ok 389 - Amazon::AWS::EC2::Types::Filter can be populated
ok 390 - Amazon::AWS::EC2::Types::Filter serializes ok
ok 391 - Amazon::AWS::EC2::Types::Filter deseralizes ok
# Name
# Values
tXhUu
tXhUu
rsodBG
rsodBG
YeKWPCPECMUaRLGfNwagGkNWno
YeKWPCPECMUaRLGfNwagGkNWno
WvgNCPprRhmVIAWMVxTJYgnTIjPYb
WvgNCPprRhmVIAWMVxTJYgnTIjPYb
ok 392 - Amazon::AWS::EC2::Types::Filter compares ok
# CHANGE!
# vicselect
# Name, Values
# Name -- Str
# Setting Name to syzygy!hWkPzfVHOWwwHErwJh
ok 393 - Changed Amazon::AWS::EC2::Types::Filter fails eqv
ok 394 - Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecification loads. Is not a Failure object
ok 395 - Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecification exists
ok 396 - Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecification can be populated
ok 397 - Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecification serializes ok
ok 398 - Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecification deseralizes ok
# LaunchTemplateId
# launchTemplateId
# LaunchTemplateName
# launchTemplateName
# Version
# version
ok 399 - Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecification compares ok
# CHANGE!
# vicselect
# LaunchTemplateId, launchTemplateId, LaunchTemplateName, launchTemplateName, Version, version
# LaunchTemplateId -- Str
# Setting LaunchTemplateId to syzygy!IYEYToLAld
ok 400 - Changed Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecification fails eqv
ok 401 - Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecificationRequest loads. Is not a Failure object
ok 402 - Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecificationRequest exists
ok 403 - Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecificationRequest can be populated
ok 404 - Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecificationRequest serializes ok
ok 405 - Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecificationRequest deseralizes ok
# LaunchTemplateId
# LaunchTemplateName
# Version
ok 406 - Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecificationRequest compares ok
# CHANGE!
# vicselect
# LaunchTemplateId, LaunchTemplateName, Version
# LaunchTemplateId -- Str
# Setting LaunchTemplateId to syzygy!nDHgKex
ok 407 - Changed Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecificationRequest fails eqv
ok 408 - Amazon::AWS::EC2::Types::FlowLog loads. Is not a Failure object
ok 409 - Amazon::AWS::EC2::Types::FlowLog exists
ok 410 - Amazon::AWS::EC2::Types::FlowLog can be populated
ok 411 - Amazon::AWS::EC2::Types::FlowLog serializes ok
ok 412 - Amazon::AWS::EC2::Types::FlowLog deseralizes ok
# creationTime
# deliverLogsErrorMessage
# deliverLogsPermissionArn
# deliverLogsStatus
# flowLogId
# flowLogStatus
# logDestination
# logDestinationType
# logGroupName
# resourceId
# trafficType
ok 413 - Amazon::AWS::EC2::Types::FlowLog compares ok
# CHANGE!
# vicselect
# creationTime, deliverLogsErrorMessage, deliverLogsPermissionArn, deliverLogsStatus, flowLogId, flowLogStatus, logDestination, logDestinationType, logGroupName, resourceId, trafficType
# logDestination -- Str
# Setting logDestination to syzygy!wcpjBDEd
ok 414 - Changed Amazon::AWS::EC2::Types::FlowLog fails eqv
ok 415 - Amazon::AWS::EC2::Types::FpgaImageState loads. Is not a Failure object
ok 416 - Amazon::AWS::EC2::Types::FpgaImageState exists
ok 417 - Amazon::AWS::EC2::Types::FpgaImageState can be populated
ok 418 - Amazon::AWS::EC2::Types::FpgaImageState serializes ok
ok 419 - Amazon::AWS::EC2::Types::FpgaImageState deseralizes ok
# code
# message
ok 420 - Amazon::AWS::EC2::Types::FpgaImageState compares ok
# CHANGE!
# vicselect
# code, message
# code -- Str
# Setting code to syzygy!available
ok 421 - Changed Amazon::AWS::EC2::Types::FpgaImageState fails eqv
ok 422 - Amazon::AWS::EC2::Types::GroupIdentifier loads. Is not a Failure object
ok 423 - Amazon::AWS::EC2::Types::GroupIdentifier exists
ok 424 - Amazon::AWS::EC2::Types::GroupIdentifier can be populated
ok 425 - Amazon::AWS::EC2::Types::GroupIdentifier serializes ok
ok 426 - Amazon::AWS::EC2::Types::GroupIdentifier deseralizes ok
# GroupId
# groupId
# GroupName
# groupName
ok 427 - Amazon::AWS::EC2::Types::GroupIdentifier compares ok
# CHANGE!
# vicselect
# GroupId, groupId, GroupName, groupName
# groupId -- Str
# Setting groupId to syzygy!TdWZm
ok 428 - Changed Amazon::AWS::EC2::Types::GroupIdentifier fails eqv
ok 429 - Amazon::AWS::EC2::Types::HibernationOptions loads. Is not a Failure object
ok 430 - Amazon::AWS::EC2::Types::HibernationOptions exists
ok 431 - Amazon::AWS::EC2::Types::HibernationOptions can be populated
ok 432 - Amazon::AWS::EC2::Types::HibernationOptions serializes ok
ok 433 - Amazon::AWS::EC2::Types::HibernationOptions deseralizes ok
# configured
ok 434 - Amazon::AWS::EC2::Types::HibernationOptions compares ok
# CHANGE!
# vicselect
# configured
# configured -- Str
# Setting configured to True
ok 435 - Changed Amazon::AWS::EC2::Types::HibernationOptions fails eqv
ok 436 - Amazon::AWS::EC2::Types::HibernationOptionsRequest loads. Is not a Failure object
ok 437 - Amazon::AWS::EC2::Types::HibernationOptionsRequest exists
ok 438 - Amazon::AWS::EC2::Types::HibernationOptionsRequest can be populated
ok 439 - Amazon::AWS::EC2::Types::HibernationOptionsRequest serializes ok
ok 440 - Amazon::AWS::EC2::Types::HibernationOptionsRequest deseralizes ok
# Configured
ok 441 - Amazon::AWS::EC2::Types::HibernationOptionsRequest compares ok
# CHANGE!
# vicselect
# Configured
# Configured -- Str
# Setting Configured to True
not ok 442 - Changed Amazon::AWS::EC2::Types::HibernationOptionsRequest fails eqv
# Failed test 'Changed Amazon::AWS::EC2::Types::HibernationOptionsRequest fails eqv'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 120
ok 443 - Amazon::AWS::EC2::Types::HistoryRecord loads. Is not a Failure object
ok 444 - Amazon::AWS::EC2::Types::HistoryRecord exists
ok 445 - Amazon::AWS::EC2::Types::HistoryRecord can be populated
ok 446 - Amazon::AWS::EC2::Types::HistoryRecord serializes ok
ok 447 - Amazon::AWS::EC2::Types::HistoryRecord deseralizes ok
# eventInformation
# eventDescription
not ok 448 - Amazon::AWS::EC2::Types::HistoryRecord compares ok
# Failed test 'Amazon::AWS::EC2::Types::HistoryRecord compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 119
# CHANGE!
# vicselect
# eventInformation, eventType, timestamp
# eventType -- Str
# Setting eventType to syzygy!information
ok 449 - Changed Amazon::AWS::EC2::Types::HistoryRecord fails eqv
ok 450 - Amazon::AWS::EC2::Types::HistoryRecordEntry loads. Is not a Failure object
ok 451 - Amazon::AWS::EC2::Types::HistoryRecordEntry exists
ok 452 - Amazon::AWS::EC2::Types::HistoryRecordEntry can be populated
ok 453 - Amazon::AWS::EC2::Types::HistoryRecordEntry serializes ok
ok 454 - Amazon::AWS::EC2::Types::HistoryRecordEntry deseralizes ok
# eventInformation
# eventDescription
not ok 455 - Amazon::AWS::EC2::Types::HistoryRecordEntry compares ok
# Failed test 'Amazon::AWS::EC2::Types::HistoryRecordEntry compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 119
# CHANGE!
# vicselect
# eventInformation, eventType, timestamp
# timestamp -- Str
# Setting timestamp to syzygy!rEtIgDgnMvzH
ok 456 - Changed Amazon::AWS::EC2::Types::HistoryRecordEntry fails eqv
ok 457 - Amazon::AWS::EC2::Types::HostInstance loads. Is not a Failure object
ok 458 - Amazon::AWS::EC2::Types::HostInstance exists
ok 459 - Amazon::AWS::EC2::Types::HostInstance can be populated
ok 460 - Amazon::AWS::EC2::Types::HostInstance serializes ok
ok 461 - Amazon::AWS::EC2::Types::HostInstance deseralizes ok
# instanceId
# instanceType
ok 462 - Amazon::AWS::EC2::Types::HostInstance compares ok
# CHANGE!
# vicselect
# instanceId, instanceType
# instanceId -- Str
# Setting instanceId to syzygy!kXtqzNkI
ok 463 - Changed Amazon::AWS::EC2::Types::HostInstance fails eqv
ok 464 - Amazon::AWS::EC2::Types::HostOffering loads. Is not a Failure object
ok 465 - Amazon::AWS::EC2::Types::HostOffering exists
ok 466 - Amazon::AWS::EC2::Types::HostOffering can be populated
ok 467 - Amazon::AWS::EC2::Types::HostOffering serializes ok
ok 468 - Amazon::AWS::EC2::Types::HostOffering deseralizes ok
# currencyCode
# duration
# hourlyPrice
# instanceFamily
# offeringId
# paymentOption
# upfrontPrice
ok 469 - Amazon::AWS::EC2::Types::HostOffering compares ok
# CHANGE!
# vicselect
# currencyCode, duration, hourlyPrice, instanceFamily, offeringId, paymentOption, upfrontPrice
# offeringId -- Str
# Setting offeringId to syzygy!TOJcxPQ
ok 470 - Changed Amazon::AWS::EC2::Types::HostOffering fails eqv
ok 471 - Amazon::AWS::EC2::Types::HostProperties loads. Is not a Failure object
ok 472 - Amazon::AWS::EC2::Types::HostProperties exists
ok 473 - Amazon::AWS::EC2::Types::HostProperties can be populated
ok 474 - Amazon::AWS::EC2::Types::HostProperties serializes ok
ok 475 - Amazon::AWS::EC2::Types::HostProperties deseralizes ok
# cores
# instanceType
# sockets
# totalVCpus
ok 476 - Amazon::AWS::EC2::Types::HostProperties compares ok
# CHANGE!
# vicselect
# cores, instanceType, sockets, totalVCpus
# totalVCpus -- Str
# Setting totalVCpus to 17
ok 477 - Changed Amazon::AWS::EC2::Types::HostProperties fails eqv
ok 478 - Amazon::AWS::EC2::Types::IamInstanceProfile loads. Is not a Failure object
ok 479 - Amazon::AWS::EC2::Types::IamInstanceProfile exists
ok 480 - Amazon::AWS::EC2::Types::IamInstanceProfile can be populated
ok 481 - Amazon::AWS::EC2::Types::IamInstanceProfile serializes ok
ok 482 - Amazon::AWS::EC2::Types::IamInstanceProfile deseralizes ok
# arn
# id
ok 483 - Amazon::AWS::EC2::Types::IamInstanceProfile compares ok
# CHANGE!
# vicselect
# arn, id
# id -- Str
# Setting id to syzygy!tJNGDkLgHacBgMRozIPcULMSAqt
ok 484 - Changed Amazon::AWS::EC2::Types::IamInstanceProfile fails eqv
ok 485 - Amazon::AWS::EC2::Types::IamInstanceProfileAssociation loads. Is not a Failure object
ok 486 - Amazon::AWS::EC2::Types::IamInstanceProfileAssociation exists
ok 487 - Amazon::AWS::EC2::Types::IamInstanceProfileAssociation can be populated
ok 488 - Amazon::AWS::EC2::Types::IamInstanceProfileAssociation serializes ok
ok 489 - Amazon::AWS::EC2::Types::IamInstanceProfileAssociation deseralizes ok
# associationId
# iamInstanceProfile
# arn
not ok 490 - Amazon::AWS::EC2::Types::IamInstanceProfileAssociation compares ok
# Failed test 'Amazon::AWS::EC2::Types::IamInstanceProfileAssociation compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 119
# CHANGE!
# vicselect
# associationId, iamInstanceProfile, instanceId, state, timestamp
# timestamp -- Str
# Setting timestamp to syzygy!sAwQNpIAdKImZkmkdHKBg
ok 491 - Changed Amazon::AWS::EC2::Types::IamInstanceProfileAssociation fails eqv
ok 492 - Amazon::AWS::EC2::Types::IamInstanceProfileSpecification loads. Is not a Failure object
ok 493 - Amazon::AWS::EC2::Types::IamInstanceProfileSpecification exists
ok 494 - Amazon::AWS::EC2::Types::IamInstanceProfileSpecification can be populated
ok 495 - Amazon::AWS::EC2::Types::IamInstanceProfileSpecification serializes ok
ok 496 - Amazon::AWS::EC2::Types::IamInstanceProfileSpecification deseralizes ok
# Arn
# arn
# Name
# name
ok 497 - Amazon::AWS::EC2::Types::IamInstanceProfileSpecification compares ok
# CHANGE!
# vicselect
# Arn, arn, Name, name
# arn -- Str
# Setting arn to syzygy!exeHSZnc
ok 498 - Changed Amazon::AWS::EC2::Types::IamInstanceProfileSpecification fails eqv
ok 499 - Amazon::AWS::EC2::Types::IcmpTypeCode loads. Is not a Failure object
ok 500 - Amazon::AWS::EC2::Types::IcmpTypeCode exists
ok 501 - Amazon::AWS::EC2::Types::IcmpTypeCode can be populated
ok 502 - Amazon::AWS::EC2::Types::IcmpTypeCode serializes ok
ok 503 - Amazon::AWS::EC2::Types::IcmpTypeCode deseralizes ok
# Code
# code
# Type
# type
ok 504 - Amazon::AWS::EC2::Types::IcmpTypeCode compares ok
# CHANGE!
# vicselect
# Code, code, Type, type
# code -- Str
# Setting code to 21
ok 505 - Changed Amazon::AWS::EC2::Types::IcmpTypeCode fails eqv
ok 506 - Amazon::AWS::EC2::Types::IdFormat loads. Is not a Failure object
ok 507 - Amazon::AWS::EC2::Types::IdFormat exists
ok 508 - Amazon::AWS::EC2::Types::IdFormat can be populated
ok 509 - Amazon::AWS::EC2::Types::IdFormat serializes ok
ok 510 - Amazon::AWS::EC2::Types::IdFormat deseralizes ok
# deadline
# resource
# useLongIds
ok 511 - Amazon::AWS::EC2::Types::IdFormat compares ok
# CHANGE!
# vicselect
# deadline, resource, useLongIds
# resource -- Str
# Setting resource to syzygy!qscyTjvtGjZHFWrGGkWpAxk
ok 512 - Changed Amazon::AWS::EC2::Types::IdFormat fails eqv
ok 513 - Amazon::AWS::EC2::Types::ImportInstanceVolumeDetailItem loads. Is not a Failure object
ok 514 - Amazon::AWS::EC2::Types::ImportInstanceVolumeDetailItem exists
ok 515 - Amazon::AWS::EC2::Types::ImportInstanceVolumeDetailItem can be populated
ok 516 - Amazon::AWS::EC2::Types::ImportInstanceVolumeDetailItem serializes ok
ok 517 - Amazon::AWS::EC2::Types::ImportInstanceVolumeDetailItem deseralizes ok
# availabilityZone
# bytesConverted
# description
# image
# checksum
not ok 518 - Amazon::AWS::EC2::Types::ImportInstanceVolumeDetailItem compares ok
# Failed test 'Amazon::AWS::EC2::Types::ImportInstanceVolumeDetailItem compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 119
# CHANGE!
# vicselect
# availabilityZone, bytesConverted, description, image, status, statusMessage, volume
# statusMessage -- Str
# Setting statusMessage to syzygy!axdustMER
ok 519 - Changed Amazon::AWS::EC2::Types::ImportInstanceVolumeDetailItem fails eqv
ok 520 - Amazon::AWS::EC2::Types::ImportVolumeTaskDetails loads. Is not a Failure object
ok 521 - Amazon::AWS::EC2::Types::ImportVolumeTaskDetails exists
ok 522 - Amazon::AWS::EC2::Types::ImportVolumeTaskDetails can be populated
ok 523 - Amazon::AWS::EC2::Types::ImportVolumeTaskDetails serializes ok
ok 524 - Amazon::AWS::EC2::Types::ImportVolumeTaskDetails deseralizes ok
# availabilityZone
# bytesConverted
# description
# image
# checksum
not ok 525 - Amazon::AWS::EC2::Types::ImportVolumeTaskDetails compares ok
# Failed test 'Amazon::AWS::EC2::Types::ImportVolumeTaskDetails compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 119
# CHANGE!
# vicselect
# availabilityZone, bytesConverted, description, image, volume
# image -- Str
# Setting image to Amazon::AWS::EC2::Types::DiskImageDescription.new(checksum => Str, format => Str, importManifestUrl => Str, size => Int)
ok 526 - Changed Amazon::AWS::EC2::Types::ImportVolumeTaskDetails fails eqv
ok 527 - Amazon::AWS::EC2::Types::InstanceBlockDeviceMapping loads. Is not a Failure object
ok 528 - Amazon::AWS::EC2::Types::InstanceBlockDeviceMapping exists
ok 529 - Amazon::AWS::EC2::Types::InstanceBlockDeviceMapping can be populated
ok 530 - Amazon::AWS::EC2::Types::InstanceBlockDeviceMapping serializes ok
ok 531 - Amazon::AWS::EC2::Types::InstanceBlockDeviceMapping deseralizes ok
# deviceName
# ebs
# attachTime
not ok 532 - Amazon::AWS::EC2::Types::InstanceBlockDeviceMapping compares ok
# Failed test 'Amazon::AWS::EC2::Types::InstanceBlockDeviceMapping compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 119
# CHANGE!
# vicselect
# deviceName, ebs
# ebs -- Str
# Setting ebs to Amazon::AWS::EC2::Types::EbsInstanceBlockDevice.new(attachTime => Str, deleteOnTermination => Bool, status => Str, volumeId => Str)
ok 533 - Changed Amazon::AWS::EC2::Types::InstanceBlockDeviceMapping fails eqv
ok 534 - Amazon::AWS::EC2::Types::InstanceBlockDeviceMappingSpecification loads. Is not a Failure object
ok 535 - Amazon::AWS::EC2::Types::InstanceBlockDeviceMappingSpecification exists
ok 536 - Amazon::AWS::EC2::Types::InstanceBlockDeviceMappingSpecification can be populated
ok 537 - Amazon::AWS::EC2::Types::InstanceBlockDeviceMappingSpecification serializes ok
ok 538 - Amazon::AWS::EC2::Types::InstanceBlockDeviceMappingSpecification deseralizes ok
# DeviceName
# Ebs
# DeleteOnTermination
# VolumeId
not ok 539 - Amazon::AWS::EC2::Types::InstanceBlockDeviceMappingSpecification compares ok
# Failed test 'Amazon::AWS::EC2::Types::InstanceBlockDeviceMappingSpecification compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 119
# CHANGE!
# vicselect
# DeviceName, Ebs, NoDevice, VirtualName
# DeviceName -- Str
# Setting DeviceName to syzygy!gQvjGMBaPPqFWpaNiPwkt
ok 540 - Changed Amazon::AWS::EC2::Types::InstanceBlockDeviceMappingSpecification fails eqv
ok 541 - Amazon::AWS::EC2::Types::InstanceCapacity loads. Is not a Failure object
ok 542 - Amazon::AWS::EC2::Types::InstanceCapacity exists
ok 543 - Amazon::AWS::EC2::Types::InstanceCapacity can be populated
ok 544 - Amazon::AWS::EC2::Types::InstanceCapacity serializes ok
ok 545 - Amazon::AWS::EC2::Types::InstanceCapacity deseralizes ok
# availableCapacity
# instanceType
# totalCapacity
ok 546 - Amazon::AWS::EC2::Types::InstanceCapacity compares ok
# CHANGE!
# vicselect
# availableCapacity, instanceType, totalCapacity
# totalCapacity -- Str
# Setting totalCapacity to 19
ok 547 - Changed Amazon::AWS::EC2::Types::InstanceCapacity fails eqv
ok 548 - Amazon::AWS::EC2::Types::InstanceCount loads. Is not a Failure object
ok 549 - Amazon::AWS::EC2::Types::InstanceCount exists
ok 550 - Amazon::AWS::EC2::Types::InstanceCount can be populated
ok 551 - Amazon::AWS::EC2::Types::InstanceCount serializes ok
ok 552 - Amazon::AWS::EC2::Types::InstanceCount deseralizes ok
# instanceCount
# state
ok 553 - Amazon::AWS::EC2::Types::InstanceCount compares ok
# CHANGE!
# vicselect
# instanceCount, state
# instanceCount -- Str
# Setting instanceCount to 14
ok 554 - Changed Amazon::AWS::EC2::Types::InstanceCount fails eqv
ok 555 - Amazon::AWS::EC2::Types::InstanceCreditSpecification loads. Is not a Failure object
ok 556 - Amazon::AWS::EC2::Types::InstanceCreditSpecification exists
ok 557 - Amazon::AWS::EC2::Types::InstanceCreditSpecification can be populated
ok 558 - Amazon::AWS::EC2::Types::InstanceCreditSpecification serializes ok
ok 559 - Amazon::AWS::EC2::Types::InstanceCreditSpecification deseralizes ok
# cpuCredits
# instanceId
ok 560 - Amazon::AWS::EC2::Types::InstanceCreditSpecification compares ok
# CHANGE!
# vicselect
# cpuCredits, instanceId
# cpuCredits -- Str
# Setting cpuCredits to syzygy!VephKoLgSAWCQnsPmWNytcf
ok 561 - Changed Amazon::AWS::EC2::Types::InstanceCreditSpecification fails eqv
ok 562 - Amazon::AWS::EC2::Types::InstanceCreditSpecificationRequest loads. Is not a Failure object
ok 563 - Amazon::AWS::EC2::Types::InstanceCreditSpecificationRequest exists
ok 564 - Amazon::AWS::EC2::Types::InstanceCreditSpecificationRequest can be populated
ok 565 - Amazon::AWS::EC2::Types::InstanceCreditSpecificationRequest serializes ok
ok 566 - Amazon::AWS::EC2::Types::InstanceCreditSpecificationRequest deseralizes ok
# CpuCredits
# InstanceId
ok 567 - Amazon::AWS::EC2::Types::InstanceCreditSpecificationRequest compares ok
# CHANGE!
# vicselect
# CpuCredits, InstanceId
# CpuCredits -- Str
# Setting CpuCredits to syzygy!NUXROHOhsWmDKbG
ok 568 - Changed Amazon::AWS::EC2::Types::InstanceCreditSpecificationRequest fails eqv
ok 569 - Amazon::AWS::EC2::Types::InstanceExportDetails loads. Is not a Failure object
ok 570 - Amazon::AWS::EC2::Types::InstanceExportDetails exists
ok 571 - Amazon::AWS::EC2::Types::InstanceExportDetails can be populated
ok 572 - Amazon::AWS::EC2::Types::InstanceExportDetails serializes ok
ok 573 - Amazon::AWS::EC2::Types::InstanceExportDetails deseralizes ok
# instanceId
# targetEnvironment
ok 574 - Amazon::AWS::EC2::Types::InstanceExportDetails compares ok
# CHANGE!
# vicselect
# instanceId, targetEnvironment
# instanceId -- Str
# Setting instanceId to syzygy!gpzrYskSaUIyMqvmVmEmI
ok 575 - Changed Amazon::AWS::EC2::Types::InstanceExportDetails fails eqv
ok 576 - Amazon::AWS::EC2::Types::InstanceIpv6Address loads. Is not a Failure object
ok 577 - Amazon::AWS::EC2::Types::InstanceIpv6Address exists
ok 578 - Amazon::AWS::EC2::Types::InstanceIpv6Address can be populated
ok 579 - Amazon::AWS::EC2::Types::InstanceIpv6Address serializes ok
ok 580 - Amazon::AWS::EC2::Types::InstanceIpv6Address deseralizes ok
# Ipv6Address
# ipv6Address
ok 581 - Amazon::AWS::EC2::Types::InstanceIpv6Address compares ok
# CHANGE!
# vicselect
# Ipv6Address, ipv6Address
# ipv6Address -- Str
# Setting ipv6Address to syzygy!RBOuZUEhV
ok 582 - Changed Amazon::AWS::EC2::Types::InstanceIpv6Address fails eqv
ok 583 - Amazon::AWS::EC2::Types::InstanceIpv6AddressRequest loads. Is not a Failure object
ok 584 - Amazon::AWS::EC2::Types::InstanceIpv6AddressRequest exists
ok 585 - Amazon::AWS::EC2::Types::InstanceIpv6AddressRequest can be populated
ok 586 - Amazon::AWS::EC2::Types::InstanceIpv6AddressRequest serializes ok
ok 587 - Amazon::AWS::EC2::Types::InstanceIpv6AddressRequest deseralizes ok
# Ipv6Address
ok 588 - Amazon::AWS::EC2::Types::InstanceIpv6AddressRequest compares ok
# CHANGE!
# vicselect
# Ipv6Address
# Ipv6Address -- Str
# Setting Ipv6Address to syzygy!nZCqYgrKJJajliWIFWgr
ok 589 - Changed Amazon::AWS::EC2::Types::InstanceIpv6AddressRequest fails eqv
ok 590 - Amazon::AWS::EC2::Types::InstanceNetworkInterfaceAssociation loads. Is not a Failure object
ok 591 - Amazon::AWS::EC2::Types::InstanceNetworkInterfaceAssociation exists
ok 592 - Amazon::AWS::EC2::Types::InstanceNetworkInterfaceAssociation can be populated
ok 593 - Amazon::AWS::EC2::Types::InstanceNetworkInterfaceAssociation serializes ok
ok 594 - Amazon::AWS::EC2::Types::InstanceNetworkInterfaceAssociation deseralizes ok
# ipOwnerId
# publicDnsName
# publicIp
ok 595 - Amazon::AWS::EC2::Types::InstanceNetworkInterfaceAssociation compares ok
# CHANGE!
# vicselect
# ipOwnerId, publicDnsName, publicIp
# publicDnsName -- Str
# Setting publicDnsName to syzygy!pCWJoEIUALxCyyeofjemcdk
ok 596 - Changed Amazon::AWS::EC2::Types::InstanceNetworkInterfaceAssociation fails eqv
ok 597 - Amazon::AWS::EC2::Types::InstanceNetworkInterfaceAttachment loads. Is not a Failure object
ok 598 - Amazon::AWS::EC2::Types::InstanceNetworkInterfaceAttachment exists
ok 599 - Amazon::AWS::EC2::Types::InstanceNetworkInterfaceAttachment can be populated
ok 600 - Amazon::AWS::EC2::Types::InstanceNetworkInterfaceAttachment serializes ok
ok 601 - Amazon::AWS::EC2::Types::InstanceNetworkInterfaceAttachment deseralizes ok
# attachmentId
# attachTime
# deleteOnTermination
# deviceIndex
# status
ok 602 - Amazon::AWS::EC2::Types::InstanceNetworkInterfaceAttachment compares ok
# CHANGE!
# vicselect
# attachmentId, attachTime, deleteOnTermination, deviceIndex, status
# deviceIndex -- Str
# Setting deviceIndex to 6
ok 603 - Changed Amazon::AWS::EC2::Types::InstanceNetworkInterfaceAttachment fails eqv
ok 604 - Amazon::AWS::EC2::Types::InstancePrivateIpAddress loads. Is not a Failure object
ok 605 - Amazon::AWS::EC2::Types::InstancePrivateIpAddress exists
ok 606 - Amazon::AWS::EC2::Types::InstancePrivateIpAddress can be populated
ok 607 - Amazon::AWS::EC2::Types::InstancePrivateIpAddress serializes ok
ok 608 - Amazon::AWS::EC2::Types::InstancePrivateIpAddress deseralizes ok
# association
# ipOwnerId
not ok 609 - Amazon::AWS::EC2::Types::InstancePrivateIpAddress compares ok
# Failed test 'Amazon::AWS::EC2::Types::InstancePrivateIpAddress compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 119
# CHANGE!
# vicselect
# association, primary, privateDnsName, privateIpAddress
# privateDnsName -- Str
# Setting privateDnsName to syzygy!jzCFfoCzqBNickWTPjjuNqO
ok 610 - Changed Amazon::AWS::EC2::Types::InstancePrivateIpAddress fails eqv
ok 611 - Amazon::AWS::EC2::Types::InstanceSpecification loads. Is not a Failure object
ok 612 - Amazon::AWS::EC2::Types::InstanceSpecification exists
ok 613 - Amazon::AWS::EC2::Types::InstanceSpecification can be populated
ok 614 - Amazon::AWS::EC2::Types::InstanceSpecification serializes ok
ok 615 - Amazon::AWS::EC2::Types::InstanceSpecification deseralizes ok
# ExcludeBootVolume
# InstanceId
ok 616 - Amazon::AWS::EC2::Types::InstanceSpecification compares ok
# CHANGE!
# vicselect
# ExcludeBootVolume, InstanceId
# ExcludeBootVolume -- Str
# Setting ExcludeBootVolume to True
not ok 617 - Changed Amazon::AWS::EC2::Types::InstanceSpecification fails eqv
# Failed test 'Changed Amazon::AWS::EC2::Types::InstanceSpecification fails eqv'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 120
ok 618 - Amazon::AWS::EC2::Types::InstanceState loads. Is not a Failure object
ok 619 - Amazon::AWS::EC2::Types::InstanceState exists
ok 620 - Amazon::AWS::EC2::Types::InstanceState can be populated
ok 621 - Amazon::AWS::EC2::Types::InstanceState serializes ok
ok 622 - Amazon::AWS::EC2::Types::InstanceState deseralizes ok
# code
# name
ok 623 - Amazon::AWS::EC2::Types::InstanceState compares ok
# CHANGE!
# vicselect
# code, name
# code -- Str
# Setting code to 31
ok 624 - Changed Amazon::AWS::EC2::Types::InstanceState fails eqv
ok 625 - Amazon::AWS::EC2::Types::InstanceStateChange loads. Is not a Failure object
ok 626 - Amazon::AWS::EC2::Types::InstanceStateChange exists
ok 627 - Amazon::AWS::EC2::Types::InstanceStateChange can be populated
ok 628 - Amazon::AWS::EC2::Types::InstanceStateChange serializes ok
ok 629 - Amazon::AWS::EC2::Types::InstanceStateChange deseralizes ok
# currentState
# code
not ok 630 - Amazon::AWS::EC2::Types::InstanceStateChange compares ok
# Failed test 'Amazon::AWS::EC2::Types::InstanceStateChange compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 119
# CHANGE!
# vicselect
# currentState, instanceId, previousState
# currentState -- Str
# Setting currentState to Amazon::AWS::EC2::Types::InstanceState.new(code => Int, name => Str)
ok 631 - Changed Amazon::AWS::EC2::Types::InstanceStateChange fails eqv
ok 632 - Amazon::AWS::EC2::Types::InstanceStatusDetails loads. Is not a Failure object
ok 633 - Amazon::AWS::EC2::Types::InstanceStatusDetails exists
ok 634 - Amazon::AWS::EC2::Types::InstanceStatusDetails can be populated
ok 635 - Amazon::AWS::EC2::Types::InstanceStatusDetails serializes ok
ok 636 - Amazon::AWS::EC2::Types::InstanceStatusDetails deseralizes ok
# impairedSince
# name
# status
ok 637 - Amazon::AWS::EC2::Types::InstanceStatusDetails compares ok
# CHANGE!
# vicselect
# impairedSince, name, status
# status -- Str
# Setting status to syzygy!insufficient
ok 638 - Changed Amazon::AWS::EC2::Types::InstanceStatusDetails fails eqv
ok 639 - Amazon::AWS::EC2::Types::InstanceStatusEvent loads. Is not a Failure object
ok 640 - Amazon::AWS::EC2::Types::InstanceStatusEvent exists
ok 641 - Amazon::AWS::EC2::Types::InstanceStatusEvent can be populated
ok 642 - Amazon::AWS::EC2::Types::InstanceStatusEvent serializes ok
ok 643 - Amazon::AWS::EC2::Types::InstanceStatusEvent deseralizes ok
# code
# description
# instanceEventId
# notAfter
# notBefore
# notBeforeDeadline
ok 644 - Amazon::AWS::EC2::Types::InstanceStatusEvent compares ok
# CHANGE!
# vicselect
# code, description, instanceEventId, notAfter, notBefore, notBeforeDeadline
# instanceEventId -- Str
# Setting instanceEventId to syzygy!kTIgmdFWCBYtuZAMlbflSQvI
ok 645 - Changed Amazon::AWS::EC2::Types::InstanceStatusEvent fails eqv
ok 646 - Amazon::AWS::EC2::Types::InstanceStatusSummary loads. Is not a Failure object
ok 647 - Amazon::AWS::EC2::Types::InstanceStatusSummary exists
ok 648 - Amazon::AWS::EC2::Types::InstanceStatusSummary can be populated
ok 649 - Amazon::AWS::EC2::Types::InstanceStatusSummary serializes ok
ok 650 - Amazon::AWS::EC2::Types::InstanceStatusSummary deseralizes ok
# details
Amazon::AWS::EC2::Types::InstanceStatusDetails.new(impairedSince => "lDhzJrzdijJ", name => "reachability", status => "passed")
Amazon::AWS::EC2::Types::InstanceStatusDetails.new(impairedSince => "lDhzJrzdijJ", name => "reachability", status => "passed")
# impairedSince
# name
# status
# status
ok 651 - Amazon::AWS::EC2::Types::InstanceStatusSummary compares ok
# CHANGE!
# vicselect
# details, status
# status -- Str
# Setting status to syzygy!ok
ok 652 - Changed Amazon::AWS::EC2::Types::InstanceStatusSummary fails eqv
ok 653 - Amazon::AWS::EC2::Types::InternetGatewayAttachment loads. Is not a Failure object
ok 654 - Amazon::AWS::EC2::Types::InternetGatewayAttachment exists
ok 655 - Amazon::AWS::EC2::Types::InternetGatewayAttachment can be populated
ok 656 - Amazon::AWS::EC2::Types::InternetGatewayAttachment serializes ok
ok 657 - Amazon::AWS::EC2::Types::InternetGatewayAttachment deseralizes ok
# state
# vpcId
ok 658 - Amazon::AWS::EC2::Types::InternetGatewayAttachment compares ok
# CHANGE!
# vicselect
# state, vpcId
# vpcId -- Str
# Setting vpcId to syzygy!aTnmvY
ok 659 - Changed Amazon::AWS::EC2::Types::InternetGatewayAttachment fails eqv
ok 660 - Amazon::AWS::EC2::Types::IpRange loads. Is not a Failure object
ok 661 - Amazon::AWS::EC2::Types::IpRange exists
ok 662 - Amazon::AWS::EC2::Types::IpRange can be populated
ok 663 - Amazon::AWS::EC2::Types::IpRange serializes ok
ok 664 - Amazon::AWS::EC2::Types::IpRange deseralizes ok
# CidrIp
# cidrIp
# Description
# description
ok 665 - Amazon::AWS::EC2::Types::IpRange compares ok
# CHANGE!
# vicselect
# CidrIp, cidrIp, Description, description
# Description -- Str
# Setting Description to syzygy!CSjrMubszgtuHaLsIzgAmoiHRM
ok 666 - Changed Amazon::AWS::EC2::Types::IpRange fails eqv
ok 667 - Amazon::AWS::EC2::Types::Ipv6CidrBlock loads. Is not a Failure object
ok 668 - Amazon::AWS::EC2::Types::Ipv6CidrBlock exists
ok 669 - Amazon::AWS::EC2::Types::Ipv6CidrBlock can be populated
ok 670 - Amazon::AWS::EC2::Types::Ipv6CidrBlock serializes ok
ok 671 - Amazon::AWS::EC2::Types::Ipv6CidrBlock deseralizes ok
# ipv6CidrBlock
ok 672 - Amazon::AWS::EC2::Types::Ipv6CidrBlock compares ok
# CHANGE!
# vicselect
# ipv6CidrBlock
# ipv6CidrBlock -- Str
# Setting ipv6CidrBlock to syzygy!EtemNKuOMX
ok 673 - Changed Amazon::AWS::EC2::Types::Ipv6CidrBlock fails eqv
ok 674 - Amazon::AWS::EC2::Types::Ipv6Range loads. Is not a Failure object
ok 675 - Amazon::AWS::EC2::Types::Ipv6Range exists
ok 676 - Amazon::AWS::EC2::Types::Ipv6Range can be populated
ok 677 - Amazon::AWS::EC2::Types::Ipv6Range serializes ok
ok 678 - Amazon::AWS::EC2::Types::Ipv6Range deseralizes ok
# CidrIpv6
# cidrIpv6
# Description
# description
ok 679 - Amazon::AWS::EC2::Types::Ipv6Range compares ok
# CHANGE!
# vicselect
# CidrIpv6, cidrIpv6, Description, description
# CidrIpv6 -- Str
# Setting CidrIpv6 to syzygy!MJLCChikogHezzRHZ
ok 680 - Changed Amazon::AWS::EC2::Types::Ipv6Range fails eqv
ok 681 - Amazon::AWS::EC2::Types::KeyPairInfo loads. Is not a Failure object
ok 682 - Amazon::AWS::EC2::Types::KeyPairInfo exists
ok 683 - Amazon::AWS::EC2::Types::KeyPairInfo can be populated
ok 684 - Amazon::AWS::EC2::Types::KeyPairInfo serializes ok
ok 685 - Amazon::AWS::EC2::Types::KeyPairInfo deseralizes ok
# keyFingerprint
# keyName
ok 686 - Amazon::AWS::EC2::Types::KeyPairInfo compares ok
# CHANGE!
# vicselect
# keyFingerprint, keyName
# keyFingerprint -- Str
# Setting keyFingerprint to syzygy!exFRkVfC
ok 687 - Changed Amazon::AWS::EC2::Types::KeyPairInfo fails eqv
ok 688 - Amazon::AWS::EC2::Types::LaunchPermission loads. Is not a Failure object
ok 689 - Amazon::AWS::EC2::Types::LaunchPermission exists
ok 690 - Amazon::AWS::EC2::Types::LaunchPermission can be populated
ok 691 - Amazon::AWS::EC2::Types::LaunchPermission serializes ok
ok 692 - Amazon::AWS::EC2::Types::LaunchPermission deseralizes ok
# Group
# group
# UserId
# userId
ok 693 - Amazon::AWS::EC2::Types::LaunchPermission compares ok
# CHANGE!
# vicselect
# Group, group, UserId, userId
# Group -- Str
# Setting Group to syzygy!all
ok 694 - Changed Amazon::AWS::EC2::Types::LaunchPermission fails eqv
ok 695 - Amazon::AWS::EC2::Types::LaunchPermissionModifications loads. Is not a Failure object
ok 696 - Amazon::AWS::EC2::Types::LaunchPermissionModifications exists
ok 697 - Amazon::AWS::EC2::Types::LaunchPermissionModifications can be populated
ok 698 - Amazon::AWS::EC2::Types::LaunchPermissionModifications serializes ok
ok 699 - Amazon::AWS::EC2::Types::LaunchPermissionModifications deseralizes ok
# Add
Amazon::AWS::EC2::Types::LaunchPermission.new(Group => "all", group => "all", UserId => "fyFXcBrwVHBwtXWmsXiBQz", userId => "clRwlJIbDjBplnroAaKpzs")
Amazon::AWS::EC2::Types::LaunchPermission.new(Group => "all", group => "all", UserId => "fyFXcBrwVHBwtXWmsXiBQz", userId => "clRwlJIbDjBplnroAaKpzs")
# Group
# group
# UserId
# userId
Amazon::AWS::EC2::Types::LaunchPermission.new(Group => "all", group => "all", UserId => "DzqEOowJCBUZGI", userId => "dqLRHUCvU")
Amazon::AWS::EC2::Types::LaunchPermission.new(Group => "all", group => "all", UserId => "DzqEOowJCBUZGI", userId => "dqLRHUCvU")
# Group
# group
# UserId
# userId
Amazon::AWS::EC2::Types::LaunchPermission.new(Group => "all", group => "all", UserId => "yHPqWQesJuiZkMnWYqUEVFClyOv", userId => "LpIvbtkcUYLbHCKbncrfSSOndexcS")
Amazon::AWS::EC2::Types::LaunchPermission.new(Group => "all", group => "all", UserId => "yHPqWQesJuiZkMnWYqUEVFClyOv", userId => "LpIvbtkcUYLbHCKbncrfSSOndexcS")
# Group
# group
# UserId
# userId
Amazon::AWS::EC2::Types::LaunchPermission.new(Group => "all", group => "all", UserId => "KDpKTXZbojAOdgOTv", userId => "yWnqnZePpIJbLlAwwVEABoL")
Amazon::AWS::EC2::Types::LaunchPermission.new(Group => "all", group => "all", UserId => "KDpKTXZbojAOdgOTv", userId => "yWnqnZePpIJbLlAwwVEABoL")
# Group
# group
# UserId
# userId
# Remove
Amazon::AWS::EC2::Types::LaunchPermission.new(Group => "all", group => "all", UserId => "cWURelLSyXDUeHCJhB", userId => "pwXmLGSmMZTtAGxuz")
Amazon::AWS::EC2::Types::LaunchPermission.new(Group => "all", group => "all", UserId => "cWURelLSyXDUeHCJhB", userId => "pwXmLGSmMZTtAGxuz")
# Group
# group
# UserId
# userId
Amazon::AWS::EC2::Types::LaunchPermission.new(Group => "all", group => "all", UserId => "zzEwBaeDdwdWqkUfDUvqpIGjw", userId => "fjlMsUNtYClkAQoAXJZuQEfcEH")
Amazon::AWS::EC2::Types::LaunchPermission.new(Group => "all", group => "all", UserId => "zzEwBaeDdwdWqkUfDUvqpIGjw", userId => "fjlMsUNtYClkAQoAXJZuQEfcEH")
# Group
# group
# UserId
# userId
ok 700 - Amazon::AWS::EC2::Types::LaunchPermissionModifications compares ok
# CHANGE!
# vicselect
# Add, Remove
# Add -- Str
# Setting Add to []
# Type check failed in assignment to @!Add; expected Amazon::AWS::EC2::Types::LaunchPermission but got Array[Amazon::AWS::EC2::Types::LaunchPermission] (Array[Amazon::AWS::EC2::Types::LaunchPermission].new())
ok 701 - Amazon::AWS::EC2::Types::LaunchTemplateCapacityReservationSpecificationRequest loads. Is not a Failure object
ok 702 - Amazon::AWS::EC2::Types::LaunchTemplateCapacityReservationSpecificationRequest exists
ok 703 - Amazon::AWS::EC2::Types::LaunchTemplateCapacityReservationSpecificationRequest can be populated
ok 704 - Amazon::AWS::EC2::Types::LaunchTemplateCapacityReservationSpecificationRequest serializes ok
ok 705 - Amazon::AWS::EC2::Types::LaunchTemplateCapacityReservationSpecificationRequest deseralizes ok
# CapacityReservationPreference
# CapacityReservationTarget
# CapacityReservationId
not ok 706 - Amazon::AWS::EC2::Types::LaunchTemplateCapacityReservationSpecificationRequest compares ok
# Failed test 'Amazon::AWS::EC2::Types::LaunchTemplateCapacityReservationSpecificationRequest compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 119
# CHANGE!
# vicselect
# CapacityReservationPreference, CapacityReservationTarget
# CapacityReservationPreference -- Str
# Setting CapacityReservationPreference to syzygy!none
ok 707 - Changed Amazon::AWS::EC2::Types::LaunchTemplateCapacityReservationSpecificationRequest fails eqv
ok 708 - Amazon::AWS::EC2::Types::LaunchTemplateCapacityReservationSpecificationResponse loads. Is not a Failure object
ok 709 - Amazon::AWS::EC2::Types::LaunchTemplateCapacityReservationSpecificationResponse exists
ok 710 - Amazon::AWS::EC2::Types::LaunchTemplateCapacityReservationSpecificationResponse can be populated
ok 711 - Amazon::AWS::EC2::Types::LaunchTemplateCapacityReservationSpecificationResponse serializes ok
ok 712 - Amazon::AWS::EC2::Types::LaunchTemplateCapacityReservationSpecificationResponse deseralizes ok
# capacityReservationPreference
# capacityReservationTarget
# capacityReservationId
not ok 713 - Amazon::AWS::EC2::Types::LaunchTemplateCapacityReservationSpecificationResponse compares ok
# Failed test 'Amazon::AWS::EC2::Types::LaunchTemplateCapacityReservationSpecificationResponse compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 119
# CHANGE!
# vicselect
# capacityReservationPreference, capacityReservationTarget
# capacityReservationTarget -- Str
# Setting capacityReservationTarget to Amazon::AWS::EC2::Types::CapacityReservationTargetResponse.new(capacityReservationId => Str)
ok 714 - Changed Amazon::AWS::EC2::Types::LaunchTemplateCapacityReservationSpecificationResponse fails eqv
ok 715 - Amazon::AWS::EC2::Types::LaunchTemplateCpuOptions loads. Is not a Failure object
ok 716 - Amazon::AWS::EC2::Types::LaunchTemplateCpuOptions exists
ok 717 - Amazon::AWS::EC2::Types::LaunchTemplateCpuOptions can be populated
ok 718 - Amazon::AWS::EC2::Types::LaunchTemplateCpuOptions serializes ok
ok 719 - Amazon::AWS::EC2::Types::LaunchTemplateCpuOptions deseralizes ok
# coreCount
# threadsPerCore
ok 720 - Amazon::AWS::EC2::Types::LaunchTemplateCpuOptions compares ok
# CHANGE!
# vicselect
# coreCount, threadsPerCore
# coreCount -- Str
# Setting coreCount to 29
ok 721 - Changed Amazon::AWS::EC2::Types::LaunchTemplateCpuOptions fails eqv
ok 722 - Amazon::AWS::EC2::Types::LaunchTemplateCpuOptionsRequest loads. Is not a Failure object
ok 723 - Amazon::AWS::EC2::Types::LaunchTemplateCpuOptionsRequest exists
ok 724 - Amazon::AWS::EC2::Types::LaunchTemplateCpuOptionsRequest can be populated
ok 725 - Amazon::AWS::EC2::Types::LaunchTemplateCpuOptionsRequest serializes ok
ok 726 - Amazon::AWS::EC2::Types::LaunchTemplateCpuOptionsRequest deseralizes ok
# CoreCount
# ThreadsPerCore
ok 727 - Amazon::AWS::EC2::Types::LaunchTemplateCpuOptionsRequest compares ok
# CHANGE!
# vicselect
# CoreCount, ThreadsPerCore
# CoreCount -- Str
# Setting CoreCount to 29
ok 728 - Changed Amazon::AWS::EC2::Types::LaunchTemplateCpuOptionsRequest fails eqv
ok 729 - Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDevice loads. Is not a Failure object
ok 730 - Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDevice exists
ok 731 - Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDevice can be populated
ok 732 - Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDevice serializes ok
ok 733 - Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDevice deseralizes ok
# deleteOnTermination
# encrypted
# iops
# kmsKeyId
# snapshotId
# volumeSize
# volumeType
ok 734 - Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDevice compares ok
# CHANGE!
# vicselect
# deleteOnTermination, encrypted, iops, kmsKeyId, snapshotId, volumeSize, volumeType
# volumeType -- Str
# Setting volumeType to syzygy!standard
ok 735 - Changed Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDevice fails eqv
ok 736 - Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDeviceRequest loads. Is not a Failure object
ok 737 - Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDeviceRequest exists
ok 738 - Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDeviceRequest can be populated
ok 739 - Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDeviceRequest serializes ok
ok 740 - Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDeviceRequest deseralizes ok
# DeleteOnTermination
# Encrypted
# Iops
# KmsKeyId
# SnapshotId
# VolumeSize
# VolumeType
ok 741 - Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDeviceRequest compares ok
# CHANGE!
# vicselect
# DeleteOnTermination, Encrypted, Iops, KmsKeyId, SnapshotId, VolumeSize, VolumeType
# KmsKeyId -- Str
# Setting KmsKeyId to syzygy!ojYKQUIHLvRGRMzsFtYlTTJSz
ok 742 - Changed Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDeviceRequest fails eqv
ok 743 - Amazon::AWS::EC2::Types::LaunchTemplateElasticInferenceAccelerator loads. Is not a Failure object
ok 744 - Amazon::AWS::EC2::Types::LaunchTemplateElasticInferenceAccelerator exists
ok 745 - Amazon::AWS::EC2::Types::LaunchTemplateElasticInferenceAccelerator can be populated
ok 746 - Amazon::AWS::EC2::Types::LaunchTemplateElasticInferenceAccelerator serializes ok
ok 747 - Amazon::AWS::EC2::Types::LaunchTemplateElasticInferenceAccelerator deseralizes ok
# Type
ok 748 - Amazon::AWS::EC2::Types::LaunchTemplateElasticInferenceAccelerator compares ok
# CHANGE!
# vicselect
# Type
# Type -- Str
# Setting Type to syzygy!CUfvMzXMHJnssgegihOdT
ok 749 - Changed Amazon::AWS::EC2::Types::LaunchTemplateElasticInferenceAccelerator fails eqv
ok 750 - Amazon::AWS::EC2::Types::LaunchTemplateElasticInferenceAcceleratorResponse loads. Is not a Failure object
ok 751 - Amazon::AWS::EC2::Types::LaunchTemplateElasticInferenceAcceleratorResponse exists
ok 752 - Amazon::AWS::EC2::Types::LaunchTemplateElasticInferenceAcceleratorResponse can be populated
ok 753 - Amazon::AWS::EC2::Types::LaunchTemplateElasticInferenceAcceleratorResponse serializes ok
ok 754 - Amazon::AWS::EC2::Types::LaunchTemplateElasticInferenceAcceleratorResponse deseralizes ok
# type
ok 755 - Amazon::AWS::EC2::Types::LaunchTemplateElasticInferenceAcceleratorResponse compares ok
# CHANGE!
# vicselect
# type
# type -- Str
# Setting type to syzygy!pXhgnIUBziBNakQWeyqq
ok 756 - Changed Amazon::AWS::EC2::Types::LaunchTemplateElasticInferenceAcceleratorResponse fails eqv
ok 757 - Amazon::AWS::EC2::Types::LaunchTemplateHibernationOptions loads. Is not a Failure object
ok 758 - Amazon::AWS::EC2::Types::LaunchTemplateHibernationOptions exists
ok 759 - Amazon::AWS::EC2::Types::LaunchTemplateHibernationOptions can be populated
ok 760 - Amazon::AWS::EC2::Types::LaunchTemplateHibernationOptions serializes ok
ok 761 - Amazon::AWS::EC2::Types::LaunchTemplateHibernationOptions deseralizes ok
# configured
ok 762 - Amazon::AWS::EC2::Types::LaunchTemplateHibernationOptions compares ok
# CHANGE!
# vicselect
# configured
# configured -- Str
# Setting configured to True
ok 763 - Changed Amazon::AWS::EC2::Types::LaunchTemplateHibernationOptions fails eqv
ok 764 - Amazon::AWS::EC2::Types::LaunchTemplateHibernationOptionsRequest loads. Is not a Failure object
ok 765 - Amazon::AWS::EC2::Types::LaunchTemplateHibernationOptionsRequest exists
ok 766 - Amazon::AWS::EC2::Types::LaunchTemplateHibernationOptionsRequest can be populated
ok 767 - Amazon::AWS::EC2::Types::LaunchTemplateHibernationOptionsRequest serializes ok
ok 768 - Amazon::AWS::EC2::Types::LaunchTemplateHibernationOptionsRequest deseralizes ok
# Configured
ok 769 - Amazon::AWS::EC2::Types::LaunchTemplateHibernationOptionsRequest compares ok
# CHANGE!
# vicselect
# Configured
# Configured -- Str
# Setting Configured to True
not ok 770 - Changed Amazon::AWS::EC2::Types::LaunchTemplateHibernationOptionsRequest fails eqv
# Failed test 'Changed Amazon::AWS::EC2::Types::LaunchTemplateHibernationOptionsRequest fails eqv'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 120
ok 771 - Amazon::AWS::EC2::Types::LaunchTemplateIamInstanceProfileSpecification loads. Is not a Failure object
ok 772 - Amazon::AWS::EC2::Types::LaunchTemplateIamInstanceProfileSpecification exists
ok 773 - Amazon::AWS::EC2::Types::LaunchTemplateIamInstanceProfileSpecification can be populated
ok 774 - Amazon::AWS::EC2::Types::LaunchTemplateIamInstanceProfileSpecification serializes ok
ok 775 - Amazon::AWS::EC2::Types::LaunchTemplateIamInstanceProfileSpecification deseralizes ok
# arn
# name
ok 776 - Amazon::AWS::EC2::Types::LaunchTemplateIamInstanceProfileSpecification compares ok
# CHANGE!
# vicselect
# arn, name
# name -- Str
# Setting name to syzygy!CiuFiJnzzAyYnRnvoIzObtZIQaEK
ok 777 - Changed Amazon::AWS::EC2::Types::LaunchTemplateIamInstanceProfileSpecification fails eqv
ok 778 - Amazon::AWS::EC2::Types::LaunchTemplateIamInstanceProfileSpecificationRequest loads. Is not a Failure object
ok 779 - Amazon::AWS::EC2::Types::LaunchTemplateIamInstanceProfileSpecificationRequest exists
ok 780 - Amazon::AWS::EC2::Types::LaunchTemplateIamInstanceProfileSpecificationRequest can be populated
ok 781 - Amazon::AWS::EC2::Types::LaunchTemplateIamInstanceProfileSpecificationRequest serializes ok
ok 782 - Amazon::AWS::EC2::Types::LaunchTemplateIamInstanceProfileSpecificationRequest deseralizes ok
# Arn
# Name
ok 783 - Amazon::AWS::EC2::Types::LaunchTemplateIamInstanceProfileSpecificationRequest compares ok
# CHANGE!
# vicselect
# Arn, Name
# Name -- Str
# Setting Name to syzygy!YnIOZmLwwMbHq
ok 784 - Changed Amazon::AWS::EC2::Types::LaunchTemplateIamInstanceProfileSpecificationRequest fails eqv
ok 785 - Amazon::AWS::EC2::Types::LaunchTemplateLicenseConfiguration loads. Is not a Failure object
ok 786 - Amazon::AWS::EC2::Types::LaunchTemplateLicenseConfiguration exists
ok 787 - Amazon::AWS::EC2::Types::LaunchTemplateLicenseConfiguration can be populated
ok 788 - Amazon::AWS::EC2::Types::LaunchTemplateLicenseConfiguration serializes ok
ok 789 - Amazon::AWS::EC2::Types::LaunchTemplateLicenseConfiguration deseralizes ok
# licenseConfigurationArn
ok 790 - Amazon::AWS::EC2::Types::LaunchTemplateLicenseConfiguration compares ok
# CHANGE!
# vicselect
# licenseConfigurationArn
# licenseConfigurationArn -- Str
# Setting licenseConfigurationArn to syzygy!JQgKqWnxMczOwnk
ok 791 - Changed Amazon::AWS::EC2::Types::LaunchTemplateLicenseConfiguration fails eqv
ok 792 - Amazon::AWS::EC2::Types::LaunchTemplateLicenseConfigurationRequest loads. Is not a Failure object
ok 793 - Amazon::AWS::EC2::Types::LaunchTemplateLicenseConfigurationRequest exists
ok 794 - Amazon::AWS::EC2::Types::LaunchTemplateLicenseConfigurationRequest can be populated
ok 795 - Amazon::AWS::EC2::Types::LaunchTemplateLicenseConfigurationRequest serializes ok
ok 796 - Amazon::AWS::EC2::Types::LaunchTemplateLicenseConfigurationRequest deseralizes ok
# LicenseConfigurationArn
ok 797 - Amazon::AWS::EC2::Types::LaunchTemplateLicenseConfigurationRequest compares ok
# CHANGE!
# vicselect
# LicenseConfigurationArn
# LicenseConfigurationArn -- Str
# Setting LicenseConfigurationArn to syzygy!htUnUl
ok 798 - Changed Amazon::AWS::EC2::Types::LaunchTemplateLicenseConfigurationRequest fails eqv
ok 799 - Amazon::AWS::EC2::Types::LaunchTemplateOverrides loads. Is not a Failure object
ok 800 - Amazon::AWS::EC2::Types::LaunchTemplateOverrides exists
ok 801 - Amazon::AWS::EC2::Types::LaunchTemplateOverrides can be populated
ok 802 - Amazon::AWS::EC2::Types::LaunchTemplateOverrides serializes ok
ok 803 - Amazon::AWS::EC2::Types::LaunchTemplateOverrides deseralizes ok
# AvailabilityZone
# availabilityZone
# InstanceType
# instanceType
# Priority
# priority
# SpotPrice
# spotPrice
# SubnetId
# subnetId
# WeightedCapacity
# weightedCapacity
ok 804 - Amazon::AWS::EC2::Types::LaunchTemplateOverrides compares ok
# CHANGE!
# vicselect
# AvailabilityZone, availabilityZone, InstanceType, instanceType, Priority, priority, SpotPrice, spotPrice, SubnetId, subnetId, WeightedCapacity, weightedCapacity
# availabilityZone -- Str
# Setting availabilityZone to syzygy!uUvXaUVoMgKpXizMZD
ok 805 - Changed Amazon::AWS::EC2::Types::LaunchTemplateOverrides fails eqv
ok 806 - Amazon::AWS::EC2::Types::LaunchTemplatePlacement loads. Is not a Failure object
ok 807 - Amazon::AWS::EC2::Types::LaunchTemplatePlacement exists
ok 808 - Amazon::AWS::EC2::Types::LaunchTemplatePlacement can be populated
ok 809 - Amazon::AWS::EC2::Types::LaunchTemplatePlacement serializes ok
ok 810 - Amazon::AWS::EC2::Types::LaunchTemplatePlacement deseralizes ok
# affinity
# availabilityZone
# groupName
# hostId
# spreadDomain
# tenancy
ok 811 - Amazon::AWS::EC2::Types::LaunchTemplatePlacement compares ok
# CHANGE!
# vicselect
# affinity, availabilityZone, groupName, hostId, spreadDomain, tenancy
# tenancy -- Str
# Setting tenancy to syzygy!default
ok 812 - Changed Amazon::AWS::EC2::Types::LaunchTemplatePlacement fails eqv
ok 813 - Amazon::AWS::EC2::Types::LaunchTemplatePlacementRequest loads. Is not a Failure object
ok 814 - Amazon::AWS::EC2::Types::LaunchTemplatePlacementRequest exists
ok 815 - Amazon::AWS::EC2::Types::LaunchTemplatePlacementRequest can be populated
ok 816 - Amazon::AWS::EC2::Types::LaunchTemplatePlacementRequest serializes ok
ok 817 - Amazon::AWS::EC2::Types::LaunchTemplatePlacementRequest deseralizes ok
# Affinity
# AvailabilityZone
# GroupName
# HostId
# SpreadDomain
# Tenancy
ok 818 - Amazon::AWS::EC2::Types::LaunchTemplatePlacementRequest compares ok
# CHANGE!
# vicselect
# Affinity, AvailabilityZone, GroupName, HostId, SpreadDomain, Tenancy
# AvailabilityZone -- Str
# Setting AvailabilityZone to syzygy!AmxHY
ok 819 - Changed Amazon::AWS::EC2::Types::LaunchTemplatePlacementRequest fails eqv
ok 820 - Amazon::AWS::EC2::Types::LaunchTemplateSpecification loads. Is not a Failure object
ok 821 - Amazon::AWS::EC2::Types::LaunchTemplateSpecification exists
ok 822 - Amazon::AWS::EC2::Types::LaunchTemplateSpecification can be populated
ok 823 - Amazon::AWS::EC2::Types::LaunchTemplateSpecification serializes ok
ok 824 - Amazon::AWS::EC2::Types::LaunchTemplateSpecification deseralizes ok
# LaunchTemplateId
# LaunchTemplateName
# Version
ok 825 - Amazon::AWS::EC2::Types::LaunchTemplateSpecification compares ok
# CHANGE!
# vicselect
# LaunchTemplateId, LaunchTemplateName, Version
# Version -- Str
# Setting Version to syzygy!POVJT
ok 826 - Changed Amazon::AWS::EC2::Types::LaunchTemplateSpecification fails eqv
ok 827 - Amazon::AWS::EC2::Types::LaunchTemplateSpotMarketOptions loads. Is not a Failure object
ok 828 - Amazon::AWS::EC2::Types::LaunchTemplateSpotMarketOptions exists
ok 829 - Amazon::AWS::EC2::Types::LaunchTemplateSpotMarketOptions can be populated
ok 830 - Amazon::AWS::EC2::Types::LaunchTemplateSpotMarketOptions serializes ok
ok 831 - Amazon::AWS::EC2::Types::LaunchTemplateSpotMarketOptions deseralizes ok
# blockDurationMinutes
# instanceInterruptionBehavior
# maxPrice
# spotInstanceType
# validUntil
ok 832 - Amazon::AWS::EC2::Types::LaunchTemplateSpotMarketOptions compares ok
# CHANGE!
# vicselect
# blockDurationMinutes, instanceInterruptionBehavior, maxPrice, spotInstanceType, validUntil
# validUntil -- Str
# Setting validUntil to syzygy!KCedsgGMXriZtrpwz
ok 833 - Changed Amazon::AWS::EC2::Types::LaunchTemplateSpotMarketOptions fails eqv
ok 834 - Amazon::AWS::EC2::Types::LaunchTemplateSpotMarketOptionsRequest loads. Is not a Failure object
ok 835 - Amazon::AWS::EC2::Types::LaunchTemplateSpotMarketOptionsRequest exists
ok 836 - Amazon::AWS::EC2::Types::LaunchTemplateSpotMarketOptionsRequest can be populated
ok 837 - Amazon::AWS::EC2::Types::LaunchTemplateSpotMarketOptionsRequest serializes ok
ok 838 - Amazon::AWS::EC2::Types::LaunchTemplateSpotMarketOptionsRequest deseralizes ok
# BlockDurationMinutes
# InstanceInterruptionBehavior
# MaxPrice
# SpotInstanceType
# ValidUntil
ok 839 - Amazon::AWS::EC2::Types::LaunchTemplateSpotMarketOptionsRequest compares ok
# CHANGE!
# vicselect
# BlockDurationMinutes, InstanceInterruptionBehavior, MaxPrice, SpotInstanceType, ValidUntil
# MaxPrice -- Str
# Setting MaxPrice to syzygy!NCDFERibfOMIdeEeObvsEjY
ok 840 - Changed Amazon::AWS::EC2::Types::LaunchTemplateSpotMarketOptionsRequest fails eqv
ok 841 - Amazon::AWS::EC2::Types::LaunchTemplatesMonitoring loads. Is not a Failure object
ok 842 - Amazon::AWS::EC2::Types::LaunchTemplatesMonitoring exists
ok 843 - Amazon::AWS::EC2::Types::LaunchTemplatesMonitoring can be populated
ok 844 - Amazon::AWS::EC2::Types::LaunchTemplatesMonitoring serializes ok
ok 845 - Amazon::AWS::EC2::Types::LaunchTemplatesMonitoring deseralizes ok
# enabled
ok 846 - Amazon::AWS::EC2::Types::LaunchTemplatesMonitoring compares ok
# CHANGE!
# vicselect
# enabled
# enabled -- Str
# Setting enabled to True
ok 847 - Changed Amazon::AWS::EC2::Types::LaunchTemplatesMonitoring fails eqv
ok 848 - Amazon::AWS::EC2::Types::LaunchTemplatesMonitoringRequest loads. Is not a Failure object
ok 849 - Amazon::AWS::EC2::Types::LaunchTemplatesMonitoringRequest exists
ok 850 - Amazon::AWS::EC2::Types::LaunchTemplatesMonitoringRequest can be populated
ok 851 - Amazon::AWS::EC2::Types::LaunchTemplatesMonitoringRequest serializes ok
ok 852 - Amazon::AWS::EC2::Types::LaunchTemplatesMonitoringRequest deseralizes ok
# Enabled
ok 853 - Amazon::AWS::EC2::Types::LaunchTemplatesMonitoringRequest compares ok
# CHANGE!
# vicselect
# Enabled
# Enabled -- Str
# Setting Enabled to True
not ok 854 - Changed Amazon::AWS::EC2::Types::LaunchTemplatesMonitoringRequest fails eqv
# Failed test 'Changed Amazon::AWS::EC2::Types::LaunchTemplatesMonitoringRequest fails eqv'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 120
ok 855 - Amazon::AWS::EC2::Types::LicenseConfiguration loads. Is not a Failure object
ok 856 - Amazon::AWS::EC2::Types::LicenseConfiguration exists
ok 857 - Amazon::AWS::EC2::Types::LicenseConfiguration can be populated
ok 858 - Amazon::AWS::EC2::Types::LicenseConfiguration serializes ok
ok 859 - Amazon::AWS::EC2::Types::LicenseConfiguration deseralizes ok
# licenseConfigurationArn
ok 860 - Amazon::AWS::EC2::Types::LicenseConfiguration compares ok
# CHANGE!
# vicselect
# licenseConfigurationArn
# licenseConfigurationArn -- Str
# Setting licenseConfigurationArn to syzygy!dSxbadT
ok 861 - Changed Amazon::AWS::EC2::Types::LicenseConfiguration fails eqv
ok 862 - Amazon::AWS::EC2::Types::LicenseConfigurationRequest loads. Is not a Failure object
ok 863 - Amazon::AWS::EC2::Types::LicenseConfigurationRequest exists
ok 864 - Amazon::AWS::EC2::Types::LicenseConfigurationRequest can be populated
ok 865 - Amazon::AWS::EC2::Types::LicenseConfigurationRequest serializes ok
ok 866 - Amazon::AWS::EC2::Types::LicenseConfigurationRequest deseralizes ok
# LicenseConfigurationArn
ok 867 - Amazon::AWS::EC2::Types::LicenseConfigurationRequest compares ok
# CHANGE!
# vicselect
# LicenseConfigurationArn
# LicenseConfigurationArn -- Str
# Setting LicenseConfigurationArn to syzygy!lHapwvMlWzThXtI
ok 868 - Changed Amazon::AWS::EC2::Types::LicenseConfigurationRequest fails eqv
ok 869 - Amazon::AWS::EC2::Types::LoadPermission loads. Is not a Failure object
ok 870 - Amazon::AWS::EC2::Types::LoadPermission exists
ok 871 - Amazon::AWS::EC2::Types::LoadPermission can be populated
ok 872 - Amazon::AWS::EC2::Types::LoadPermission serializes ok
ok 873 - Amazon::AWS::EC2::Types::LoadPermission deseralizes ok
# group
# userId
ok 874 - Amazon::AWS::EC2::Types::LoadPermission compares ok
# CHANGE!
# vicselect
# group, userId
# userId -- Str
# Setting userId to syzygy!cBPbNuWcMTTadMnC
ok 875 - Changed Amazon::AWS::EC2::Types::LoadPermission fails eqv
ok 876 - Amazon::AWS::EC2::Types::LoadPermissionRequest loads. Is not a Failure object
ok 877 - Amazon::AWS::EC2::Types::LoadPermissionRequest exists
ok 878 - Amazon::AWS::EC2::Types::LoadPermissionRequest can be populated
ok 879 - Amazon::AWS::EC2::Types::LoadPermissionRequest serializes ok
ok 880 - Amazon::AWS::EC2::Types::LoadPermissionRequest deseralizes ok
# Group
# UserId
ok 881 - Amazon::AWS::EC2::Types::LoadPermissionRequest compares ok
# CHANGE!
# vicselect
# Group, UserId
# UserId -- Str
# Setting UserId to syzygy!IPLEwjoyuXc
ok 882 - Changed Amazon::AWS::EC2::Types::LoadPermissionRequest fails eqv
ok 883 - Amazon::AWS::EC2::Types::ModifyTransitGatewayVpcAttachmentRequestOptions loads. Is not a Failure object
ok 884 - Amazon::AWS::EC2::Types::ModifyTransitGatewayVpcAttachmentRequestOptions exists
ok 885 - Amazon::AWS::EC2::Types::ModifyTransitGatewayVpcAttachmentRequestOptions can be populated
ok 886 - Amazon::AWS::EC2::Types::ModifyTransitGatewayVpcAttachmentRequestOptions serializes ok
ok 887 - Amazon::AWS::EC2::Types::ModifyTransitGatewayVpcAttachmentRequestOptions deseralizes ok
# DnsSupport
# Ipv6Support
ok 888 - Amazon::AWS::EC2::Types::ModifyTransitGatewayVpcAttachmentRequestOptions compares ok
# CHANGE!
# vicselect
# DnsSupport, Ipv6Support
# Ipv6Support -- Str
# Setting Ipv6Support to syzygy!enable
ok 889 - Changed Amazon::AWS::EC2::Types::ModifyTransitGatewayVpcAttachmentRequestOptions fails eqv
ok 890 - Amazon::AWS::EC2::Types::Monitoring loads. Is not a Failure object
ok 891 - Amazon::AWS::EC2::Types::Monitoring exists
ok 892 - Amazon::AWS::EC2::Types::Monitoring can be populated
ok 893 - Amazon::AWS::EC2::Types::Monitoring serializes ok
ok 894 - Amazon::AWS::EC2::Types::Monitoring deseralizes ok
# state
ok 895 - Amazon::AWS::EC2::Types::Monitoring compares ok
# CHANGE!
# vicselect
# state
# state -- Str
# Setting state to syzygy!disabling
ok 896 - Changed Amazon::AWS::EC2::Types::Monitoring fails eqv
ok 897 - Amazon::AWS::EC2::Types::MovingAddressStatus loads. Is not a Failure object
ok 898 - Amazon::AWS::EC2::Types::MovingAddressStatus exists
ok 899 - Amazon::AWS::EC2::Types::MovingAddressStatus can be populated
ok 900 - Amazon::AWS::EC2::Types::MovingAddressStatus serializes ok
ok 901 - Amazon::AWS::EC2::Types::MovingAddressStatus deseralizes ok
# moveStatus
# publicIp
ok 902 - Amazon::AWS::EC2::Types::MovingAddressStatus compares ok
# CHANGE!
# vicselect
# moveStatus, publicIp
# moveStatus -- Str
# Setting moveStatus to syzygy!restoringToClassic
ok 903 - Changed Amazon::AWS::EC2::Types::MovingAddressStatus fails eqv
ok 904 - Amazon::AWS::EC2::Types::NatGatewayAddress loads. Is not a Failure object
ok 905 - Amazon::AWS::EC2::Types::NatGatewayAddress exists
ok 906 - Amazon::AWS::EC2::Types::NatGatewayAddress can be populated
ok 907 - Amazon::AWS::EC2::Types::NatGatewayAddress serializes ok
ok 908 - Amazon::AWS::EC2::Types::NatGatewayAddress deseralizes ok
# allocationId
# networkInterfaceId
# privateIp
# publicIp
ok 909 - Amazon::AWS::EC2::Types::NatGatewayAddress compares ok
# CHANGE!
# vicselect
# allocationId, networkInterfaceId, privateIp, publicIp
# networkInterfaceId -- Str
# Setting networkInterfaceId to syzygy!GNgIM
ok 910 - Changed Amazon::AWS::EC2::Types::NatGatewayAddress fails eqv
ok 911 - Amazon::AWS::EC2::Types::NetworkAclAssociation loads. Is not a Failure object
ok 912 - Amazon::AWS::EC2::Types::NetworkAclAssociation exists
ok 913 - Amazon::AWS::EC2::Types::NetworkAclAssociation can be populated
ok 914 - Amazon::AWS::EC2::Types::NetworkAclAssociation serializes ok
ok 915 - Amazon::AWS::EC2::Types::NetworkAclAssociation deseralizes ok
# networkAclAssociationId
# networkAclId
# subnetId
ok 916 - Amazon::AWS::EC2::Types::NetworkAclAssociation compares ok
# CHANGE!
# vicselect
# networkAclAssociationId, networkAclId, subnetId
# networkAclId -- Str
# Setting networkAclId to syzygy!gOFgr
ok 917 - Changed Amazon::AWS::EC2::Types::NetworkAclAssociation fails eqv
ok 918 - Amazon::AWS::EC2::Types::NetworkInterfaceAssociation loads. Is not a Failure object
ok 919 - Amazon::AWS::EC2::Types::NetworkInterfaceAssociation exists
ok 920 - Amazon::AWS::EC2::Types::NetworkInterfaceAssociation can be populated
ok 921 - Amazon::AWS::EC2::Types::NetworkInterfaceAssociation serializes ok
ok 922 - Amazon::AWS::EC2::Types::NetworkInterfaceAssociation deseralizes ok
# allocationId
# associationId
# ipOwnerId
# publicDnsName
# publicIp
ok 923 - Amazon::AWS::EC2::Types::NetworkInterfaceAssociation compares ok
# CHANGE!
# vicselect
# allocationId, associationId, ipOwnerId, publicDnsName, publicIp
# publicDnsName -- Str
# Setting publicDnsName to syzygy!hBIHytahhuOtvXpmf
ok 924 - Changed Amazon::AWS::EC2::Types::NetworkInterfaceAssociation fails eqv
ok 925 - Amazon::AWS::EC2::Types::NetworkInterfaceAttachment loads. Is not a Failure object
ok 926 - Amazon::AWS::EC2::Types::NetworkInterfaceAttachment exists
ok 927 - Amazon::AWS::EC2::Types::NetworkInterfaceAttachment can be populated
ok 928 - Amazon::AWS::EC2::Types::NetworkInterfaceAttachment serializes ok
ok 929 - Amazon::AWS::EC2::Types::NetworkInterfaceAttachment deseralizes ok
# attachmentId
# attachTime
# deleteOnTermination
# deviceIndex
# instanceId
# instanceOwnerId
# status
ok 930 - Amazon::AWS::EC2::Types::NetworkInterfaceAttachment compares ok
# CHANGE!
# vicselect
# attachmentId, attachTime, deleteOnTermination, deviceIndex, instanceId, instanceOwnerId, status
# status -- Str
# Setting status to syzygy!detaching
ok 931 - Changed Amazon::AWS::EC2::Types::NetworkInterfaceAttachment fails eqv
ok 932 - Amazon::AWS::EC2::Types::NetworkInterfaceAttachmentChanges loads. Is not a Failure object
ok 933 - Amazon::AWS::EC2::Types::NetworkInterfaceAttachmentChanges exists
ok 934 - Amazon::AWS::EC2::Types::NetworkInterfaceAttachmentChanges can be populated
ok 935 - Amazon::AWS::EC2::Types::NetworkInterfaceAttachmentChanges serializes ok
ok 936 - Amazon::AWS::EC2::Types::NetworkInterfaceAttachmentChanges deseralizes ok
# AttachmentId
# DeleteOnTermination
ok 937 - Amazon::AWS::EC2::Types::NetworkInterfaceAttachmentChanges compares ok
# CHANGE!
# vicselect
# AttachmentId, DeleteOnTermination
# AttachmentId -- Str
# Setting AttachmentId to syzygy!zZrPFI
ok 938 - Changed Amazon::AWS::EC2::Types::NetworkInterfaceAttachmentChanges fails eqv
ok 939 - Amazon::AWS::EC2::Types::NetworkInterfaceIpv6Address loads. Is not a Failure object
ok 940 - Amazon::AWS::EC2::Types::NetworkInterfaceIpv6Address exists
ok 941 - Amazon::AWS::EC2::Types::NetworkInterfaceIpv6Address can be populated
ok 942 - Amazon::AWS::EC2::Types::NetworkInterfaceIpv6Address serializes ok
ok 943 - Amazon::AWS::EC2::Types::NetworkInterfaceIpv6Address deseralizes ok
# ipv6Address
ok 944 - Amazon::AWS::EC2::Types::NetworkInterfaceIpv6Address compares ok
# CHANGE!
# vicselect
# ipv6Address
# ipv6Address -- Str
# Setting ipv6Address to syzygy!yKzIftuWyXqARiGg
ok 945 - Changed Amazon::AWS::EC2::Types::NetworkInterfaceIpv6Address fails eqv
ok 946 - Amazon::AWS::EC2::Types::NetworkInterfacePermissionState loads. Is not a Failure object
ok 947 - Amazon::AWS::EC2::Types::NetworkInterfacePermissionState exists
ok 948 - Amazon::AWS::EC2::Types::NetworkInterfacePermissionState can be populated
ok 949 - Amazon::AWS::EC2::Types::NetworkInterfacePermissionState serializes ok
ok 950 - Amazon::AWS::EC2::Types::NetworkInterfacePermissionState deseralizes ok
# state
# statusMessage
ok 951 - Amazon::AWS::EC2::Types::NetworkInterfacePermissionState compares ok
# CHANGE!
# vicselect
# state, statusMessage
# state -- Str
# Setting state to syzygy!revoking
ok 952 - Changed Amazon::AWS::EC2::Types::NetworkInterfacePermissionState fails eqv
ok 953 - Amazon::AWS::EC2::Types::NetworkInterfacePrivateIpAddress loads. Is not a Failure object
ok 954 - Amazon::AWS::EC2::Types::NetworkInterfacePrivateIpAddress exists
ok 955 - Amazon::AWS::EC2::Types::NetworkInterfacePrivateIpAddress can be populated
ok 956 - Amazon::AWS::EC2::Types::NetworkInterfacePrivateIpAddress serializes ok
ok 957 - Amazon::AWS::EC2::Types::NetworkInterfacePrivateIpAddress deseralizes ok
# association
# allocationId
not ok 958 - Amazon::AWS::EC2::Types::NetworkInterfacePrivateIpAddress compares ok
# Failed test 'Amazon::AWS::EC2::Types::NetworkInterfacePrivateIpAddress compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 119
# CHANGE!
# vicselect
# association, primary, privateDnsName, privateIpAddress
# association -- Str
# Setting association to Amazon::AWS::EC2::Types::NetworkInterfaceAssociation.new(allocationId => Str, associationId => Str, ipOwnerId => Str, publicDnsName => Str, publicIp => Str)
ok 959 - Changed Amazon::AWS::EC2::Types::NetworkInterfacePrivateIpAddress fails eqv
ok 960 - Amazon::AWS::EC2::Types::NewDhcpConfiguration loads. Is not a Failure object
ok 961 - Amazon::AWS::EC2::Types::NewDhcpConfiguration exists
ok 962 - Amazon::AWS::EC2::Types::NewDhcpConfiguration can be populated
ok 963 - Amazon::AWS::EC2::Types::NewDhcpConfiguration serializes ok
ok 964 - Amazon::AWS::EC2::Types::NewDhcpConfiguration deseralizes ok
# Key
# Values
trXWpgMLNuCutkkherLAPVJjubil
trXWpgMLNuCutkkherLAPVJjubil
KDPOCwiZzbhwYdRvLjdEl
KDPOCwiZzbhwYdRvLjdEl
ok 965 - Amazon::AWS::EC2::Types::NewDhcpConfiguration compares ok
# CHANGE!
# vicselect
# Key, Values
# Key -- Str
# Setting Key to syzygy!pqOtfwQXO
ok 966 - Changed Amazon::AWS::EC2::Types::NewDhcpConfiguration fails eqv
ok 967 - Amazon::AWS::EC2::Types::OnDemandOptions loads. Is not a Failure object
ok 968 - Amazon::AWS::EC2::Types::OnDemandOptions exists
ok 969 - Amazon::AWS::EC2::Types::OnDemandOptions can be populated
ok 970 - Amazon::AWS::EC2::Types::OnDemandOptions serializes ok
ok 971 - Amazon::AWS::EC2::Types::OnDemandOptions deseralizes ok
# allocationStrategy
# minTargetCapacity
# singleAvailabilityZone
# singleInstanceType
ok 972 - Amazon::AWS::EC2::Types::OnDemandOptions compares ok
# CHANGE!
# vicselect
# allocationStrategy, minTargetCapacity, singleAvailabilityZone, singleInstanceType
# singleInstanceType -- Str
# Setting singleInstanceType to True
ok 973 - Changed Amazon::AWS::EC2::Types::OnDemandOptions fails eqv
ok 974 - Amazon::AWS::EC2::Types::OnDemandOptionsRequest loads. Is not a Failure object
ok 975 - Amazon::AWS::EC2::Types::OnDemandOptionsRequest exists
ok 976 - Amazon::AWS::EC2::Types::OnDemandOptionsRequest can be populated
ok 977 - Amazon::AWS::EC2::Types::OnDemandOptionsRequest serializes ok
ok 978 - Amazon::AWS::EC2::Types::OnDemandOptionsRequest deseralizes ok
# AllocationStrategy
# MinTargetCapacity
# SingleAvailabilityZone
# SingleInstanceType
ok 979 - Amazon::AWS::EC2::Types::OnDemandOptionsRequest compares ok
# CHANGE!
# vicselect
# AllocationStrategy, MinTargetCapacity, SingleAvailabilityZone, SingleInstanceType
# SingleAvailabilityZone -- Str
# Setting SingleAvailabilityZone to True
ok 980 - Changed Amazon::AWS::EC2::Types::OnDemandOptionsRequest fails eqv
ok 981 - Amazon::AWS::EC2::Types::PciId loads. Is not a Failure object
ok 982 - Amazon::AWS::EC2::Types::PciId exists
ok 983 - Amazon::AWS::EC2::Types::PciId can be populated
ok 984 - Amazon::AWS::EC2::Types::PciId serializes ok
ok 985 - Amazon::AWS::EC2::Types::PciId deseralizes ok
# DeviceId
# SubsystemId
# SubsystemVendorId
# VendorId
ok 986 - Amazon::AWS::EC2::Types::PciId compares ok
# CHANGE!
# vicselect
# DeviceId, SubsystemId, SubsystemVendorId, VendorId
# SubsystemId -- Str
# Setting SubsystemId to syzygy!aLPTlMAsKpYsNP
ok 987 - Changed Amazon::AWS::EC2::Types::PciId fails eqv
ok 988 - Amazon::AWS::EC2::Types::PeeringConnectionOptions loads. Is not a Failure object
ok 989 - Amazon::AWS::EC2::Types::PeeringConnectionOptions exists
ok 990 - Amazon::AWS::EC2::Types::PeeringConnectionOptions can be populated
ok 991 - Amazon::AWS::EC2::Types::PeeringConnectionOptions serializes ok
ok 992 - Amazon::AWS::EC2::Types::PeeringConnectionOptions deseralizes ok
# allowDnsResolutionFromRemoteVpc
# allowEgressFromLocalClassicLinkToRemoteVpc
# allowEgressFromLocalVpcToRemoteClassicLink
ok 993 - Amazon::AWS::EC2::Types::PeeringConnectionOptions compares ok
# CHANGE!
# vicselect
# allowDnsResolutionFromRemoteVpc, allowEgressFromLocalClassicLinkToRemoteVpc, allowEgressFromLocalVpcToRemoteClassicLink
# allowEgressFromLocalVpcToRemoteClassicLink -- Str
# Setting allowEgressFromLocalVpcToRemoteClassicLink to True
ok 994 - Changed Amazon::AWS::EC2::Types::PeeringConnectionOptions fails eqv
ok 995 - Amazon::AWS::EC2::Types::PeeringConnectionOptionsRequest loads. Is not a Failure object
ok 996 - Amazon::AWS::EC2::Types::PeeringConnectionOptionsRequest exists
ok 997 - Amazon::AWS::EC2::Types::PeeringConnectionOptionsRequest can be populated
ok 998 - Amazon::AWS::EC2::Types::PeeringConnectionOptionsRequest serializes ok
ok 999 - Amazon::AWS::EC2::Types::PeeringConnectionOptionsRequest deseralizes ok
# AllowDnsResolutionFromRemoteVpc
# AllowEgressFromLocalClassicLinkToRemoteVpc
# AllowEgressFromLocalVpcToRemoteClassicLink
ok 1000 - Amazon::AWS::EC2::Types::PeeringConnectionOptionsRequest compares ok
# CHANGE!
# vicselect
# AllowDnsResolutionFromRemoteVpc, AllowEgressFromLocalClassicLinkToRemoteVpc, AllowEgressFromLocalVpcToRemoteClassicLink
# AllowEgressFromLocalVpcToRemoteClassicLink -- Str
# Setting AllowEgressFromLocalVpcToRemoteClassicLink to True
not ok 1001 - Changed Amazon::AWS::EC2::Types::PeeringConnectionOptionsRequest fails eqv
# Failed test 'Changed Amazon::AWS::EC2::Types::PeeringConnectionOptionsRequest fails eqv'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 120
ok 1002 - Amazon::AWS::EC2::Types::Placement loads. Is not a Failure object
ok 1003 - Amazon::AWS::EC2::Types::Placement exists
ok 1004 - Amazon::AWS::EC2::Types::Placement can be populated
ok 1005 - Amazon::AWS::EC2::Types::Placement serializes ok
ok 1006 - Amazon::AWS::EC2::Types::Placement deseralizes ok
# Affinity
# AvailabilityZone
# GroupName
# HostId
# PartitionNumber
# SpreadDomain
# Tenancy
# affinity
# availabilityZone
# groupName
# hostId
# partitionNumber
# spreadDomain
# tenancy
ok 1007 - Amazon::AWS::EC2::Types::Placement compares ok
# CHANGE!
# vicselect
# Affinity, AvailabilityZone, GroupName, HostId, PartitionNumber, SpreadDomain, Tenancy, affinity, availabilityZone, groupName, hostId, partitionNumber, spreadDomain, tenancy
# groupName -- Str
# Setting groupName to syzygy!BWHcuFohPedaofvH
ok 1008 - Changed Amazon::AWS::EC2::Types::Placement fails eqv
ok 1009 - Amazon::AWS::EC2::Types::PlacementGroup loads. Is not a Failure object
ok 1010 - Amazon::AWS::EC2::Types::PlacementGroup exists
ok 1011 - Amazon::AWS::EC2::Types::PlacementGroup can be populated
ok 1012 - Amazon::AWS::EC2::Types::PlacementGroup serializes ok
ok 1013 - Amazon::AWS::EC2::Types::PlacementGroup deseralizes ok
# groupName
# partitionCount
# state
# strategy
ok 1014 - Amazon::AWS::EC2::Types::PlacementGroup compares ok
# CHANGE!
# vicselect
# groupName, partitionCount, state, strategy
# groupName -- Str
# Setting groupName to syzygy!ANPQzzlARkHfFHIZe
ok 1015 - Changed Amazon::AWS::EC2::Types::PlacementGroup fails eqv
ok 1016 - Amazon::AWS::EC2::Types::PlacementResponse loads. Is not a Failure object
ok 1017 - Amazon::AWS::EC2::Types::PlacementResponse exists
ok 1018 - Amazon::AWS::EC2::Types::PlacementResponse can be populated
ok 1019 - Amazon::AWS::EC2::Types::PlacementResponse serializes ok
ok 1020 - Amazon::AWS::EC2::Types::PlacementResponse deseralizes ok
# groupName
ok 1021 - Amazon::AWS::EC2::Types::PlacementResponse compares ok
# CHANGE!
# vicselect
# groupName
# groupName -- Str
# Setting groupName to syzygy!AFAVywmsdAwFgOPAqlGKAsstF
ok 1022 - Changed Amazon::AWS::EC2::Types::PlacementResponse fails eqv
ok 1023 - Amazon::AWS::EC2::Types::PortRange loads. Is not a Failure object
ok 1024 - Amazon::AWS::EC2::Types::PortRange exists
ok 1025 - Amazon::AWS::EC2::Types::PortRange can be populated
ok 1026 - Amazon::AWS::EC2::Types::PortRange serializes ok
ok 1027 - Amazon::AWS::EC2::Types::PortRange deseralizes ok
# From
# from
# To
# to
ok 1028 - Amazon::AWS::EC2::Types::PortRange compares ok
# CHANGE!
# vicselect
# From, from, To, to
# To -- Str
# Setting To to 28
ok 1029 - Changed Amazon::AWS::EC2::Types::PortRange fails eqv
ok 1030 - Amazon::AWS::EC2::Types::PrefixList loads. Is not a Failure object
ok 1031 - Amazon::AWS::EC2::Types::PrefixList exists
ok 1032 - Amazon::AWS::EC2::Types::PrefixList can be populated
ok 1033 - Amazon::AWS::EC2::Types::PrefixList serializes ok
ok 1034 - Amazon::AWS::EC2::Types::PrefixList deseralizes ok
# cidrs
ZkCkODo
ZkCkODo
xwdAatjGDSKAqHSRYkb
xwdAatjGDSKAqHSRYkb
xBAAZaKhKaETZSiGsZnyfyrA
xBAAZaKhKaETZSiGsZnyfyrA
npMLSHWi
npMLSHWi
# prefixListId
# prefixListName
ok 1035 - Amazon::AWS::EC2::Types::PrefixList compares ok
# CHANGE!
# vicselect
# cidrs, prefixListId, prefixListName
# cidrs -- Str
# Setting cidrs to []
# Type check failed in assignment to @!cidrs; expected Str but got Array[Str] (Array[Str].new())
ok 1036 - Amazon::AWS::EC2::Types::PrefixListId loads. Is not a Failure object
ok 1037 - Amazon::AWS::EC2::Types::PrefixListId exists
ok 1038 - Amazon::AWS::EC2::Types::PrefixListId can be populated
ok 1039 - Amazon::AWS::EC2::Types::PrefixListId serializes ok
ok 1040 - Amazon::AWS::EC2::Types::PrefixListId deseralizes ok
# Description
# description
# PrefixListId
# prefixListId
ok 1041 - Amazon::AWS::EC2::Types::PrefixListId compares ok
# CHANGE!
# vicselect
# Description, description, PrefixListId, prefixListId
# PrefixListId -- Str
# Setting PrefixListId to syzygy!fakmxbekppKTDqHfMppMERaiPptP
ok 1042 - Changed Amazon::AWS::EC2::Types::PrefixListId fails eqv
ok 1043 - Amazon::AWS::EC2::Types::PriceSchedule loads. Is not a Failure object
ok 1044 - Amazon::AWS::EC2::Types::PriceSchedule exists
ok 1045 - Amazon::AWS::EC2::Types::PriceSchedule can be populated
ok 1046 - Amazon::AWS::EC2::Types::PriceSchedule serializes ok
ok 1047 - Amazon::AWS::EC2::Types::PriceSchedule deseralizes ok
# active
# currencyCode
# price
# term
ok 1048 - Amazon::AWS::EC2::Types::PriceSchedule compares ok
# CHANGE!
# vicselect
# active, currencyCode, price, term
# active -- Str
# Setting active to True
not ok 1049 - Changed Amazon::AWS::EC2::Types::PriceSchedule fails eqv
# Failed test 'Changed Amazon::AWS::EC2::Types::PriceSchedule fails eqv'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 120
ok 1050 - Amazon::AWS::EC2::Types::PriceScheduleSpecification loads. Is not a Failure object
ok 1051 - Amazon::AWS::EC2::Types::PriceScheduleSpecification exists
ok 1052 - Amazon::AWS::EC2::Types::PriceScheduleSpecification can be populated
ok 1053 - Amazon::AWS::EC2::Types::PriceScheduleSpecification serializes ok
ok 1054 - Amazon::AWS::EC2::Types::PriceScheduleSpecification deseralizes ok
# CurrencyCode
# Price
# Term
ok 1055 - Amazon::AWS::EC2::Types::PriceScheduleSpecification compares ok
# CHANGE!
# vicselect
# CurrencyCode, Price, Term
# Term -- Str
# Setting Term to 31
ok 1056 - Changed Amazon::AWS::EC2::Types::PriceScheduleSpecification fails eqv
ok 1057 - Amazon::AWS::EC2::Types::PricingDetail loads. Is not a Failure object
ok 1058 - Amazon::AWS::EC2::Types::PricingDetail exists
ok 1059 - Amazon::AWS::EC2::Types::PricingDetail can be populated
ok 1060 - Amazon::AWS::EC2::Types::PricingDetail serializes ok
ok 1061 - Amazon::AWS::EC2::Types::PricingDetail deseralizes ok
# count
# price
ok 1062 - Amazon::AWS::EC2::Types::PricingDetail compares ok
# CHANGE!
# vicselect
# vicselect
# vicselect
# count, price
# count -- Str
# Setting count to 24
ok 1063 - Changed Amazon::AWS::EC2::Types::PricingDetail fails eqv
ok 1064 - Amazon::AWS::EC2::Types::PrincipalIdFormat loads. Is not a Failure object
ok 1065 - Amazon::AWS::EC2::Types::PrincipalIdFormat exists
ok 1066 - Amazon::AWS::EC2::Types::PrincipalIdFormat can be populated
ok 1067 - Amazon::AWS::EC2::Types::PrincipalIdFormat serializes ok
ok 1068 - Amazon::AWS::EC2::Types::PrincipalIdFormat deseralizes ok
# arn
# statuss
ok 1069 - Amazon::AWS::EC2::Types::PrincipalIdFormat compares ok
# CHANGE!
# vicselect
# arn, statuss
# arn -- Str
# Setting arn to syzygy!bFxeq
ok 1070 - Changed Amazon::AWS::EC2::Types::PrincipalIdFormat fails eqv
ok 1071 - Amazon::AWS::EC2::Types::PrivateIpAddressSpecification loads. Is not a Failure object
ok 1072 - Amazon::AWS::EC2::Types::PrivateIpAddressSpecification exists
ok 1073 - Amazon::AWS::EC2::Types::PrivateIpAddressSpecification can be populated
ok 1074 - Amazon::AWS::EC2::Types::PrivateIpAddressSpecification serializes ok
ok 1075 - Amazon::AWS::EC2::Types::PrivateIpAddressSpecification deseralizes ok
# Primary
# primary
# PrivateIpAddress
# privateIpAddress
ok 1076 - Amazon::AWS::EC2::Types::PrivateIpAddressSpecification compares ok
# CHANGE!
# vicselect
# Primary, primary, PrivateIpAddress, privateIpAddress
# PrivateIpAddress -- Str
# Setting PrivateIpAddress to syzygy!IVEHvzfbFcdGKekwkhoQ
ok 1077 - Changed Amazon::AWS::EC2::Types::PrivateIpAddressSpecification fails eqv
ok 1078 - Amazon::AWS::EC2::Types::ProductCode loads. Is not a Failure object
ok 1079 - Amazon::AWS::EC2::Types::ProductCode exists
ok 1080 - Amazon::AWS::EC2::Types::ProductCode can be populated
ok 1081 - Amazon::AWS::EC2::Types::ProductCode serializes ok
ok 1082 - Amazon::AWS::EC2::Types::ProductCode deseralizes ok
# productCode
# type
ok 1083 - Amazon::AWS::EC2::Types::ProductCode compares ok
# CHANGE!
# vicselect
# productCode, type
# productCode -- Str
# Setting productCode to syzygy!hPaGneZIZhpNprRrJ
ok 1084 - Changed Amazon::AWS::EC2::Types::ProductCode fails eqv
ok 1085 - Amazon::AWS::EC2::Types::PropagatingVgw loads. Is not a Failure object
ok 1086 - Amazon::AWS::EC2::Types::PropagatingVgw exists
ok 1087 - Amazon::AWS::EC2::Types::PropagatingVgw can be populated
ok 1088 - Amazon::AWS::EC2::Types::PropagatingVgw serializes ok
ok 1089 - Amazon::AWS::EC2::Types::PropagatingVgw deseralizes ok
# gatewayId
ok 1090 - Amazon::AWS::EC2::Types::PropagatingVgw compares ok
# CHANGE!
# vicselect
# gatewayId
# gatewayId -- Str
# Setting gatewayId to syzygy!RkvOrCChhIdOMRVyWfQYY
ok 1091 - Changed Amazon::AWS::EC2::Types::PropagatingVgw fails eqv
ok 1092 - Amazon::AWS::EC2::Types::ProvisionedBandwidth loads. Is not a Failure object
ok 1093 - Amazon::AWS::EC2::Types::ProvisionedBandwidth exists
ok 1094 - Amazon::AWS::EC2::Types::ProvisionedBandwidth can be populated
ok 1095 - Amazon::AWS::EC2::Types::ProvisionedBandwidth serializes ok
ok 1096 - Amazon::AWS::EC2::Types::ProvisionedBandwidth deseralizes ok
# provisioned
# provisionTime
# requested
# requestTime
# status
ok 1097 - Amazon::AWS::EC2::Types::ProvisionedBandwidth compares ok
# CHANGE!
# vicselect
# provisioned, provisionTime, requested, requestTime, status
# status -- Str
# Setting status to syzygy!yslcEKRiZUkVDiPW
ok 1098 - Changed Amazon::AWS::EC2::Types::ProvisionedBandwidth fails eqv
ok 1099 - Amazon::AWS::EC2::Types::PublicIpv4PoolRange loads. Is not a Failure object
ok 1100 - Amazon::AWS::EC2::Types::PublicIpv4PoolRange exists
ok 1101 - Amazon::AWS::EC2::Types::PublicIpv4PoolRange can be populated
ok 1102 - Amazon::AWS::EC2::Types::PublicIpv4PoolRange serializes ok
ok 1103 - Amazon::AWS::EC2::Types::PublicIpv4PoolRange deseralizes ok
# addressCount
# availableAddressCount
# firstAddress
# lastAddress
ok 1104 - Amazon::AWS::EC2::Types::PublicIpv4PoolRange compares ok
# CHANGE!
# vicselect
# addressCount, availableAddressCount, firstAddress, lastAddress
# availableAddressCount -- Str
# Setting availableAddressCount to 22
ok 1105 - Changed Amazon::AWS::EC2::Types::PublicIpv4PoolRange fails eqv
ok 1106 - Amazon::AWS::EC2::Types::Purchase loads. Is not a Failure object
ok 1107 - Amazon::AWS::EC2::Types::Purchase exists
ok 1108 - Amazon::AWS::EC2::Types::Purchase can be populated
ok 1109 - Amazon::AWS::EC2::Types::Purchase serializes ok
ok 1110 - Amazon::AWS::EC2::Types::Purchase deseralizes ok
# currencyCode
# duration
# hostIds
# hostReservationId
# hourlyPrice
# instanceFamily
# paymentOption
# upfrontPrice
ok 1111 - Amazon::AWS::EC2::Types::Purchase compares ok
# CHANGE!
# vicselect
# currencyCode, duration, hostIds, hostReservationId, hourlyPrice, instanceFamily, paymentOption, upfrontPrice
# paymentOption -- Str
# Setting paymentOption to syzygy!NoUpfront
ok 1112 - Changed Amazon::AWS::EC2::Types::Purchase fails eqv
ok 1113 - Amazon::AWS::EC2::Types::PurchaseRequest loads. Is not a Failure object
ok 1114 - Amazon::AWS::EC2::Types::PurchaseRequest exists
ok 1115 - Amazon::AWS::EC2::Types::PurchaseRequest can be populated
ok 1116 - Amazon::AWS::EC2::Types::PurchaseRequest serializes ok
ok 1117 - Amazon::AWS::EC2::Types::PurchaseRequest deseralizes ok
# InstanceCount
# PurchaseToken
ok 1118 - Amazon::AWS::EC2::Types::PurchaseRequest compares ok
# CHANGE!
# vicselect
# InstanceCount, PurchaseToken
# InstanceCount -- Str
# Setting InstanceCount to 17
ok 1119 - Changed Amazon::AWS::EC2::Types::PurchaseRequest fails eqv
ok 1120 - Amazon::AWS::EC2::Types::RecurringCharge loads. Is not a Failure object
ok 1121 - Amazon::AWS::EC2::Types::RecurringCharge exists
ok 1122 - Amazon::AWS::EC2::Types::RecurringCharge can be populated
ok 1123 - Amazon::AWS::EC2::Types::RecurringCharge serializes ok
ok 1124 - Amazon::AWS::EC2::Types::RecurringCharge deseralizes ok
# amount
# frequency
ok 1125 - Amazon::AWS::EC2::Types::RecurringCharge compares ok
# CHANGE!
# vicselect
# vicselect
# amount, frequency
# frequency -- Str
# Setting frequency to syzygy!Hourly
ok 1126 - Changed Amazon::AWS::EC2::Types::RecurringCharge fails eqv
ok 1127 - Amazon::AWS::EC2::Types::Region loads. Is not a Failure object
ok 1128 - Amazon::AWS::EC2::Types::Region exists
ok 1129 - Amazon::AWS::EC2::Types::Region can be populated
ok 1130 - Amazon::AWS::EC2::Types::Region serializes ok
ok 1131 - Amazon::AWS::EC2::Types::Region deseralizes ok
# regionEndpoint
# regionName
ok 1132 - Amazon::AWS::EC2::Types::Region compares ok
# CHANGE!
# vicselect
# regionEndpoint, regionName
# regionName -- Str
# Setting regionName to syzygy!PtvPxrvsVaLLdmhOGWidf
ok 1133 - Changed Amazon::AWS::EC2::Types::Region fails eqv
ok 1134 - Amazon::AWS::EC2::Types::ReservationValue loads. Is not a Failure object
ok 1135 - Amazon::AWS::EC2::Types::ReservationValue exists
ok 1136 - Amazon::AWS::EC2::Types::ReservationValue can be populated
ok 1137 - Amazon::AWS::EC2::Types::ReservationValue serializes ok
ok 1138 - Amazon::AWS::EC2::Types::ReservationValue deseralizes ok
# hourlyPrice
# remainingTotalValue
# remainingUpfrontValue
ok 1139 - Amazon::AWS::EC2::Types::ReservationValue compares ok
# CHANGE!
# vicselect
# hourlyPrice, remainingTotalValue, remainingUpfrontValue
# remainingUpfrontValue -- Str
# Setting remainingUpfrontValue to syzygy!LWPRTXqWosHx
ok 1140 - Changed Amazon::AWS::EC2::Types::ReservationValue fails eqv
ok 1141 - Amazon::AWS::EC2::Types::ReservedInstanceLimitPrice loads. Is not a Failure object
ok 1142 - Amazon::AWS::EC2::Types::ReservedInstanceLimitPrice exists
ok 1143 - Amazon::AWS::EC2::Types::ReservedInstanceLimitPrice can be populated
ok 1144 - Amazon::AWS::EC2::Types::ReservedInstanceLimitPrice serializes ok
ok 1145 - Amazon::AWS::EC2::Types::ReservedInstanceLimitPrice deseralizes ok
# Amount
# CurrencyCode
ok 1146 - Amazon::AWS::EC2::Types::ReservedInstanceLimitPrice compares ok
# CHANGE!
# vicselect
# Amount, CurrencyCode
# CurrencyCode -- Str
# Setting CurrencyCode to syzygy!USD
ok 1147 - Changed Amazon::AWS::EC2::Types::ReservedInstanceLimitPrice fails eqv
ok 1148 - Amazon::AWS::EC2::Types::ReservedInstanceReservationValue loads. Is not a Failure object
ok 1149 - Amazon::AWS::EC2::Types::ReservedInstanceReservationValue exists
ok 1150 - Amazon::AWS::EC2::Types::ReservedInstanceReservationValue can be populated
ok 1151 - Amazon::AWS::EC2::Types::ReservedInstanceReservationValue serializes ok
ok 1152 - Amazon::AWS::EC2::Types::ReservedInstanceReservationValue deseralizes ok
# reservationValue
# hourlyPrice
not ok 1153 - Amazon::AWS::EC2::Types::ReservedInstanceReservationValue compares ok
# Failed test 'Amazon::AWS::EC2::Types::ReservedInstanceReservationValue compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# reservationValue, reservedInstanceId
# reservationValue -- Str
# Setting reservationValue to Amazon::AWS::EC2::Types::ReservationValue.new(hourlyPrice => Str, remainingTotalValue => Str, remainingUpfrontValue => Str)
ok 1154 - Changed Amazon::AWS::EC2::Types::ReservedInstanceReservationValue fails eqv
ok 1155 - Amazon::AWS::EC2::Types::ReservedInstancesConfiguration loads. Is not a Failure object
ok 1156 - Amazon::AWS::EC2::Types::ReservedInstancesConfiguration exists
ok 1157 - Amazon::AWS::EC2::Types::ReservedInstancesConfiguration can be populated
ok 1158 - Amazon::AWS::EC2::Types::ReservedInstancesConfiguration serializes ok
ok 1159 - Amazon::AWS::EC2::Types::ReservedInstancesConfiguration deseralizes ok
# AvailabilityZone
# availabilityZone
# InstanceCount
# instanceCount
# InstanceType
# instanceType
# Platform
# platform
# Scope
# scope
ok 1160 - Amazon::AWS::EC2::Types::ReservedInstancesConfiguration compares ok
# CHANGE!
# vicselect
# AvailabilityZone, availabilityZone, InstanceCount, instanceCount, InstanceType, instanceType, Platform, platform, Scope, scope
# InstanceCount -- Str
# Setting InstanceCount to 7
ok 1161 - Changed Amazon::AWS::EC2::Types::ReservedInstancesConfiguration fails eqv
ok 1162 - Amazon::AWS::EC2::Types::ReservedInstancesId loads. Is not a Failure object
ok 1163 - Amazon::AWS::EC2::Types::ReservedInstancesId exists
ok 1164 - Amazon::AWS::EC2::Types::ReservedInstancesId can be populated
ok 1165 - Amazon::AWS::EC2::Types::ReservedInstancesId serializes ok
ok 1166 - Amazon::AWS::EC2::Types::ReservedInstancesId deseralizes ok
# reservedInstancesId
ok 1167 - Amazon::AWS::EC2::Types::ReservedInstancesId compares ok
# CHANGE!
# vicselect
# reservedInstancesId
# reservedInstancesId -- Str
# Setting reservedInstancesId to syzygy!aBIJmZnGeeEEuVeQaZUgkULgzZlbb
ok 1168 - Changed Amazon::AWS::EC2::Types::ReservedInstancesId fails eqv
ok 1169 - Amazon::AWS::EC2::Types::ReservedInstancesModificationResult loads. Is not a Failure object
ok 1170 - Amazon::AWS::EC2::Types::ReservedInstancesModificationResult exists
ok 1171 - Amazon::AWS::EC2::Types::ReservedInstancesModificationResult can be populated
ok 1172 - Amazon::AWS::EC2::Types::ReservedInstancesModificationResult serializes ok
ok 1173 - Amazon::AWS::EC2::Types::ReservedInstancesModificationResult deseralizes ok
# reservedInstancesId
# targetConfiguration
# AvailabilityZone
not ok 1174 - Amazon::AWS::EC2::Types::ReservedInstancesModificationResult compares ok
# Failed test 'Amazon::AWS::EC2::Types::ReservedInstancesModificationResult compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# reservedInstancesId, targetConfiguration
# targetConfiguration -- Str
# Setting targetConfiguration to Amazon::AWS::EC2::Types::ReservedInstancesConfiguration.new(AvailabilityZone => Str, availabilityZone => Str, InstanceCount => Int, instanceCount => Int, InstanceType => Str, instanceType => Str, Platform => Str, platform => Str, Scope => Str, scope => Str)
ok 1175 - Changed Amazon::AWS::EC2::Types::ReservedInstancesModificationResult fails eqv
ok 1176 - Amazon::AWS::EC2::Types::ReservedInstancesOffering loads. Is not a Failure object
ok 1177 - Amazon::AWS::EC2::Types::ReservedInstancesOffering exists
ok 1178 - Amazon::AWS::EC2::Types::ReservedInstancesOffering can be populated
ok 1179 - Amazon::AWS::EC2::Types::ReservedInstancesOffering serializes ok
ok 1180 - Amazon::AWS::EC2::Types::ReservedInstancesOffering deseralizes ok
# availabilityZone
# currencyCode
# duration
# fixedPrice
# instanceTenancy
# instanceType
# marketplace
# offeringClass
# offeringType
# pricingDetailss
Amazon::AWS::EC2::Types::PricingDetail.new(count => 12, price => 23.10691913435073e0)
Amazon::AWS::EC2::Types::PricingDetail.new(count => 12, price => 23.10691913435073e0)
# count
# price
Amazon::AWS::EC2::Types::PricingDetail.new(count => 19, price => 3.6811139311176877e0)
Amazon::AWS::EC2::Types::PricingDetail.new(count => 19, price => 3.6811139311176877e0)
# count
# price
Amazon::AWS::EC2::Types::PricingDetail.new(count => 26, price => 29.520602598311584e0)
Amazon::AWS::EC2::Types::PricingDetail.new(count => 26, price => 29.520602598311584e0)
# count
# price
Amazon::AWS::EC2::Types::PricingDetail.new(count => 22, price => 6.619416001255977e0)
Amazon::AWS::EC2::Types::PricingDetail.new(count => 22, price => 6.619416001255977e0)
# count
# price
# productDescription
# recurringCharges
# reservedInstancesOfferingId
# scope
# usagePrice
ok 1181 - Amazon::AWS::EC2::Types::ReservedInstancesOffering compares ok
# CHANGE!
# vicselect
# availabilityZone, currencyCode, duration, fixedPrice, instanceTenancy, instanceType, marketplace, offeringClass, offeringType, pricingDetailss, productDescription, recurringCharges, reservedInstancesOfferingId, scope, usagePrice
# reservedInstancesOfferingId -- Str
# Setting reservedInstancesOfferingId to syzygy!bPOFJJwW
ok 1182 - Changed Amazon::AWS::EC2::Types::ReservedInstancesOffering fails eqv
ok 1183 - Amazon::AWS::EC2::Types::ResponseError loads. Is not a Failure object
ok 1184 - Amazon::AWS::EC2::Types::ResponseError exists
ok 1185 - Amazon::AWS::EC2::Types::ResponseError can be populated
ok 1186 - Amazon::AWS::EC2::Types::ResponseError serializes ok
ok 1187 - Amazon::AWS::EC2::Types::ResponseError deseralizes ok
# code
# message
ok 1188 - Amazon::AWS::EC2::Types::ResponseError compares ok
# CHANGE!
# vicselect
# code, message
# code -- Str
# Setting code to syzygy!launchTemplateVersionDoesNotExist
ok 1189 - Changed Amazon::AWS::EC2::Types::ResponseError fails eqv
ok 1190 - Amazon::AWS::EC2::Types::Route loads. Is not a Failure object
ok 1191 - Amazon::AWS::EC2::Types::Route exists
ok 1192 - Amazon::AWS::EC2::Types::Route can be populated
ok 1193 - Amazon::AWS::EC2::Types::Route serializes ok
ok 1194 - Amazon::AWS::EC2::Types::Route deseralizes ok
# destinationCidrBlock
# destinationIpv6CidrBlock
# destinationPrefixListId
# egressOnlyInternetGatewayId
# gatewayId
# instanceId
# instanceOwnerId
# natGatewayId
# networkInterfaceId
# origin
# state
# transitGatewayId
# vpcPeeringConnectionId
ok 1195 - Amazon::AWS::EC2::Types::Route compares ok
# CHANGE!
# vicselect
# destinationCidrBlock, destinationIpv6CidrBlock, destinationPrefixListId, egressOnlyInternetGatewayId, gatewayId, instanceId, instanceOwnerId, natGatewayId, networkInterfaceId, origin, state, transitGatewayId, vpcPeeringConnectionId
# destinationPrefixListId -- Str
# Setting destinationPrefixListId to syzygy!YxLuyNkQifjLFA
ok 1196 - Changed Amazon::AWS::EC2::Types::Route fails eqv
ok 1197 - Amazon::AWS::EC2::Types::RouteTableAssociation loads. Is not a Failure object
ok 1198 - Amazon::AWS::EC2::Types::RouteTableAssociation exists
ok 1199 - Amazon::AWS::EC2::Types::RouteTableAssociation can be populated
ok 1200 - Amazon::AWS::EC2::Types::RouteTableAssociation serializes ok
ok 1201 - Amazon::AWS::EC2::Types::RouteTableAssociation deseralizes ok
# main
# routeTableAssociationId
# routeTableId
# subnetId
ok 1202 - Amazon::AWS::EC2::Types::RouteTableAssociation compares ok
# CHANGE!
# vicselect
# main, routeTableAssociationId, routeTableId, subnetId
# routeTableAssociationId -- Str
# Setting routeTableAssociationId to syzygy!sWommjM
ok 1203 - Changed Amazon::AWS::EC2::Types::RouteTableAssociation fails eqv
ok 1204 - Amazon::AWS::EC2::Types::RunInstancesMonitoringEnabled loads. Is not a Failure object
ok 1205 - Amazon::AWS::EC2::Types::RunInstancesMonitoringEnabled exists
ok 1206 - Amazon::AWS::EC2::Types::RunInstancesMonitoringEnabled can be populated
ok 1207 - Amazon::AWS::EC2::Types::RunInstancesMonitoringEnabled serializes ok
ok 1208 - Amazon::AWS::EC2::Types::RunInstancesMonitoringEnabled deseralizes ok
# Enabled
# enabled
ok 1209 - Amazon::AWS::EC2::Types::RunInstancesMonitoringEnabled compares ok
# CHANGE!
# vicselect
# Enabled, enabled
# enabled -- Str
# Setting enabled to True
not ok 1210 - Changed Amazon::AWS::EC2::Types::RunInstancesMonitoringEnabled fails eqv
# Failed test 'Changed Amazon::AWS::EC2::Types::RunInstancesMonitoringEnabled fails eqv'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
ok 1211 - Amazon::AWS::EC2::Types::S3Storage loads. Is not a Failure object
not ok 1212 - Amazon::AWS::EC2::Types::S3Storage exists
# Failed test 'Amazon::AWS::EC2::Types::S3Storage exists'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
Nil
Perl6::Metamodel::ClassHOW.new
# No such symbol 'Amazon::AWS::EC2::Types::S3Storage'
not ok 1213 - Amazon::AWS::EC2::Types::S3Storage can be populated
# Failed test 'Amazon::AWS::EC2::Types::S3Storage can be populated'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such symbol 'Amazon::AWS::EC2::Types::S3Storage'
not ok 1214 - Amazon::AWS::EC2::Types::S3Storage serializes ok
# Failed test 'Amazon::AWS::EC2::Types::S3Storage serializes ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such method 'to-xml' for invocant of type 'Any'
ok 1215 - Amazon::AWS::EC2::Types::S3Storage deseralizes ok
# No such method 'eqv' for invocant of type 'Any'
ok 1216 - Amazon::AWS::EC2::Types::ScheduledInstanceRecurrence loads. Is not a Failure object
ok 1217 - Amazon::AWS::EC2::Types::ScheduledInstanceRecurrence exists
ok 1218 - Amazon::AWS::EC2::Types::ScheduledInstanceRecurrence can be populated
ok 1219 - Amazon::AWS::EC2::Types::ScheduledInstanceRecurrence serializes ok
ok 1220 - Amazon::AWS::EC2::Types::ScheduledInstanceRecurrence deseralizes ok
# frequency
# interval
# occurrenceDays
23
23
22
22
29
29
19
19
# occurrenceRelativeToEnd
# occurrenceUnit
ok 1221 - Amazon::AWS::EC2::Types::ScheduledInstanceRecurrence compares ok
# CHANGE!
# vicselect
# frequency, interval, occurrenceDays, occurrenceRelativeToEnd, occurrenceUnit
# frequency -- Str
# Setting frequency to syzygy!WFTiIfwYIClhGYmoP
ok 1222 - Changed Amazon::AWS::EC2::Types::ScheduledInstanceRecurrence fails eqv
ok 1223 - Amazon::AWS::EC2::Types::ScheduledInstanceRecurrenceRequest loads. Is not a Failure object
ok 1224 - Amazon::AWS::EC2::Types::ScheduledInstanceRecurrenceRequest exists
ok 1225 - Amazon::AWS::EC2::Types::ScheduledInstanceRecurrenceRequest can be populated
ok 1226 - Amazon::AWS::EC2::Types::ScheduledInstanceRecurrenceRequest serializes ok
ok 1227 - Amazon::AWS::EC2::Types::ScheduledInstanceRecurrenceRequest deseralizes ok
# Frequency
# Interval
# OccurrenceDays
# OccurrenceRelativeToEnd
# OccurrenceUnit
ok 1228 - Amazon::AWS::EC2::Types::ScheduledInstanceRecurrenceRequest compares ok
# CHANGE!
# vicselect
# Frequency, Interval, OccurrenceDays, OccurrenceRelativeToEnd, OccurrenceUnit
# Frequency -- Str
# Setting Frequency to syzygy!ZnkFON
ok 1229 - Changed Amazon::AWS::EC2::Types::ScheduledInstanceRecurrenceRequest fails eqv
ok 1230 - Amazon::AWS::EC2::Types::ScheduledInstancesEbs loads. Is not a Failure object
ok 1231 - Amazon::AWS::EC2::Types::ScheduledInstancesEbs exists
ok 1232 - Amazon::AWS::EC2::Types::ScheduledInstancesEbs can be populated
ok 1233 - Amazon::AWS::EC2::Types::ScheduledInstancesEbs serializes ok
ok 1234 - Amazon::AWS::EC2::Types::ScheduledInstancesEbs deseralizes ok
# DeleteOnTermination
# Encrypted
# Iops
# SnapshotId
# VolumeSize
# VolumeType
ok 1235 - Amazon::AWS::EC2::Types::ScheduledInstancesEbs compares ok
# CHANGE!
# vicselect
# DeleteOnTermination, Encrypted, Iops, SnapshotId, VolumeSize, VolumeType
# Iops -- Str
# Setting Iops to 11
ok 1236 - Changed Amazon::AWS::EC2::Types::ScheduledInstancesEbs fails eqv
ok 1237 - Amazon::AWS::EC2::Types::ScheduledInstancesIamInstanceProfile loads. Is not a Failure object
ok 1238 - Amazon::AWS::EC2::Types::ScheduledInstancesIamInstanceProfile exists
ok 1239 - Amazon::AWS::EC2::Types::ScheduledInstancesIamInstanceProfile can be populated
ok 1240 - Amazon::AWS::EC2::Types::ScheduledInstancesIamInstanceProfile serializes ok
ok 1241 - Amazon::AWS::EC2::Types::ScheduledInstancesIamInstanceProfile deseralizes ok
# Arn
# Name
ok 1242 - Amazon::AWS::EC2::Types::ScheduledInstancesIamInstanceProfile compares ok
# CHANGE!
# vicselect
# Arn, Name
# Name -- Str
# Setting Name to syzygy!IrWeRKNbiIYmhVgAEIEZEfNvHFvm
ok 1243 - Changed Amazon::AWS::EC2::Types::ScheduledInstancesIamInstanceProfile fails eqv
ok 1244 - Amazon::AWS::EC2::Types::ScheduledInstancesIpv6Address loads. Is not a Failure object
ok 1245 - Amazon::AWS::EC2::Types::ScheduledInstancesIpv6Address exists
ok 1246 - Amazon::AWS::EC2::Types::ScheduledInstancesIpv6Address can be populated
ok 1247 - Amazon::AWS::EC2::Types::ScheduledInstancesIpv6Address serializes ok
ok 1248 - Amazon::AWS::EC2::Types::ScheduledInstancesIpv6Address deseralizes ok
# Ipv6Address
ok 1249 - Amazon::AWS::EC2::Types::ScheduledInstancesIpv6Address compares ok
# CHANGE!
# vicselect
# Ipv6Address
# Ipv6Address -- Str
# Setting Ipv6Address to syzygy!VTnxGThKGvwVBiKlGDEKzXWJVIc
ok 1250 - Changed Amazon::AWS::EC2::Types::ScheduledInstancesIpv6Address fails eqv
ok 1251 - Amazon::AWS::EC2::Types::ScheduledInstancesMonitoring loads. Is not a Failure object
ok 1252 - Amazon::AWS::EC2::Types::ScheduledInstancesMonitoring exists
ok 1253 - Amazon::AWS::EC2::Types::ScheduledInstancesMonitoring can be populated
ok 1254 - Amazon::AWS::EC2::Types::ScheduledInstancesMonitoring serializes ok
ok 1255 - Amazon::AWS::EC2::Types::ScheduledInstancesMonitoring deseralizes ok
# Enabled
ok 1256 - Amazon::AWS::EC2::Types::ScheduledInstancesMonitoring compares ok
# CHANGE!
# vicselect
# Enabled
# Enabled -- Str
# Setting Enabled to True
not ok 1257 - Changed Amazon::AWS::EC2::Types::ScheduledInstancesMonitoring fails eqv
# Failed test 'Changed Amazon::AWS::EC2::Types::ScheduledInstancesMonitoring fails eqv'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
ok 1258 - Amazon::AWS::EC2::Types::ScheduledInstancesPlacement loads. Is not a Failure object
ok 1259 - Amazon::AWS::EC2::Types::ScheduledInstancesPlacement exists
ok 1260 - Amazon::AWS::EC2::Types::ScheduledInstancesPlacement can be populated
ok 1261 - Amazon::AWS::EC2::Types::ScheduledInstancesPlacement serializes ok
ok 1262 - Amazon::AWS::EC2::Types::ScheduledInstancesPlacement deseralizes ok
# AvailabilityZone
# GroupName
ok 1263 - Amazon::AWS::EC2::Types::ScheduledInstancesPlacement compares ok
# CHANGE!
# vicselect
# AvailabilityZone, GroupName
# GroupName -- Str
# Setting GroupName to syzygy!BOtMTTrsXRNSZT
ok 1264 - Changed Amazon::AWS::EC2::Types::ScheduledInstancesPlacement fails eqv
ok 1265 - Amazon::AWS::EC2::Types::ScheduledInstancesPrivateIpAddressConfig loads. Is not a Failure object
ok 1266 - Amazon::AWS::EC2::Types::ScheduledInstancesPrivateIpAddressConfig exists
ok 1267 - Amazon::AWS::EC2::Types::ScheduledInstancesPrivateIpAddressConfig can be populated
ok 1268 - Amazon::AWS::EC2::Types::ScheduledInstancesPrivateIpAddressConfig serializes ok
ok 1269 - Amazon::AWS::EC2::Types::ScheduledInstancesPrivateIpAddressConfig deseralizes ok
# Primary
# PrivateIpAddress
ok 1270 - Amazon::AWS::EC2::Types::ScheduledInstancesPrivateIpAddressConfig compares ok
# CHANGE!
# vicselect
# Primary, PrivateIpAddress
# Primary -- Str
# Setting Primary to True
not ok 1271 - Changed Amazon::AWS::EC2::Types::ScheduledInstancesPrivateIpAddressConfig fails eqv
# Failed test 'Changed Amazon::AWS::EC2::Types::ScheduledInstancesPrivateIpAddressConfig fails eqv'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
ok 1272 - Amazon::AWS::EC2::Types::SecurityGroupIdentifier loads. Is not a Failure object
ok 1273 - Amazon::AWS::EC2::Types::SecurityGroupIdentifier exists
ok 1274 - Amazon::AWS::EC2::Types::SecurityGroupIdentifier can be populated
ok 1275 - Amazon::AWS::EC2::Types::SecurityGroupIdentifier serializes ok
ok 1276 - Amazon::AWS::EC2::Types::SecurityGroupIdentifier deseralizes ok
# groupId
# groupName
ok 1277 - Amazon::AWS::EC2::Types::SecurityGroupIdentifier compares ok
# CHANGE!
# vicselect
# groupId, groupName
# groupName -- Str
# Setting groupName to syzygy!odRBi
ok 1278 - Changed Amazon::AWS::EC2::Types::SecurityGroupIdentifier fails eqv
ok 1279 - Amazon::AWS::EC2::Types::SecurityGroupReference loads. Is not a Failure object
ok 1280 - Amazon::AWS::EC2::Types::SecurityGroupReference exists
ok 1281 - Amazon::AWS::EC2::Types::SecurityGroupReference can be populated
ok 1282 - Amazon::AWS::EC2::Types::SecurityGroupReference serializes ok
ok 1283 - Amazon::AWS::EC2::Types::SecurityGroupReference deseralizes ok
# groupId
# referencingVpcId
# vpcPeeringConnectionId
ok 1284 - Amazon::AWS::EC2::Types::SecurityGroupReference compares ok
# CHANGE!
# vicselect
# groupId, referencingVpcId, vpcPeeringConnectionId
# referencingVpcId -- Str
# Setting referencingVpcId to syzygy!gjqqYdlKxtggszflDHFABd
ok 1285 - Changed Amazon::AWS::EC2::Types::SecurityGroupReference fails eqv
ok 1286 - Amazon::AWS::EC2::Types::ServiceTypeDetail loads. Is not a Failure object
ok 1287 - Amazon::AWS::EC2::Types::ServiceTypeDetail exists
ok 1288 - Amazon::AWS::EC2::Types::ServiceTypeDetail can be populated
ok 1289 - Amazon::AWS::EC2::Types::ServiceTypeDetail serializes ok
ok 1290 - Amazon::AWS::EC2::Types::ServiceTypeDetail deseralizes ok
# serviceType
ok 1291 - Amazon::AWS::EC2::Types::ServiceTypeDetail compares ok
# CHANGE!
# vicselect
# serviceType
# serviceType -- Str
# Setting serviceType to syzygy!Interface
ok 1292 - Changed Amazon::AWS::EC2::Types::ServiceTypeDetail fails eqv
ok 1293 - Amazon::AWS::EC2::Types::SlotDateTimeRangeRequest loads. Is not a Failure object
ok 1294 - Amazon::AWS::EC2::Types::SlotDateTimeRangeRequest exists
ok 1295 - Amazon::AWS::EC2::Types::SlotDateTimeRangeRequest can be populated
ok 1296 - Amazon::AWS::EC2::Types::SlotDateTimeRangeRequest serializes ok
ok 1297 - Amazon::AWS::EC2::Types::SlotDateTimeRangeRequest deseralizes ok
# EarliestTime
# LatestTime
ok 1298 - Amazon::AWS::EC2::Types::SlotDateTimeRangeRequest compares ok
# CHANGE!
# vicselect
# EarliestTime, LatestTime
# EarliestTime -- Str
# Setting EarliestTime to syzygy!oJKtSRXBULAatN
ok 1299 - Changed Amazon::AWS::EC2::Types::SlotDateTimeRangeRequest fails eqv
ok 1300 - Amazon::AWS::EC2::Types::SlotStartTimeRangeRequest loads. Is not a Failure object
ok 1301 - Amazon::AWS::EC2::Types::SlotStartTimeRangeRequest exists
ok 1302 - Amazon::AWS::EC2::Types::SlotStartTimeRangeRequest can be populated
ok 1303 - Amazon::AWS::EC2::Types::SlotStartTimeRangeRequest serializes ok
ok 1304 - Amazon::AWS::EC2::Types::SlotStartTimeRangeRequest deseralizes ok
# EarliestTime
# LatestTime
ok 1305 - Amazon::AWS::EC2::Types::SlotStartTimeRangeRequest compares ok
# CHANGE!
# vicselect
# EarliestTime, LatestTime
# EarliestTime -- Str
# Setting EarliestTime to syzygy!gTGUivyFiOcW
ok 1306 - Changed Amazon::AWS::EC2::Types::SlotStartTimeRangeRequest fails eqv
ok 1307 - Amazon::AWS::EC2::Types::SpotFleetMonitoring loads. Is not a Failure object
ok 1308 - Amazon::AWS::EC2::Types::SpotFleetMonitoring exists
ok 1309 - Amazon::AWS::EC2::Types::SpotFleetMonitoring can be populated
ok 1310 - Amazon::AWS::EC2::Types::SpotFleetMonitoring serializes ok
ok 1311 - Amazon::AWS::EC2::Types::SpotFleetMonitoring deseralizes ok
# Enabled
# enabled
ok 1312 - Amazon::AWS::EC2::Types::SpotFleetMonitoring compares ok
# CHANGE!
# vicselect
# Enabled, enabled
# enabled -- Str
# Setting enabled to True
ok 1313 - Changed Amazon::AWS::EC2::Types::SpotFleetMonitoring fails eqv
ok 1314 - Amazon::AWS::EC2::Types::SpotInstanceStateFault loads. Is not a Failure object
ok 1315 - Amazon::AWS::EC2::Types::SpotInstanceStateFault exists
ok 1316 - Amazon::AWS::EC2::Types::SpotInstanceStateFault can be populated
ok 1317 - Amazon::AWS::EC2::Types::SpotInstanceStateFault serializes ok
ok 1318 - Amazon::AWS::EC2::Types::SpotInstanceStateFault deseralizes ok
# code
# message
ok 1319 - Amazon::AWS::EC2::Types::SpotInstanceStateFault compares ok
# CHANGE!
# vicselect
# code, message
# code -- Str
# Setting code to syzygy!CAAAondnEfVpwEI
ok 1320 - Changed Amazon::AWS::EC2::Types::SpotInstanceStateFault fails eqv
ok 1321 - Amazon::AWS::EC2::Types::SpotInstanceStatus loads. Is not a Failure object
ok 1322 - Amazon::AWS::EC2::Types::SpotInstanceStatus exists
ok 1323 - Amazon::AWS::EC2::Types::SpotInstanceStatus can be populated
ok 1324 - Amazon::AWS::EC2::Types::SpotInstanceStatus serializes ok
ok 1325 - Amazon::AWS::EC2::Types::SpotInstanceStatus deseralizes ok
# code
# message
# updateTime
ok 1326 - Amazon::AWS::EC2::Types::SpotInstanceStatus compares ok
# CHANGE!
# vicselect
# code, message, updateTime
# code -- Str
# Setting code to syzygy!rFAubtkoAAlrYz
ok 1327 - Changed Amazon::AWS::EC2::Types::SpotInstanceStatus fails eqv
ok 1328 - Amazon::AWS::EC2::Types::SpotMarketOptions loads. Is not a Failure object
ok 1329 - Amazon::AWS::EC2::Types::SpotMarketOptions exists
ok 1330 - Amazon::AWS::EC2::Types::SpotMarketOptions can be populated
ok 1331 - Amazon::AWS::EC2::Types::SpotMarketOptions serializes ok
ok 1332 - Amazon::AWS::EC2::Types::SpotMarketOptions deseralizes ok
# BlockDurationMinutes
# InstanceInterruptionBehavior
# MaxPrice
# SpotInstanceType
# ValidUntil
ok 1333 - Amazon::AWS::EC2::Types::SpotMarketOptions compares ok
# CHANGE!
# vicselect
# BlockDurationMinutes, InstanceInterruptionBehavior, MaxPrice, SpotInstanceType, ValidUntil
# SpotInstanceType -- Str
# Setting SpotInstanceType to syzygy!one
ok 1334 - Changed Amazon::AWS::EC2::Types::SpotMarketOptions fails eqv
ok 1335 - Amazon::AWS::EC2::Types::SpotOptions loads. Is not a Failure object
ok 1336 - Amazon::AWS::EC2::Types::SpotOptions exists
ok 1337 - Amazon::AWS::EC2::Types::SpotOptions can be populated
ok 1338 - Amazon::AWS::EC2::Types::SpotOptions serializes ok
ok 1339 - Amazon::AWS::EC2::Types::SpotOptions deseralizes ok
# allocationStrategy
# instanceInterruptionBehavior
# instancePoolsToUseCount
# minTargetCapacity
# singleAvailabilityZone
# singleInstanceType
ok 1340 - Amazon::AWS::EC2::Types::SpotOptions compares ok
# CHANGE!
# vicselect
# allocationStrategy, instanceInterruptionBehavior, instancePoolsToUseCount, minTargetCapacity, singleAvailabilityZone, singleInstanceType
# allocationStrategy -- Str
# Setting allocationStrategy to syzygy!lowest
ok 1341 - Changed Amazon::AWS::EC2::Types::SpotOptions fails eqv
ok 1342 - Amazon::AWS::EC2::Types::SpotOptionsRequest loads. Is not a Failure object
ok 1343 - Amazon::AWS::EC2::Types::SpotOptionsRequest exists
ok 1344 - Amazon::AWS::EC2::Types::SpotOptionsRequest can be populated
ok 1345 - Amazon::AWS::EC2::Types::SpotOptionsRequest serializes ok
ok 1346 - Amazon::AWS::EC2::Types::SpotOptionsRequest deseralizes ok
# AllocationStrategy
# InstanceInterruptionBehavior
# InstancePoolsToUseCount
# MinTargetCapacity
# SingleAvailabilityZone
# SingleInstanceType
ok 1347 - Amazon::AWS::EC2::Types::SpotOptionsRequest compares ok
# CHANGE!
# vicselect
# AllocationStrategy, InstanceInterruptionBehavior, InstancePoolsToUseCount, MinTargetCapacity, SingleAvailabilityZone, SingleInstanceType
# AllocationStrategy -- Str
# Setting AllocationStrategy to syzygy!lowest
ok 1348 - Changed Amazon::AWS::EC2::Types::SpotOptionsRequest fails eqv
ok 1349 - Amazon::AWS::EC2::Types::SpotPlacement loads. Is not a Failure object
ok 1350 - Amazon::AWS::EC2::Types::SpotPlacement exists
ok 1351 - Amazon::AWS::EC2::Types::SpotPlacement can be populated
ok 1352 - Amazon::AWS::EC2::Types::SpotPlacement serializes ok
ok 1353 - Amazon::AWS::EC2::Types::SpotPlacement deseralizes ok
# AvailabilityZone
# availabilityZone
# GroupName
# groupName
# Tenancy
# tenancy
ok 1354 - Amazon::AWS::EC2::Types::SpotPlacement compares ok
# CHANGE!
# vicselect
# AvailabilityZone, availabilityZone, GroupName, groupName, Tenancy, tenancy
# AvailabilityZone -- Str
# Setting AvailabilityZone to syzygy!BnuNhpZSSzIQIQzqBWbnoNxJPErwO
ok 1355 - Changed Amazon::AWS::EC2::Types::SpotPlacement fails eqv
ok 1356 - Amazon::AWS::EC2::Types::SpotPrice loads. Is not a Failure object
ok 1357 - Amazon::AWS::EC2::Types::SpotPrice exists
ok 1358 - Amazon::AWS::EC2::Types::SpotPrice can be populated
ok 1359 - Amazon::AWS::EC2::Types::SpotPrice serializes ok
ok 1360 - Amazon::AWS::EC2::Types::SpotPrice deseralizes ok
# availabilityZone
# instanceType
# productDescription
# spotPrice
# timestamp
ok 1361 - Amazon::AWS::EC2::Types::SpotPrice compares ok
# CHANGE!
# vicselect
# availabilityZone, instanceType, productDescription, spotPrice, timestamp
# instanceType -- Str
# Setting instanceType to syzygy!t1
ok 1362 - Changed Amazon::AWS::EC2::Types::SpotPrice fails eqv
ok 1363 - Amazon::AWS::EC2::Types::StateReason loads. Is not a Failure object
ok 1364 - Amazon::AWS::EC2::Types::StateReason exists
ok 1365 - Amazon::AWS::EC2::Types::StateReason can be populated
ok 1366 - Amazon::AWS::EC2::Types::StateReason serializes ok
ok 1367 - Amazon::AWS::EC2::Types::StateReason deseralizes ok
# code
# message
ok 1368 - Amazon::AWS::EC2::Types::StateReason compares ok
# CHANGE!
# vicselect
# code, message
# message -- Str
# Setting message to syzygy!AelnrrL
ok 1369 - Changed Amazon::AWS::EC2::Types::StateReason fails eqv
ok 1370 - Amazon::AWS::EC2::Types::Storage loads. Is not a Failure object
not ok 1371 - Amazon::AWS::EC2::Types::Storage exists
# Failed test 'Amazon::AWS::EC2::Types::Storage exists'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
Nil
Perl6::Metamodel::ClassHOW.new
# No such symbol 'Amazon::AWS::EC2::Types::Storage'
not ok 1372 - Amazon::AWS::EC2::Types::Storage can be populated
# Failed test 'Amazon::AWS::EC2::Types::Storage can be populated'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such symbol 'Amazon::AWS::EC2::Types::Storage'
not ok 1373 - Amazon::AWS::EC2::Types::Storage serializes ok
# Failed test 'Amazon::AWS::EC2::Types::Storage serializes ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such method 'to-xml' for invocant of type 'Any'
ok 1374 - Amazon::AWS::EC2::Types::Storage deseralizes ok
# No such method 'eqv' for invocant of type 'Any'
ok 1375 - Amazon::AWS::EC2::Types::StorageLocation loads. Is not a Failure object
ok 1376 - Amazon::AWS::EC2::Types::StorageLocation exists
ok 1377 - Amazon::AWS::EC2::Types::StorageLocation can be populated
ok 1378 - Amazon::AWS::EC2::Types::StorageLocation serializes ok
ok 1379 - Amazon::AWS::EC2::Types::StorageLocation deseralizes ok
# Bucket
# Key
ok 1380 - Amazon::AWS::EC2::Types::StorageLocation compares ok
# CHANGE!
# vicselect
# Bucket, Key
# Key -- Str
# Setting Key to syzygy!DsSpJDHhQvMBXZzNVSEH
ok 1381 - Changed Amazon::AWS::EC2::Types::StorageLocation fails eqv
ok 1382 - Amazon::AWS::EC2::Types::SubnetCidrBlockState loads. Is not a Failure object
ok 1383 - Amazon::AWS::EC2::Types::SubnetCidrBlockState exists
ok 1384 - Amazon::AWS::EC2::Types::SubnetCidrBlockState can be populated
ok 1385 - Amazon::AWS::EC2::Types::SubnetCidrBlockState serializes ok
ok 1386 - Amazon::AWS::EC2::Types::SubnetCidrBlockState deseralizes ok
# state
# statusMessage
ok 1387 - Amazon::AWS::EC2::Types::SubnetCidrBlockState compares ok
# CHANGE!
# vicselect
# state, statusMessage
# statusMessage -- Str
# Setting statusMessage to syzygy!cOZTAYPSNXowhHSBEzTDRtwB
ok 1388 - Changed Amazon::AWS::EC2::Types::SubnetCidrBlockState fails eqv
ok 1389 - Amazon::AWS::EC2::Types::SubnetIpv6CidrBlockAssociation loads. Is not a Failure object
ok 1390 - Amazon::AWS::EC2::Types::SubnetIpv6CidrBlockAssociation exists
ok 1391 - Amazon::AWS::EC2::Types::SubnetIpv6CidrBlockAssociation can be populated
ok 1392 - Amazon::AWS::EC2::Types::SubnetIpv6CidrBlockAssociation serializes ok
ok 1393 - Amazon::AWS::EC2::Types::SubnetIpv6CidrBlockAssociation deseralizes ok
# associationId
# ipv6CidrBlock
# ipv6CidrBlockState
# state
not ok 1394 - Amazon::AWS::EC2::Types::SubnetIpv6CidrBlockAssociation compares ok
# Failed test 'Amazon::AWS::EC2::Types::SubnetIpv6CidrBlockAssociation compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# associationId, ipv6CidrBlock, ipv6CidrBlockState
# ipv6CidrBlockState -- Str
# Setting ipv6CidrBlockState to Amazon::AWS::EC2::Types::SubnetCidrBlockState.new(state => Str, statusMessage => Str)
ok 1395 - Changed Amazon::AWS::EC2::Types::SubnetIpv6CidrBlockAssociation fails eqv
ok 1396 - Amazon::AWS::EC2::Types::SuccessfulInstanceCreditSpecificationItem loads. Is not a Failure object
ok 1397 - Amazon::AWS::EC2::Types::SuccessfulInstanceCreditSpecificationItem exists
ok 1398 - Amazon::AWS::EC2::Types::SuccessfulInstanceCreditSpecificationItem can be populated
ok 1399 - Amazon::AWS::EC2::Types::SuccessfulInstanceCreditSpecificationItem serializes ok
ok 1400 - Amazon::AWS::EC2::Types::SuccessfulInstanceCreditSpecificationItem deseralizes ok
# instanceId
ok 1401 - Amazon::AWS::EC2::Types::SuccessfulInstanceCreditSpecificationItem compares ok
# CHANGE!
# vicselect
# instanceId
# instanceId -- Str
# Setting instanceId to syzygy!SvTwrUuhiBRuddlUFoSNRYhYaeWeM
ok 1402 - Changed Amazon::AWS::EC2::Types::SuccessfulInstanceCreditSpecificationItem fails eqv
ok 1403 - Amazon::AWS::EC2::Types::Tag loads. Is not a Failure object
ok 1404 - Amazon::AWS::EC2::Types::Tag exists
ok 1405 - Amazon::AWS::EC2::Types::Tag can be populated
ok 1406 - Amazon::AWS::EC2::Types::Tag serializes ok
ok 1407 - Amazon::AWS::EC2::Types::Tag deseralizes ok
# Key
# key
# Value
# value
ok 1408 - Amazon::AWS::EC2::Types::Tag compares ok
# CHANGE!
# vicselect
# Key, key, Value, value
# Value -- Str
# Setting Value to syzygy!tFlLcUshliPBjYlAf
ok 1409 - Changed Amazon::AWS::EC2::Types::Tag fails eqv
ok 1410 - Amazon::AWS::EC2::Types::TagDescription loads. Is not a Failure object
ok 1411 - Amazon::AWS::EC2::Types::TagDescription exists
ok 1412 - Amazon::AWS::EC2::Types::TagDescription can be populated
ok 1413 - Amazon::AWS::EC2::Types::TagDescription serializes ok
ok 1414 - Amazon::AWS::EC2::Types::TagDescription deseralizes ok
# key
# resourceId
# resourceType
# value
ok 1415 - Amazon::AWS::EC2::Types::TagDescription compares ok
# CHANGE!
# vicselect
# key, resourceId, resourceType, value
# key -- Str
# Setting key to syzygy!qoKqEFzuWoFzYBernaVzkaIrzUvz
ok 1416 - Changed Amazon::AWS::EC2::Types::TagDescription fails eqv
ok 1417 - Amazon::AWS::EC2::Types::TagSpecification loads. Is not a Failure object
ok 1418 - Amazon::AWS::EC2::Types::TagSpecification exists
ok 1419 - Amazon::AWS::EC2::Types::TagSpecification can be populated
ok 1420 - Amazon::AWS::EC2::Types::TagSpecification serializes ok
ok 1421 - Amazon::AWS::EC2::Types::TagSpecification deseralizes ok
# ResourceType
# Tags
Amazon::AWS::EC2::Types::Tag.new(Key => "XBnMDPhRxcYZnynAfqnRo", key => "peBCQCFiqwei", Value => "oWkpSvIoGdYafu", value => "nBPKNWujUFuChHIzAsLjE")
Amazon::AWS::EC2::Types::Tag.new(Key => "XBnMDPhRxcYZnynAfqnRo", key => "peBCQCFiqwei", Value => "oWkpSvIoGdYafu", value => "nBPKNWujUFuChHIzAsLjE")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "MmFFRfocsjoAQydNhp", key => "QQVjWoMjSnlMprwSp", Value => "VdMLoOtAhcSdHBH", value => "TuOqZSPQvAiFxbkenXJDYdnUwOmF")
Amazon::AWS::EC2::Types::Tag.new(Key => "MmFFRfocsjoAQydNhp", key => "QQVjWoMjSnlMprwSp", Value => "VdMLoOtAhcSdHBH", value => "TuOqZSPQvAiFxbkenXJDYdnUwOmF")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "YweZTeNLjOHTnjenqpsmFV", key => "xuMNZeyB", Value => "IdEinDfJIWtTpqJsnLeaIgIurbc", value => "GYUjVCQSFIIlLIHYywJcNjxpiJly")
Amazon::AWS::EC2::Types::Tag.new(Key => "YweZTeNLjOHTnjenqpsmFV", key => "xuMNZeyB", Value => "IdEinDfJIWtTpqJsnLeaIgIurbc", value => "GYUjVCQSFIIlLIHYywJcNjxpiJly")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "icAPqXzeVOxvzwpLnYqTQvkENJ", key => "kkFWJpLkf", Value => "zVKMmkpoaXFMeChEIjBzuiNsVoDaF", value => "qDzPFBLRpAEgWobpJRlfkzeF")
Amazon::AWS::EC2::Types::Tag.new(Key => "icAPqXzeVOxvzwpLnYqTQvkENJ", key => "kkFWJpLkf", Value => "zVKMmkpoaXFMeChEIjBzuiNsVoDaF", value => "qDzPFBLRpAEgWobpJRlfkzeF")
# Key
# key
# Value
# value
ok 1422 - Amazon::AWS::EC2::Types::TagSpecification compares ok
# CHANGE!
# vicselect
# ResourceType, Tags
# ResourceType -- Str
# Setting ResourceType to syzygy!client
ok 1423 - Changed Amazon::AWS::EC2::Types::TagSpecification fails eqv
ok 1424 - Amazon::AWS::EC2::Types::TargetCapacitySpecification loads. Is not a Failure object
ok 1425 - Amazon::AWS::EC2::Types::TargetCapacitySpecification exists
ok 1426 - Amazon::AWS::EC2::Types::TargetCapacitySpecification can be populated
ok 1427 - Amazon::AWS::EC2::Types::TargetCapacitySpecification serializes ok
ok 1428 - Amazon::AWS::EC2::Types::TargetCapacitySpecification deseralizes ok
# defaultTargetCapacityType
# onDemandTargetCapacity
# spotTargetCapacity
# totalTargetCapacity
ok 1429 - Amazon::AWS::EC2::Types::TargetCapacitySpecification compares ok
# CHANGE!
# vicselect
# defaultTargetCapacityType, onDemandTargetCapacity, spotTargetCapacity, totalTargetCapacity
# totalTargetCapacity -- Str
# Setting totalTargetCapacity to 31
ok 1430 - Changed Amazon::AWS::EC2::Types::TargetCapacitySpecification fails eqv
ok 1431 - Amazon::AWS::EC2::Types::TargetCapacitySpecificationRequest loads. Is not a Failure object
ok 1432 - Amazon::AWS::EC2::Types::TargetCapacitySpecificationRequest exists
ok 1433 - Amazon::AWS::EC2::Types::TargetCapacitySpecificationRequest can be populated
ok 1434 - Amazon::AWS::EC2::Types::TargetCapacitySpecificationRequest serializes ok
ok 1435 - Amazon::AWS::EC2::Types::TargetCapacitySpecificationRequest deseralizes ok
# DefaultTargetCapacityType
# OnDemandTargetCapacity
# SpotTargetCapacity
# TotalTargetCapacity
ok 1436 - Amazon::AWS::EC2::Types::TargetCapacitySpecificationRequest compares ok
# CHANGE!
# vicselect
# DefaultTargetCapacityType, OnDemandTargetCapacity, SpotTargetCapacity, TotalTargetCapacity
# TotalTargetCapacity -- Str
# Setting TotalTargetCapacity to 17
ok 1437 - Changed Amazon::AWS::EC2::Types::TargetCapacitySpecificationRequest fails eqv
ok 1438 - Amazon::AWS::EC2::Types::TargetConfiguration loads. Is not a Failure object
ok 1439 - Amazon::AWS::EC2::Types::TargetConfiguration exists
ok 1440 - Amazon::AWS::EC2::Types::TargetConfiguration can be populated
ok 1441 - Amazon::AWS::EC2::Types::TargetConfiguration serializes ok
ok 1442 - Amazon::AWS::EC2::Types::TargetConfiguration deseralizes ok
# instanceCount
# offeringId
ok 1443 - Amazon::AWS::EC2::Types::TargetConfiguration compares ok
# CHANGE!
# vicselect
# instanceCount, offeringId
# instanceCount -- Str
# Setting instanceCount to 19
ok 1444 - Changed Amazon::AWS::EC2::Types::TargetConfiguration fails eqv
ok 1445 - Amazon::AWS::EC2::Types::TargetConfigurationRequest loads. Is not a Failure object
ok 1446 - Amazon::AWS::EC2::Types::TargetConfigurationRequest exists
ok 1447 - Amazon::AWS::EC2::Types::TargetConfigurationRequest can be populated
ok 1448 - Amazon::AWS::EC2::Types::TargetConfigurationRequest serializes ok
ok 1449 - Amazon::AWS::EC2::Types::TargetConfigurationRequest deseralizes ok
# InstanceCount
# OfferingId
ok 1450 - Amazon::AWS::EC2::Types::TargetConfigurationRequest compares ok
# CHANGE!
# vicselect
# InstanceCount, OfferingId
# InstanceCount -- Str
# Setting InstanceCount to 15
ok 1451 - Changed Amazon::AWS::EC2::Types::TargetConfigurationRequest fails eqv
ok 1452 - Amazon::AWS::EC2::Types::TargetGroup loads. Is not a Failure object
ok 1453 - Amazon::AWS::EC2::Types::TargetGroup exists
ok 1454 - Amazon::AWS::EC2::Types::TargetGroup can be populated
ok 1455 - Amazon::AWS::EC2::Types::TargetGroup serializes ok
ok 1456 - Amazon::AWS::EC2::Types::TargetGroup deseralizes ok
# Arn
# arn
ok 1457 - Amazon::AWS::EC2::Types::TargetGroup compares ok
# CHANGE!
# vicselect
# Arn, arn
# arn -- Str
# Setting arn to syzygy!dndiocv
ok 1458 - Changed Amazon::AWS::EC2::Types::TargetGroup fails eqv
ok 1459 - Amazon::AWS::EC2::Types::TargetGroupsConfig loads. Is not a Failure object
ok 1460 - Amazon::AWS::EC2::Types::TargetGroupsConfig exists
ok 1461 - Amazon::AWS::EC2::Types::TargetGroupsConfig can be populated
ok 1462 - Amazon::AWS::EC2::Types::TargetGroupsConfig serializes ok
ok 1463 - Amazon::AWS::EC2::Types::TargetGroupsConfig deseralizes ok
# TargetGroups
Amazon::AWS::EC2::Types::TargetGroup.new(Arn => "qzwYGMipMevlnZixn", arn => "dVBdmZSbrYFFmUrgCtPE")
Amazon::AWS::EC2::Types::TargetGroup.new(Arn => "qzwYGMipMevlnZixn", arn => "dVBdmZSbrYFFmUrgCtPE")
# Arn
# arn
Amazon::AWS::EC2::Types::TargetGroup.new(Arn => "LNeXnRenfYGHGax", arn => "WmttxbqK")
Amazon::AWS::EC2::Types::TargetGroup.new(Arn => "LNeXnRenfYGHGax", arn => "WmttxbqK")
# Arn
# arn
# targetGroups
ok 1464 - Amazon::AWS::EC2::Types::TargetGroupsConfig compares ok
# CHANGE!
# vicselect
# TargetGroups, targetGroups
# targetGroups -- Str
# Setting targetGroups to []
# Type check failed in assignment to @!targetGroups; expected Amazon::AWS::EC2::Types::TargetGroup but got Array[Amazon::AWS::EC2::Types::TargetGroup] (Array[Amazon::AWS::EC2::Types::TargetGroup].new())
ok 1465 - Amazon::AWS::EC2::Types::TargetReservationValue loads. Is not a Failure object
ok 1466 - Amazon::AWS::EC2::Types::TargetReservationValue exists
ok 1467 - Amazon::AWS::EC2::Types::TargetReservationValue can be populated
ok 1468 - Amazon::AWS::EC2::Types::TargetReservationValue serializes ok
ok 1469 - Amazon::AWS::EC2::Types::TargetReservationValue deseralizes ok
# reservationValue
# hourlyPrice
not ok 1470 - Amazon::AWS::EC2::Types::TargetReservationValue compares ok
# Failed test 'Amazon::AWS::EC2::Types::TargetReservationValue compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# reservationValue, targetConfiguration
# reservationValue -- Str
# Setting reservationValue to Amazon::AWS::EC2::Types::ReservationValue.new(hourlyPrice => Str, remainingTotalValue => Str, remainingUpfrontValue => Str)
ok 1471 - Changed Amazon::AWS::EC2::Types::TargetReservationValue fails eqv
ok 1472 - Amazon::AWS::EC2::Types::TerminateConnectionStatus loads. Is not a Failure object
ok 1473 - Amazon::AWS::EC2::Types::TerminateConnectionStatus exists
ok 1474 - Amazon::AWS::EC2::Types::TerminateConnectionStatus can be populated
ok 1475 - Amazon::AWS::EC2::Types::TerminateConnectionStatus serializes ok
ok 1476 - Amazon::AWS::EC2::Types::TerminateConnectionStatus deseralizes ok
# connectionId
# currentStatus
# code
not ok 1477 - Amazon::AWS::EC2::Types::TerminateConnectionStatus compares ok
# Failed test 'Amazon::AWS::EC2::Types::TerminateConnectionStatus compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# connectionId, currentStatus, previousStatus
# currentStatus -- Str
# Setting currentStatus to Amazon::AWS::EC2::Types::ClientVpnConnectionStatus.new(code => Str, message => Str)
ok 1478 - Changed Amazon::AWS::EC2::Types::TerminateConnectionStatus fails eqv
ok 1479 - Amazon::AWS::EC2::Types::TransitGatewayAssociation loads. Is not a Failure object
ok 1480 - Amazon::AWS::EC2::Types::TransitGatewayAssociation exists
ok 1481 - Amazon::AWS::EC2::Types::TransitGatewayAssociation can be populated
ok 1482 - Amazon::AWS::EC2::Types::TransitGatewayAssociation serializes ok
ok 1483 - Amazon::AWS::EC2::Types::TransitGatewayAssociation deseralizes ok
# resourceId
# resourceType
# state
# transitGatewayAttachmentId
# transitGatewayRouteTableId
ok 1484 - Amazon::AWS::EC2::Types::TransitGatewayAssociation compares ok
# CHANGE!
# vicselect
# resourceId, resourceType, state, transitGatewayAttachmentId, transitGatewayRouteTableId
# transitGatewayAttachmentId -- Str
# Setting transitGatewayAttachmentId to syzygy!OvVcEYAIXnxL
ok 1485 - Changed Amazon::AWS::EC2::Types::TransitGatewayAssociation fails eqv
ok 1486 - Amazon::AWS::EC2::Types::TransitGatewayAttachmentAssociation loads. Is not a Failure object
ok 1487 - Amazon::AWS::EC2::Types::TransitGatewayAttachmentAssociation exists
ok 1488 - Amazon::AWS::EC2::Types::TransitGatewayAttachmentAssociation can be populated
ok 1489 - Amazon::AWS::EC2::Types::TransitGatewayAttachmentAssociation serializes ok
ok 1490 - Amazon::AWS::EC2::Types::TransitGatewayAttachmentAssociation deseralizes ok
# state
# transitGatewayRouteTableId
ok 1491 - Amazon::AWS::EC2::Types::TransitGatewayAttachmentAssociation compares ok
# CHANGE!
# vicselect
# state, transitGatewayRouteTableId
# transitGatewayRouteTableId -- Str
# Setting transitGatewayRouteTableId to syzygy!kTHjjxKOJSLoLLaJRxpgEZ
ok 1492 - Changed Amazon::AWS::EC2::Types::TransitGatewayAttachmentAssociation fails eqv
ok 1493 - Amazon::AWS::EC2::Types::TransitGatewayAttachmentPropagation loads. Is not a Failure object
ok 1494 - Amazon::AWS::EC2::Types::TransitGatewayAttachmentPropagation exists
ok 1495 - Amazon::AWS::EC2::Types::TransitGatewayAttachmentPropagation can be populated
ok 1496 - Amazon::AWS::EC2::Types::TransitGatewayAttachmentPropagation serializes ok
ok 1497 - Amazon::AWS::EC2::Types::TransitGatewayAttachmentPropagation deseralizes ok
# state
# transitGatewayRouteTableId
ok 1498 - Amazon::AWS::EC2::Types::TransitGatewayAttachmentPropagation compares ok
# CHANGE!
# vicselect
# state, transitGatewayRouteTableId
# state -- Str
# Setting state to syzygy!disabled
ok 1499 - Changed Amazon::AWS::EC2::Types::TransitGatewayAttachmentPropagation fails eqv
ok 1500 - Amazon::AWS::EC2::Types::TransitGatewayOptions loads. Is not a Failure object
ok 1501 - Amazon::AWS::EC2::Types::TransitGatewayOptions exists
ok 1502 - Amazon::AWS::EC2::Types::TransitGatewayOptions can be populated
ok 1503 - Amazon::AWS::EC2::Types::TransitGatewayOptions serializes ok
ok 1504 - Amazon::AWS::EC2::Types::TransitGatewayOptions deseralizes ok
# amazonSideAsn
# associationDefaultRouteTableId
# autoAcceptSharedAttachments
# defaultRouteTableAssociation
# defaultRouteTablePropagation
# dnsSupport
# propagationDefaultRouteTableId
# vpnEcmpSupport
ok 1505 - Amazon::AWS::EC2::Types::TransitGatewayOptions compares ok
# CHANGE!
# vicselect
# amazonSideAsn, associationDefaultRouteTableId, autoAcceptSharedAttachments, defaultRouteTableAssociation, defaultRouteTablePropagation, dnsSupport, propagationDefaultRouteTableId, vpnEcmpSupport
# propagationDefaultRouteTableId -- Str
# Setting propagationDefaultRouteTableId to syzygy!kELJkrxDEMrkVLOr
ok 1506 - Changed Amazon::AWS::EC2::Types::TransitGatewayOptions fails eqv
ok 1507 - Amazon::AWS::EC2::Types::TransitGatewayPropagation loads. Is not a Failure object
ok 1508 - Amazon::AWS::EC2::Types::TransitGatewayPropagation exists
ok 1509 - Amazon::AWS::EC2::Types::TransitGatewayPropagation can be populated
ok 1510 - Amazon::AWS::EC2::Types::TransitGatewayPropagation serializes ok
ok 1511 - Amazon::AWS::EC2::Types::TransitGatewayPropagation deseralizes ok
# resourceId
# resourceType
# state
# transitGatewayAttachmentId
# transitGatewayRouteTableId
ok 1512 - Amazon::AWS::EC2::Types::TransitGatewayPropagation compares ok
# CHANGE!
# vicselect
# resourceId, resourceType, state, transitGatewayAttachmentId, transitGatewayRouteTableId
# resourceId -- Str
# Setting resourceId to syzygy!qiHDtDqGPuaPiRVILCDHKPt
ok 1513 - Changed Amazon::AWS::EC2::Types::TransitGatewayPropagation fails eqv
ok 1514 - Amazon::AWS::EC2::Types::TransitGatewayRequestOptions loads. Is not a Failure object
ok 1515 - Amazon::AWS::EC2::Types::TransitGatewayRequestOptions exists
ok 1516 - Amazon::AWS::EC2::Types::TransitGatewayRequestOptions can be populated
ok 1517 - Amazon::AWS::EC2::Types::TransitGatewayRequestOptions serializes ok
ok 1518 - Amazon::AWS::EC2::Types::TransitGatewayRequestOptions deseralizes ok
# AmazonSideAsn
# AutoAcceptSharedAttachments
# DefaultRouteTableAssociation
# DefaultRouteTablePropagation
# DnsSupport
# VpnEcmpSupport
ok 1519 - Amazon::AWS::EC2::Types::TransitGatewayRequestOptions compares ok
# CHANGE!
# vicselect
# AmazonSideAsn, AutoAcceptSharedAttachments, DefaultRouteTableAssociation, DefaultRouteTablePropagation, DnsSupport, VpnEcmpSupport
# AutoAcceptSharedAttachments -- Str
# Setting AutoAcceptSharedAttachments to syzygy!enable
ok 1520 - Changed Amazon::AWS::EC2::Types::TransitGatewayRequestOptions fails eqv
ok 1521 - Amazon::AWS::EC2::Types::TransitGatewayRouteAttachment loads. Is not a Failure object
ok 1522 - Amazon::AWS::EC2::Types::TransitGatewayRouteAttachment exists
ok 1523 - Amazon::AWS::EC2::Types::TransitGatewayRouteAttachment can be populated
ok 1524 - Amazon::AWS::EC2::Types::TransitGatewayRouteAttachment serializes ok
ok 1525 - Amazon::AWS::EC2::Types::TransitGatewayRouteAttachment deseralizes ok
# resourceId
# resourceType
# transitGatewayAttachmentId
ok 1526 - Amazon::AWS::EC2::Types::TransitGatewayRouteAttachment compares ok
# CHANGE!
# vicselect
# resourceId, resourceType, transitGatewayAttachmentId
# transitGatewayAttachmentId -- Str
# Setting transitGatewayAttachmentId to syzygy!ArxIvXOXkXvbUcujxvE
ok 1527 - Changed Amazon::AWS::EC2::Types::TransitGatewayRouteAttachment fails eqv
ok 1528 - Amazon::AWS::EC2::Types::TransitGatewayRouteTable loads. Is not a Failure object
ok 1529 - Amazon::AWS::EC2::Types::TransitGatewayRouteTable exists
ok 1530 - Amazon::AWS::EC2::Types::TransitGatewayRouteTable can be populated
ok 1531 - Amazon::AWS::EC2::Types::TransitGatewayRouteTable serializes ok
ok 1532 - Amazon::AWS::EC2::Types::TransitGatewayRouteTable deseralizes ok
# creationTime
# defaultAssociationRouteTable
# defaultPropagationRouteTable
# state
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "trsAulmYuNXx", key => "cGeRPwoBuxJkUIVHiHesmvreziJUC", Value => "zsuRNPHClC", value => "ZbSoVatyYteXTHryoVbJroEgTPMci")
Amazon::AWS::EC2::Types::Tag.new(Key => "trsAulmYuNXx", key => "cGeRPwoBuxJkUIVHiHesmvreziJUC", Value => "zsuRNPHClC", value => "ZbSoVatyYteXTHryoVbJroEgTPMci")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "TLMumnKcKtoHSfBWbyyV", key => "CijtGMDteXiLSzzZCILdUHOiViXPiT", Value => "GtgpwAtTOKRvCr", value => "fVxBxyWzokfLNcfexvdvCLuquqqzgh")
Amazon::AWS::EC2::Types::Tag.new(Key => "TLMumnKcKtoHSfBWbyyV", key => "CijtGMDteXiLSzzZCILdUHOiViXPiT", Value => "GtgpwAtTOKRvCr", value => "fVxBxyWzokfLNcfexvdvCLuquqqzgh")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "qqPIUyvpiXSSKRQ", key => "jQUfSZyCAnGjJDdSewrNgFTaUamtg", Value => "ISySFnqAYbAHgw", value => "WkiZatAU")
Amazon::AWS::EC2::Types::Tag.new(Key => "qqPIUyvpiXSSKRQ", key => "jQUfSZyCAnGjJDdSewrNgFTaUamtg", Value => "ISySFnqAYbAHgw", value => "WkiZatAU")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "IQaTXFIklJhciwYNiWoRWNUpjeAFF", key => "iYsPSNc", Value => "kLBlAeQAVCbjLbQkUMSL", value => "WUjLbvw")
Amazon::AWS::EC2::Types::Tag.new(Key => "IQaTXFIklJhciwYNiWoRWNUpjeAFF", key => "iYsPSNc", Value => "kLBlAeQAVCbjLbQkUMSL", value => "WUjLbvw")
# Key
# key
# Value
# value
# transitGatewayId
# transitGatewayRouteTableId
ok 1533 - Amazon::AWS::EC2::Types::TransitGatewayRouteTable compares ok
# CHANGE!
# vicselect
# creationTime, defaultAssociationRouteTable, defaultPropagationRouteTable, state, tags, transitGatewayId, transitGatewayRouteTableId
# creationTime -- Str
# Setting creationTime to syzygy!aLwPPbGRmgjNAjSk
ok 1534 - Changed Amazon::AWS::EC2::Types::TransitGatewayRouteTable fails eqv
ok 1535 - Amazon::AWS::EC2::Types::TransitGatewayRouteTableAssociation loads. Is not a Failure object
ok 1536 - Amazon::AWS::EC2::Types::TransitGatewayRouteTableAssociation exists
ok 1537 - Amazon::AWS::EC2::Types::TransitGatewayRouteTableAssociation can be populated
ok 1538 - Amazon::AWS::EC2::Types::TransitGatewayRouteTableAssociation serializes ok
ok 1539 - Amazon::AWS::EC2::Types::TransitGatewayRouteTableAssociation deseralizes ok
# resourceId
# resourceType
# state
# transitGatewayAttachmentId
ok 1540 - Amazon::AWS::EC2::Types::TransitGatewayRouteTableAssociation compares ok
# CHANGE!
# vicselect
# resourceId, resourceType, state, transitGatewayAttachmentId
# resourceId -- Str
# Setting resourceId to syzygy!GLOrUgQGnYgIbUKLyFewCVNjI
ok 1541 - Changed Amazon::AWS::EC2::Types::TransitGatewayRouteTableAssociation fails eqv
ok 1542 - Amazon::AWS::EC2::Types::TransitGatewayRouteTablePropagation loads. Is not a Failure object
ok 1543 - Amazon::AWS::EC2::Types::TransitGatewayRouteTablePropagation exists
ok 1544 - Amazon::AWS::EC2::Types::TransitGatewayRouteTablePropagation can be populated
ok 1545 - Amazon::AWS::EC2::Types::TransitGatewayRouteTablePropagation serializes ok
ok 1546 - Amazon::AWS::EC2::Types::TransitGatewayRouteTablePropagation deseralizes ok
# resourceId
# resourceType
# state
# transitGatewayAttachmentId
ok 1547 - Amazon::AWS::EC2::Types::TransitGatewayRouteTablePropagation compares ok
# CHANGE!
# vicselect
# resourceId, resourceType, state, transitGatewayAttachmentId
# resourceType -- Str
# Setting resourceType to syzygy!vpc
ok 1548 - Changed Amazon::AWS::EC2::Types::TransitGatewayRouteTablePropagation fails eqv
ok 1549 - Amazon::AWS::EC2::Types::TransitGatewayVpcAttachmentOptions loads. Is not a Failure object
ok 1550 - Amazon::AWS::EC2::Types::TransitGatewayVpcAttachmentOptions exists
ok 1551 - Amazon::AWS::EC2::Types::TransitGatewayVpcAttachmentOptions can be populated
ok 1552 - Amazon::AWS::EC2::Types::TransitGatewayVpcAttachmentOptions serializes ok
ok 1553 - Amazon::AWS::EC2::Types::TransitGatewayVpcAttachmentOptions deseralizes ok
# dnsSupport
# ipv6Support
ok 1554 - Amazon::AWS::EC2::Types::TransitGatewayVpcAttachmentOptions compares ok
# CHANGE!
# vicselect
# dnsSupport, ipv6Support
# ipv6Support -- Str
# Setting ipv6Support to syzygy!disable
ok 1555 - Changed Amazon::AWS::EC2::Types::TransitGatewayVpcAttachmentOptions fails eqv
ok 1556 - Amazon::AWS::EC2::Types::UnsuccessfulInstanceCreditSpecificationItemError loads. Is not a Failure object
ok 1557 - Amazon::AWS::EC2::Types::UnsuccessfulInstanceCreditSpecificationItemError exists
ok 1558 - Amazon::AWS::EC2::Types::UnsuccessfulInstanceCreditSpecificationItemError can be populated
ok 1559 - Amazon::AWS::EC2::Types::UnsuccessfulInstanceCreditSpecificationItemError serializes ok
ok 1560 - Amazon::AWS::EC2::Types::UnsuccessfulInstanceCreditSpecificationItemError deseralizes ok
# code
# message
ok 1561 - Amazon::AWS::EC2::Types::UnsuccessfulInstanceCreditSpecificationItemError compares ok
# CHANGE!
# vicselect
# code, message
# message -- Str
# Setting message to syzygy!bSjrufxqYPGtZnoe
ok 1562 - Changed Amazon::AWS::EC2::Types::UnsuccessfulInstanceCreditSpecificationItemError fails eqv
ok 1563 - Amazon::AWS::EC2::Types::UnsuccessfulItemError loads. Is not a Failure object
ok 1564 - Amazon::AWS::EC2::Types::UnsuccessfulItemError exists
ok 1565 - Amazon::AWS::EC2::Types::UnsuccessfulItemError can be populated
ok 1566 - Amazon::AWS::EC2::Types::UnsuccessfulItemError serializes ok
ok 1567 - Amazon::AWS::EC2::Types::UnsuccessfulItemError deseralizes ok
# code
# message
ok 1568 - Amazon::AWS::EC2::Types::UnsuccessfulItemError compares ok
# CHANGE!
# vicselect
# code, message
# code -- Str
# Setting code to syzygy!bFIVviqijiwaXBPbYFnHdujRFF
ok 1569 - Changed Amazon::AWS::EC2::Types::UnsuccessfulItemError fails eqv
ok 1570 - Amazon::AWS::EC2::Types::UserBucket loads. Is not a Failure object
ok 1571 - Amazon::AWS::EC2::Types::UserBucket exists
ok 1572 - Amazon::AWS::EC2::Types::UserBucket can be populated
ok 1573 - Amazon::AWS::EC2::Types::UserBucket serializes ok
ok 1574 - Amazon::AWS::EC2::Types::UserBucket deseralizes ok
# S3Bucket
# S3Key
ok 1575 - Amazon::AWS::EC2::Types::UserBucket compares ok
# CHANGE!
# vicselect
# S3Bucket, S3Key
# S3Key -- Str
# Setting S3Key to syzygy!cPPOagrrefYBtcsrjbBGdVVTunLRI
ok 1576 - Changed Amazon::AWS::EC2::Types::UserBucket fails eqv
ok 1577 - Amazon::AWS::EC2::Types::UserBucketDetails loads. Is not a Failure object
ok 1578 - Amazon::AWS::EC2::Types::UserBucketDetails exists
ok 1579 - Amazon::AWS::EC2::Types::UserBucketDetails can be populated
ok 1580 - Amazon::AWS::EC2::Types::UserBucketDetails serializes ok
ok 1581 - Amazon::AWS::EC2::Types::UserBucketDetails deseralizes ok
# s3Bucket
# s3Key
ok 1582 - Amazon::AWS::EC2::Types::UserBucketDetails compares ok
# CHANGE!
# vicselect
# s3Bucket, s3Key
# s3Bucket -- Str
# Setting s3Bucket to syzygy!grlrgaw
ok 1583 - Changed Amazon::AWS::EC2::Types::UserBucketDetails fails eqv
ok 1584 - Amazon::AWS::EC2::Types::UserData loads. Is not a Failure object
ok 1585 - Amazon::AWS::EC2::Types::UserData exists
ok 1586 - Amazon::AWS::EC2::Types::UserData can be populated
ok 1587 - Amazon::AWS::EC2::Types::UserData serializes ok
ok 1588 - Amazon::AWS::EC2::Types::UserData deseralizes ok
# Data
ok 1589 - Amazon::AWS::EC2::Types::UserData compares ok
# CHANGE!
# vicselect
# Data
# Data -- Str
# Setting Data to syzygy!JSffYShSClgaumBtFatDqXnLspkaJf
ok 1590 - Changed Amazon::AWS::EC2::Types::UserData fails eqv
ok 1591 - Amazon::AWS::EC2::Types::UserIdGroupPair loads. Is not a Failure object
ok 1592 - Amazon::AWS::EC2::Types::UserIdGroupPair exists
ok 1593 - Amazon::AWS::EC2::Types::UserIdGroupPair can be populated
ok 1594 - Amazon::AWS::EC2::Types::UserIdGroupPair serializes ok
ok 1595 - Amazon::AWS::EC2::Types::UserIdGroupPair deseralizes ok
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
ok 1596 - Amazon::AWS::EC2::Types::UserIdGroupPair compares ok
# CHANGE!
# vicselect
# Description, description, GroupId, groupId, GroupName, groupName, PeeringStatus, peeringStatus, UserId, userId, VpcId, vpcId, VpcPeeringConnectionId, vpcPeeringConnectionId
# Description -- Str
# Setting Description to syzygy!dLEsRrhHYAePioLJOLPnKyW
ok 1597 - Changed Amazon::AWS::EC2::Types::UserIdGroupPair fails eqv
ok 1598 - Amazon::AWS::EC2::Types::VgwTelemetry loads. Is not a Failure object
ok 1599 - Amazon::AWS::EC2::Types::VgwTelemetry exists
ok 1600 - Amazon::AWS::EC2::Types::VgwTelemetry can be populated
ok 1601 - Amazon::AWS::EC2::Types::VgwTelemetry serializes ok
ok 1602 - Amazon::AWS::EC2::Types::VgwTelemetry deseralizes ok
# acceptedRouteCount
# lastStatusChange
# outsideIpAddress
# status
# statusMessage
ok 1603 - Amazon::AWS::EC2::Types::VgwTelemetry compares ok
# CHANGE!
# vicselect
# acceptedRouteCount, lastStatusChange, outsideIpAddress, status, statusMessage
# acceptedRouteCount -- Str
# Setting acceptedRouteCount to 27
ok 1604 - Changed Amazon::AWS::EC2::Types::VgwTelemetry fails eqv
ok 1605 - Amazon::AWS::EC2::Types::VolumeAttachment loads. Is not a Failure object
ok 1606 - Amazon::AWS::EC2::Types::VolumeAttachment exists
ok 1607 - Amazon::AWS::EC2::Types::VolumeAttachment can be populated
ok 1608 - Amazon::AWS::EC2::Types::VolumeAttachment serializes ok
ok 1609 - Amazon::AWS::EC2::Types::VolumeAttachment deseralizes ok
# attachTime
# deleteOnTermination
# device
# instanceId
# status
# volumeId
ok 1610 - Amazon::AWS::EC2::Types::VolumeAttachment compares ok
# CHANGE!
# vicselect
# attachTime, deleteOnTermination, device, instanceId, status, volumeId
# status -- Str
# Setting status to syzygy!detaching
ok 1611 - Changed Amazon::AWS::EC2::Types::VolumeAttachment fails eqv
ok 1612 - Amazon::AWS::EC2::Types::VolumeDetail loads. Is not a Failure object
ok 1613 - Amazon::AWS::EC2::Types::VolumeDetail exists
ok 1614 - Amazon::AWS::EC2::Types::VolumeDetail can be populated
ok 1615 - Amazon::AWS::EC2::Types::VolumeDetail serializes ok
ok 1616 - Amazon::AWS::EC2::Types::VolumeDetail deseralizes ok
# Size
ok 1617 - Amazon::AWS::EC2::Types::VolumeDetail compares ok
# CHANGE!
# vicselect
# Size
# Size -- Str
# Setting Size to 26
ok 1618 - Changed Amazon::AWS::EC2::Types::VolumeDetail fails eqv
ok 1619 - Amazon::AWS::EC2::Types::VolumeModification loads. Is not a Failure object
ok 1620 - Amazon::AWS::EC2::Types::VolumeModification exists
ok 1621 - Amazon::AWS::EC2::Types::VolumeModification can be populated
ok 1622 - Amazon::AWS::EC2::Types::VolumeModification serializes ok
ok 1623 - Amazon::AWS::EC2::Types::VolumeModification deseralizes ok
# endTime
# modificationState
# originalIops
# originalSize
# originalVolumeType
# progress
# startTime
# statusMessage
# targetIops
# targetSize
# targetVolumeType
# volumeId
ok 1624 - Amazon::AWS::EC2::Types::VolumeModification compares ok
# CHANGE!
# vicselect
# endTime, modificationState, originalIops, originalSize, originalVolumeType, progress, startTime, statusMessage, targetIops, targetSize, targetVolumeType, volumeId
# targetSize -- Str
# Setting targetSize to 30
ok 1625 - Changed Amazon::AWS::EC2::Types::VolumeModification fails eqv
ok 1626 - Amazon::AWS::EC2::Types::VolumeStatusAction loads. Is not a Failure object
ok 1627 - Amazon::AWS::EC2::Types::VolumeStatusAction exists
ok 1628 - Amazon::AWS::EC2::Types::VolumeStatusAction can be populated
ok 1629 - Amazon::AWS::EC2::Types::VolumeStatusAction serializes ok
ok 1630 - Amazon::AWS::EC2::Types::VolumeStatusAction deseralizes ok
# code
# description
# eventId
# eventType
ok 1631 - Amazon::AWS::EC2::Types::VolumeStatusAction compares ok
# CHANGE!
# vicselect
# code, description, eventId, eventType
# eventId -- Str
# Setting eventId to syzygy!dLNljyrTxv
ok 1632 - Changed Amazon::AWS::EC2::Types::VolumeStatusAction fails eqv
ok 1633 - Amazon::AWS::EC2::Types::VolumeStatusDetails loads. Is not a Failure object
ok 1634 - Amazon::AWS::EC2::Types::VolumeStatusDetails exists
ok 1635 - Amazon::AWS::EC2::Types::VolumeStatusDetails can be populated
ok 1636 - Amazon::AWS::EC2::Types::VolumeStatusDetails serializes ok
ok 1637 - Amazon::AWS::EC2::Types::VolumeStatusDetails deseralizes ok
# name
# status
ok 1638 - Amazon::AWS::EC2::Types::VolumeStatusDetails compares ok
# CHANGE!
# vicselect
# name, status
# name -- Str
# Setting name to syzygy!io
ok 1639 - Changed Amazon::AWS::EC2::Types::VolumeStatusDetails fails eqv
ok 1640 - Amazon::AWS::EC2::Types::VolumeStatusEvent loads. Is not a Failure object
ok 1641 - Amazon::AWS::EC2::Types::VolumeStatusEvent exists
ok 1642 - Amazon::AWS::EC2::Types::VolumeStatusEvent can be populated
ok 1643 - Amazon::AWS::EC2::Types::VolumeStatusEvent serializes ok
ok 1644 - Amazon::AWS::EC2::Types::VolumeStatusEvent deseralizes ok
# description
# eventId
# eventType
# notAfter
# notBefore
ok 1645 - Amazon::AWS::EC2::Types::VolumeStatusEvent compares ok
# CHANGE!
# vicselect
# description, eventId, eventType, notAfter, notBefore
# eventId -- Str
# Setting eventId to syzygy!IyKLbTaFkxUGBiw
ok 1646 - Changed Amazon::AWS::EC2::Types::VolumeStatusEvent fails eqv
ok 1647 - Amazon::AWS::EC2::Types::VolumeStatusInfo loads. Is not a Failure object
ok 1648 - Amazon::AWS::EC2::Types::VolumeStatusInfo exists
ok 1649 - Amazon::AWS::EC2::Types::VolumeStatusInfo can be populated
ok 1650 - Amazon::AWS::EC2::Types::VolumeStatusInfo serializes ok
ok 1651 - Amazon::AWS::EC2::Types::VolumeStatusInfo deseralizes ok
# details
Amazon::AWS::EC2::Types::VolumeStatusDetails.new(name => "io", status => "opRxpqziKxHNBoECpMR")
Amazon::AWS::EC2::Types::VolumeStatusDetails.new(name => "io", status => "opRxpqziKxHNBoECpMR")
# name
# status
Amazon::AWS::EC2::Types::VolumeStatusDetails.new(name => "io", status => "TXsGRlcGVqmI")
Amazon::AWS::EC2::Types::VolumeStatusDetails.new(name => "io", status => "TXsGRlcGVqmI")
# name
# status
Amazon::AWS::EC2::Types::VolumeStatusDetails.new(name => "io", status => "vnsQo")
Amazon::AWS::EC2::Types::VolumeStatusDetails.new(name => "io", status => "vnsQo")
# name
# status
# status
ok 1652 - Amazon::AWS::EC2::Types::VolumeStatusInfo compares ok
# CHANGE!
# vicselect
# details, status
# details -- Str
# Setting details to []
# Type check failed in assignment to @!details; expected Amazon::AWS::EC2::Types::VolumeStatusDetails but got Array[Amazon::AWS::EC2::Types::VolumeStatusDetails] (Array[Amazon::AWS::EC2::Types::VolumeStatusDetails].new())
ok 1653 - Amazon::AWS::EC2::Types::VolumeStatusItem loads. Is not a Failure object
ok 1654 - Amazon::AWS::EC2::Types::VolumeStatusItem exists
ok 1655 - Amazon::AWS::EC2::Types::VolumeStatusItem can be populated
ok 1656 - Amazon::AWS::EC2::Types::VolumeStatusItem serializes ok
ok 1657 - Amazon::AWS::EC2::Types::VolumeStatusItem deseralizes ok
# actionss
# availabilityZone
# eventss
Amazon::AWS::EC2::Types::VolumeStatusEvent.new(description => "owpYxSsZuEOdg", eventId => "lKKlHEwPEutKhrRFLr", eventType => "mQeySLcZfGDiWDYlmy", notAfter => "kiFObvE", notBefore => "aTSofyckEOWL")
Amazon::AWS::EC2::Types::VolumeStatusEvent.new(description => "owpYxSsZuEOdg", eventId => "lKKlHEwPEutKhrRFLr", eventType => "mQeySLcZfGDiWDYlmy", notAfter => "kiFObvE", notBefore => "aTSofyckEOWL")
# description
# eventId
# eventType
# notAfter
# notBefore
Amazon::AWS::EC2::Types::VolumeStatusEvent.new(description => "sGAUnhCWFGKMeZncZRBwTnDeb", eventId => "ULApYlXAJtjZAwayTmdhXCtrx", eventType => "FSqyZLTLWAzrpuKubOuG", notAfter => "PSRftAKCnAVsN", notBefore => "FhqHViBDceX")
Amazon::AWS::EC2::Types::VolumeStatusEvent.new(description => "sGAUnhCWFGKMeZncZRBwTnDeb", eventId => "ULApYlXAJtjZAwayTmdhXCtrx", eventType => "FSqyZLTLWAzrpuKubOuG", notAfter => "PSRftAKCnAVsN", notBefore => "FhqHViBDceX")
# description
# eventId
# eventType
# notAfter
# notBefore
Amazon::AWS::EC2::Types::VolumeStatusEvent.new(description => "GgGAqghbwbKPnYz", eventId => "OHSXC", eventType => "mZtjFMtX", notAfter => "VCuYDrOHIrlZxyxJWMyU", notBefore => "AcArQFzCJqIiKdILIRJKuhgqk")
Amazon::AWS::EC2::Types::VolumeStatusEvent.new(description => "GgGAqghbwbKPnYz", eventId => "OHSXC", eventType => "mZtjFMtX", notAfter => "VCuYDrOHIrlZxyxJWMyU", notBefore => "AcArQFzCJqIiKdILIRJKuhgqk")
# description
# eventId
# eventType
# notAfter
# notBefore
# volumeId
# volumeStatus
# details
not ok 1658 - Amazon::AWS::EC2::Types::VolumeStatusItem compares ok
# Failed test 'Amazon::AWS::EC2::Types::VolumeStatusItem compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# actionss, availabilityZone, eventss, volumeId, volumeStatus
# availabilityZone -- Str
# Setting availabilityZone to syzygy!dIaVfsphVLyIn
ok 1659 - Changed Amazon::AWS::EC2::Types::VolumeStatusItem fails eqv
ok 1660 - Amazon::AWS::EC2::Types::VpcAttachment loads. Is not a Failure object
ok 1661 - Amazon::AWS::EC2::Types::VpcAttachment exists
ok 1662 - Amazon::AWS::EC2::Types::VpcAttachment can be populated
ok 1663 - Amazon::AWS::EC2::Types::VpcAttachment serializes ok
ok 1664 - Amazon::AWS::EC2::Types::VpcAttachment deseralizes ok
# state
# vpcId
ok 1665 - Amazon::AWS::EC2::Types::VpcAttachment compares ok
# CHANGE!
# vicselect
# state, vpcId
# state -- Str
# Setting state to syzygy!detached
ok 1666 - Changed Amazon::AWS::EC2::Types::VpcAttachment fails eqv
ok 1667 - Amazon::AWS::EC2::Types::VpcCidrBlockState loads. Is not a Failure object
ok 1668 - Amazon::AWS::EC2::Types::VpcCidrBlockState exists
ok 1669 - Amazon::AWS::EC2::Types::VpcCidrBlockState can be populated
ok 1670 - Amazon::AWS::EC2::Types::VpcCidrBlockState serializes ok
ok 1671 - Amazon::AWS::EC2::Types::VpcCidrBlockState deseralizes ok
# state
# statusMessage
ok 1672 - Amazon::AWS::EC2::Types::VpcCidrBlockState compares ok
# CHANGE!
# vicselect
# state, statusMessage
# state -- Str
# Setting state to syzygy!disassociated
ok 1673 - Changed Amazon::AWS::EC2::Types::VpcCidrBlockState fails eqv
ok 1674 - Amazon::AWS::EC2::Types::VpcClassicLink loads. Is not a Failure object
ok 1675 - Amazon::AWS::EC2::Types::VpcClassicLink exists
ok 1676 - Amazon::AWS::EC2::Types::VpcClassicLink can be populated
ok 1677 - Amazon::AWS::EC2::Types::VpcClassicLink serializes ok
ok 1678 - Amazon::AWS::EC2::Types::VpcClassicLink deseralizes ok
# classicLinkEnabled
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "ZyybJNTLKfdApQcbUH", key => "UFjhyYIUNrVEIdUcJXKbaKayrN", Value => "chGJRYTgSPREORzyouzHPcnoiIyo", value => "tEQoiAxLemHzhYXSksrQXHBiGAXeMT")
Amazon::AWS::EC2::Types::Tag.new(Key => "ZyybJNTLKfdApQcbUH", key => "UFjhyYIUNrVEIdUcJXKbaKayrN", Value => "chGJRYTgSPREORzyouzHPcnoiIyo", value => "tEQoiAxLemHzhYXSksrQXHBiGAXeMT")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "ZphMBWTtiCmlUnqFWphFsRCAe", key => "czQhjzoXoufgGTO", Value => "NTnVNVvzvlWiXOYgYxFvSZBy", value => "OQRCxU")
Amazon::AWS::EC2::Types::Tag.new(Key => "ZphMBWTtiCmlUnqFWphFsRCAe", key => "czQhjzoXoufgGTO", Value => "NTnVNVvzvlWiXOYgYxFvSZBy", value => "OQRCxU")
# Key
# key
# Value
# value
# vpcId
ok 1679 - Amazon::AWS::EC2::Types::VpcClassicLink compares ok
# CHANGE!
# vicselect
# classicLinkEnabled, tags, vpcId
# tags -- Str
# Setting tags to []
# Type check failed in assignment to @!tags; expected Amazon::AWS::EC2::Types::Tag but got Array[Amazon::AWS::EC2::Types::Tag] (Array[Amazon::AWS::EC2::Types::Tag].new())
ok 1680 - Amazon::AWS::EC2::Types::VpcEndpoint loads. Is not a Failure object
ok 1681 - Amazon::AWS::EC2::Types::VpcEndpoint exists
ok 1682 - Amazon::AWS::EC2::Types::VpcEndpoint can be populated
ok 1683 - Amazon::AWS::EC2::Types::VpcEndpoint serializes ok
ok 1684 - Amazon::AWS::EC2::Types::VpcEndpoint deseralizes ok
# creationTimestamp
# dnsEntrys
Amazon::AWS::EC2::Types::DnsEntry.new(dnsName => "VyIDMreL", hostedZoneId => "uePIUYnTWBT")
Amazon::AWS::EC2::Types::DnsEntry.new(dnsName => "VyIDMreL", hostedZoneId => "uePIUYnTWBT")
# dnsName
# hostedZoneId
Amazon::AWS::EC2::Types::DnsEntry.new(dnsName => "jgFLOELgV", hostedZoneId => "aUEZsfsH")
Amazon::AWS::EC2::Types::DnsEntry.new(dnsName => "jgFLOELgV", hostedZoneId => "aUEZsfsH")
# dnsName
# hostedZoneId
# groups
# networkInterfaceIds
NjkOSghSegHapXWNhwoCSZZIzvcJ
NjkOSghSegHapXWNhwoCSZZIzvcJ
UdVfNNi
UdVfNNi
oshpgAURPmeeMSymI
oshpgAURPmeeMSymI
ateaTEEWtTyKDTyBNbqyZGNH
ateaTEEWtTyKDTyBNbqyZGNH
# ownerId
# policyDocument
# privateDnsEnabled
# requesterManaged
# routeTableIds
# serviceName
# state
# subnetIds
MoCyKRzcKHRhvnbEoYAP
MoCyKRzcKHRhvnbEoYAP
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "kgaQCnHGik", key => "SIUWQeJ", Value => "hOdKbylro", value => "xRgsChiMKIZbYBelmJrLNPwZp")
Amazon::AWS::EC2::Types::Tag.new(Key => "kgaQCnHGik", key => "SIUWQeJ", Value => "hOdKbylro", value => "xRgsChiMKIZbYBelmJrLNPwZp")
# Key
# key
# Value
# value
# vpcEndpointId
# vpcEndpointType
# vpcId
ok 1685 - Amazon::AWS::EC2::Types::VpcEndpoint compares ok
# CHANGE!
# vicselect
# creationTimestamp, dnsEntrys, groups, networkInterfaceIds, ownerId, policyDocument, privateDnsEnabled, requesterManaged, routeTableIds, serviceName, state, subnetIds, tags, vpcEndpointId, vpcEndpointType, vpcId
# tags -- Str
# Setting tags to []
# Type check failed in assignment to @!tags; expected Amazon::AWS::EC2::Types::Tag but got Array[Amazon::AWS::EC2::Types::Tag] (Array[Amazon::AWS::EC2::Types::Tag].new())
ok 1686 - Amazon::AWS::EC2::Types::VpcEndpointConnection loads. Is not a Failure object
ok 1687 - Amazon::AWS::EC2::Types::VpcEndpointConnection exists
ok 1688 - Amazon::AWS::EC2::Types::VpcEndpointConnection can be populated
ok 1689 - Amazon::AWS::EC2::Types::VpcEndpointConnection serializes ok
ok 1690 - Amazon::AWS::EC2::Types::VpcEndpointConnection deseralizes ok
# creationTimestamp
# dnsEntrys
Amazon::AWS::EC2::Types::DnsEntry.new(dnsName => "dLqDONNJlDCMBFuRBnIxfgtUEMaOri", hostedZoneId => "jZODDFJS")
Amazon::AWS::EC2::Types::DnsEntry.new(dnsName => "dLqDONNJlDCMBFuRBnIxfgtUEMaOri", hostedZoneId => "jZODDFJS")
# dnsName
# hostedZoneId
Amazon::AWS::EC2::Types::DnsEntry.new(dnsName => "flhHlIjBJWIcQQHJMtfgAaqo", hostedZoneId => "FTXnAejxjkrXjMRkxwCHDiLuCRvpq")
Amazon::AWS::EC2::Types::DnsEntry.new(dnsName => "flhHlIjBJWIcQQHJMtfgAaqo", hostedZoneId => "FTXnAejxjkrXjMRkxwCHDiLuCRvpq")
# dnsName
# hostedZoneId
Amazon::AWS::EC2::Types::DnsEntry.new(dnsName => "ZrlgT", hostedZoneId => "cEsOleHrnJIgoNCwavE")
Amazon::AWS::EC2::Types::DnsEntry.new(dnsName => "ZrlgT", hostedZoneId => "cEsOleHrnJIgoNCwavE")
# dnsName
# hostedZoneId
Amazon::AWS::EC2::Types::DnsEntry.new(dnsName => "RLkBRLQuMCpMVobzr", hostedZoneId => "KQHeRrNgeWapRxqNzEFDumyBH")
Amazon::AWS::EC2::Types::DnsEntry.new(dnsName => "RLkBRLQuMCpMVobzr", hostedZoneId => "KQHeRrNgeWapRxqNzEFDumyBH")
# dnsName
# hostedZoneId
# networkLoadBalancerArns
uJiIBycckD
uJiIBycckD
fffgKBgYkwTxuAgRVRBHdjyzTpSoMG
fffgKBgYkwTxuAgRVRBHdjyzTpSoMG
# serviceId
# vpcEndpointId
# vpcEndpointOwner
# vpcEndpointState
ok 1691 - Amazon::AWS::EC2::Types::VpcEndpointConnection compares ok
# CHANGE!
# vicselect
# creationTimestamp, dnsEntrys, networkLoadBalancerArns, serviceId, vpcEndpointId, vpcEndpointOwner, vpcEndpointState
# serviceId -- Str
# Setting serviceId to syzygy!huMfynne
ok 1692 - Changed Amazon::AWS::EC2::Types::VpcEndpointConnection fails eqv
ok 1693 - Amazon::AWS::EC2::Types::VpcIpv6CidrBlockAssociation loads. Is not a Failure object
ok 1694 - Amazon::AWS::EC2::Types::VpcIpv6CidrBlockAssociation exists
ok 1695 - Amazon::AWS::EC2::Types::VpcIpv6CidrBlockAssociation can be populated
ok 1696 - Amazon::AWS::EC2::Types::VpcIpv6CidrBlockAssociation serializes ok
ok 1697 - Amazon::AWS::EC2::Types::VpcIpv6CidrBlockAssociation deseralizes ok
# associationId
# ipv6CidrBlock
# ipv6CidrBlockState
# state
not ok 1698 - Amazon::AWS::EC2::Types::VpcIpv6CidrBlockAssociation compares ok
# Failed test 'Amazon::AWS::EC2::Types::VpcIpv6CidrBlockAssociation compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# associationId, ipv6CidrBlock, ipv6CidrBlockState
# ipv6CidrBlock -- Str
# Setting ipv6CidrBlock to syzygy!kITtUlORJQekeaHNaFbsEkZV
ok 1699 - Changed Amazon::AWS::EC2::Types::VpcIpv6CidrBlockAssociation fails eqv
ok 1700 - Amazon::AWS::EC2::Types::VpcPeeringConnectionOptionsDescription loads. Is not a Failure object
ok 1701 - Amazon::AWS::EC2::Types::VpcPeeringConnectionOptionsDescription exists
ok 1702 - Amazon::AWS::EC2::Types::VpcPeeringConnectionOptionsDescription can be populated
ok 1703 - Amazon::AWS::EC2::Types::VpcPeeringConnectionOptionsDescription serializes ok
ok 1704 - Amazon::AWS::EC2::Types::VpcPeeringConnectionOptionsDescription deseralizes ok
# allowDnsResolutionFromRemoteVpc
# allowEgressFromLocalClassicLinkToRemoteVpc
# allowEgressFromLocalVpcToRemoteClassicLink
ok 1705 - Amazon::AWS::EC2::Types::VpcPeeringConnectionOptionsDescription compares ok
# CHANGE!
# vicselect
# allowDnsResolutionFromRemoteVpc, allowEgressFromLocalClassicLinkToRemoteVpc, allowEgressFromLocalVpcToRemoteClassicLink
# allowEgressFromLocalClassicLinkToRemoteVpc -- Str
# Setting allowEgressFromLocalClassicLinkToRemoteVpc to True
ok 1706 - Changed Amazon::AWS::EC2::Types::VpcPeeringConnectionOptionsDescription fails eqv
ok 1707 - Amazon::AWS::EC2::Types::VpcPeeringConnectionStateReason loads. Is not a Failure object
ok 1708 - Amazon::AWS::EC2::Types::VpcPeeringConnectionStateReason exists
ok 1709 - Amazon::AWS::EC2::Types::VpcPeeringConnectionStateReason can be populated
ok 1710 - Amazon::AWS::EC2::Types::VpcPeeringConnectionStateReason serializes ok
ok 1711 - Amazon::AWS::EC2::Types::VpcPeeringConnectionStateReason deseralizes ok
# code
# message
ok 1712 - Amazon::AWS::EC2::Types::VpcPeeringConnectionStateReason compares ok
# CHANGE!
# vicselect
# code, message
# message -- Str
# Setting message to syzygy!qmKCXbTjGXQMVUXhRawkm
ok 1713 - Changed Amazon::AWS::EC2::Types::VpcPeeringConnectionStateReason fails eqv
ok 1714 - Amazon::AWS::EC2::Types::VpcPeeringConnectionVpcInfo loads. Is not a Failure object
ok 1715 - Amazon::AWS::EC2::Types::VpcPeeringConnectionVpcInfo exists
ok 1716 - Amazon::AWS::EC2::Types::VpcPeeringConnectionVpcInfo can be populated
ok 1717 - Amazon::AWS::EC2::Types::VpcPeeringConnectionVpcInfo serializes ok
ok 1718 - Amazon::AWS::EC2::Types::VpcPeeringConnectionVpcInfo deseralizes ok
# cidrBlock
# cidrBlocks
# ipv6CidrBlocks
# ownerId
# peeringOptions
# allowDnsResolutionFromRemoteVpc
not ok 1719 - Amazon::AWS::EC2::Types::VpcPeeringConnectionVpcInfo compares ok
# Failed test 'Amazon::AWS::EC2::Types::VpcPeeringConnectionVpcInfo compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# cidrBlock, cidrBlocks, ipv6CidrBlocks, ownerId, peeringOptions, region, vpcId
# cidrBlock -- Str
# Setting cidrBlock to syzygy!JpGfqSDWXeewgrQUBQEZC
ok 1720 - Changed Amazon::AWS::EC2::Types::VpcPeeringConnectionVpcInfo fails eqv
ok 1721 - Amazon::AWS::EC2::Types::VpnConnectionOptions loads. Is not a Failure object
ok 1722 - Amazon::AWS::EC2::Types::VpnConnectionOptions exists
ok 1723 - Amazon::AWS::EC2::Types::VpnConnectionOptions can be populated
ok 1724 - Amazon::AWS::EC2::Types::VpnConnectionOptions serializes ok
ok 1725 - Amazon::AWS::EC2::Types::VpnConnectionOptions deseralizes ok
# staticRoutesOnly
ok 1726 - Amazon::AWS::EC2::Types::VpnConnectionOptions compares ok
# CHANGE!
# vicselect
# staticRoutesOnly
# staticRoutesOnly -- Str
# Setting staticRoutesOnly to True
ok 1727 - Changed Amazon::AWS::EC2::Types::VpnConnectionOptions fails eqv
ok 1728 - Amazon::AWS::EC2::Types::VpnGateway loads. Is not a Failure object
ok 1729 - Amazon::AWS::EC2::Types::VpnGateway exists
ok 1730 - Amazon::AWS::EC2::Types::VpnGateway can be populated
ok 1731 - Amazon::AWS::EC2::Types::VpnGateway serializes ok
ok 1732 - Amazon::AWS::EC2::Types::VpnGateway deseralizes ok
# amazonSideAsn
# attachments
Amazon::AWS::EC2::Types::VpcAttachment.new(state => "detaching", vpcId => "TKdaDu")
Amazon::AWS::EC2::Types::VpcAttachment.new(state => "detaching", vpcId => "TKdaDu")
# state
# vpcId
Amazon::AWS::EC2::Types::VpcAttachment.new(state => "attaching", vpcId => "SPXcQdyhBZFpTImxqDRnPUIxIZU")
Amazon::AWS::EC2::Types::VpcAttachment.new(state => "attaching", vpcId => "SPXcQdyhBZFpTImxqDRnPUIxIZU")
# state
# vpcId
Amazon::AWS::EC2::Types::VpcAttachment.new(state => "detached", vpcId => "KOjkFQXbxxeACMe")
Amazon::AWS::EC2::Types::VpcAttachment.new(state => "detached", vpcId => "KOjkFQXbxxeACMe")
# state
# vpcId
# availabilityZone
# state
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "ivhuLpGkFNTqrYtdAFeIgzhkPKudX", key => "NTwMdvIGJJpmYKBhlGFhiLYu", Value => "KANVEguRvPaqe", value => "ZGbZplDNhfBOzByzch")
Amazon::AWS::EC2::Types::Tag.new(Key => "ivhuLpGkFNTqrYtdAFeIgzhkPKudX", key => "NTwMdvIGJJpmYKBhlGFhiLYu", Value => "KANVEguRvPaqe", value => "ZGbZplDNhfBOzByzch")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "IziMSkjkIOXSes", key => "NVoAu", Value => "CrOIoOIZdtFcekDpjBe", value => "NuyPBsbDYjkk")
Amazon::AWS::EC2::Types::Tag.new(Key => "IziMSkjkIOXSes", key => "NVoAu", Value => "CrOIoOIZdtFcekDpjBe", value => "NuyPBsbDYjkk")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "EwTbyilWoDf", key => "UctbbEhwSmSYT", Value => "oEOtPCQluFjlVaqtAFVca", value => "BjHbfbobJtrpixRNNMnKgAeyCsp")
Amazon::AWS::EC2::Types::Tag.new(Key => "EwTbyilWoDf", key => "UctbbEhwSmSYT", Value => "oEOtPCQluFjlVaqtAFVca", value => "BjHbfbobJtrpixRNNMnKgAeyCsp")
# Key
# key
# Value
# value
# type
# vpnGatewayId
ok 1733 - Amazon::AWS::EC2::Types::VpnGateway compares ok
# CHANGE!
# vicselect
# amazonSideAsn, attachments, availabilityZone, state, tags, type, vpnGatewayId
# attachments -- Str
# Setting attachments to []
# Type check failed in assignment to @!attachments; expected Amazon::AWS::EC2::Types::VpcAttachment but got Array[Amazon::AWS::EC2::Types::VpcAttachment] (Array[Amazon::AWS::EC2::Types::VpcAttachment].new())
ok 1734 - Amazon::AWS::EC2::Types::VpnStaticRoute loads. Is not a Failure object
ok 1735 - Amazon::AWS::EC2::Types::VpnStaticRoute exists
ok 1736 - Amazon::AWS::EC2::Types::VpnStaticRoute can be populated
ok 1737 - Amazon::AWS::EC2::Types::VpnStaticRoute serializes ok
ok 1738 - Amazon::AWS::EC2::Types::VpnStaticRoute deseralizes ok
# destinationCidrBlock
# source
# state
ok 1739 - Amazon::AWS::EC2::Types::VpnStaticRoute compares ok
# CHANGE!
# vicselect
# destinationCidrBlock, source, state
# destinationCidrBlock -- Str
# Setting destinationCidrBlock to syzygy!PiXkzuWkjX
ok 1740 - Changed Amazon::AWS::EC2::Types::VpnStaticRoute fails eqv
ok 1741 - Amazon::AWS::EC2::Types::VpnTunnelOptionsSpecification loads. Is not a Failure object
ok 1742 - Amazon::AWS::EC2::Types::VpnTunnelOptionsSpecification exists
ok 1743 - Amazon::AWS::EC2::Types::VpnTunnelOptionsSpecification can be populated
ok 1744 - Amazon::AWS::EC2::Types::VpnTunnelOptionsSpecification serializes ok
ok 1745 - Amazon::AWS::EC2::Types::VpnTunnelOptionsSpecification deseralizes ok
# PreSharedKey
# TunnelInsideCidr
ok 1746 - Amazon::AWS::EC2::Types::VpnTunnelOptionsSpecification compares ok
# CHANGE!
# vicselect
# PreSharedKey, TunnelInsideCidr
# TunnelInsideCidr -- Str
# Setting TunnelInsideCidr to syzygy!xPSKPAmmJtZrgrsRgOY
ok 1747 - Changed Amazon::AWS::EC2::Types::VpnTunnelOptionsSpecification fails eqv
ok 1748 - Amazon::AWS::EC2::Types::AccountAttributeValue loads. Is not a Failure object
ok 1749 - Amazon::AWS::EC2::Types::AccountAttributeValue exists
ok 1750 - Amazon::AWS::EC2::Types::AccountAttributeValue can be populated
ok 1751 - Amazon::AWS::EC2::Types::AccountAttributeValue serializes ok
ok 1752 - Amazon::AWS::EC2::Types::AccountAttributeValue deseralizes ok
# attributeValue
ok 1753 - Amazon::AWS::EC2::Types::AccountAttributeValue compares ok
# CHANGE!
# vicselect
# attributeValue
# attributeValue -- Str
# Setting attributeValue to syzygy!ogMvfCJbT
ok 1754 - Changed Amazon::AWS::EC2::Types::AccountAttributeValue fails eqv
ok 1755 - Amazon::AWS::EC2::Types::ActiveInstance loads. Is not a Failure object
ok 1756 - Amazon::AWS::EC2::Types::ActiveInstance exists
ok 1757 - Amazon::AWS::EC2::Types::ActiveInstance can be populated
ok 1758 - Amazon::AWS::EC2::Types::ActiveInstance serializes ok
ok 1759 - Amazon::AWS::EC2::Types::ActiveInstance deseralizes ok
# instanceHealth
# instanceId
# instanceType
# spotInstanceRequestId
ok 1760 - Amazon::AWS::EC2::Types::ActiveInstance compares ok
# CHANGE!
# vicselect
# instanceHealth, instanceId, instanceType, spotInstanceRequestId
# instanceType -- Str
# Setting instanceType to syzygy!xePXDpMWyuMFOHvPqYGTvpN
ok 1761 - Changed Amazon::AWS::EC2::Types::ActiveInstance fails eqv
ok 1762 - Amazon::AWS::EC2::Types::Address loads. Is not a Failure object
ok 1763 - Amazon::AWS::EC2::Types::Address exists
ok 1764 - Amazon::AWS::EC2::Types::Address can be populated
ok 1765 - Amazon::AWS::EC2::Types::Address serializes ok
ok 1766 - Amazon::AWS::EC2::Types::Address deseralizes ok
# allocationId
# associationId
# domain
# instanceId
# networkInterfaceId
# networkInterfaceOwnerId
# privateIpAddress
# publicIp
# publicIpv4Pool
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "xVbzgnp", key => "QFqjgEqYArEwkwsOiwvYkgivU", Value => "fttRHMIo", value => "DpXXxPrdhTMtbmqxZjVeLBq")
Amazon::AWS::EC2::Types::Tag.new(Key => "xVbzgnp", key => "QFqjgEqYArEwkwsOiwvYkgivU", Value => "fttRHMIo", value => "DpXXxPrdhTMtbmqxZjVeLBq")
# Key
# key
# Value
# value
ok 1767 - Amazon::AWS::EC2::Types::Address compares ok
# CHANGE!
# vicselect
# allocationId, associationId, domain, instanceId, networkInterfaceId, networkInterfaceOwnerId, privateIpAddress, publicIp, publicIpv4Pool, tags
# allocationId -- Str
# Setting allocationId to syzygy!UWyXJmuBSGLmtSBfPAOoaCEQMYubQ
ok 1768 - Changed Amazon::AWS::EC2::Types::Address fails eqv
ok 1769 - Amazon::AWS::EC2::Types::AllowedPrincipal loads. Is not a Failure object
ok 1770 - Amazon::AWS::EC2::Types::AllowedPrincipal exists
ok 1771 - Amazon::AWS::EC2::Types::AllowedPrincipal can be populated
ok 1772 - Amazon::AWS::EC2::Types::AllowedPrincipal serializes ok
ok 1773 - Amazon::AWS::EC2::Types::AllowedPrincipal deseralizes ok
# principal
# principalType
ok 1774 - Amazon::AWS::EC2::Types::AllowedPrincipal compares ok
# CHANGE!
# vicselect
# principal, principalType
# principal -- Str
# Setting principal to syzygy!tWrxEaJsMNyHPP
ok 1775 - Changed Amazon::AWS::EC2::Types::AllowedPrincipal fails eqv
ok 1776 - Amazon::AWS::EC2::Types::AssociatedTargetNetwork loads. Is not a Failure object
ok 1777 - Amazon::AWS::EC2::Types::AssociatedTargetNetwork exists
ok 1778 - Amazon::AWS::EC2::Types::AssociatedTargetNetwork can be populated
ok 1779 - Amazon::AWS::EC2::Types::AssociatedTargetNetwork serializes ok
ok 1780 - Amazon::AWS::EC2::Types::AssociatedTargetNetwork deseralizes ok
# networkId
# networkType
ok 1781 - Amazon::AWS::EC2::Types::AssociatedTargetNetwork compares ok
# CHANGE!
# vicselect
# networkId, networkType
# networkType -- Str
# Setting networkType to syzygy!vpc
ok 1782 - Changed Amazon::AWS::EC2::Types::AssociatedTargetNetwork fails eqv
ok 1783 - Amazon::AWS::EC2::Types::AssociationStatus loads. Is not a Failure object
ok 1784 - Amazon::AWS::EC2::Types::AssociationStatus exists
ok 1785 - Amazon::AWS::EC2::Types::AssociationStatus can be populated
ok 1786 - Amazon::AWS::EC2::Types::AssociationStatus serializes ok
ok 1787 - Amazon::AWS::EC2::Types::AssociationStatus deseralizes ok
# code
# message
ok 1788 - Amazon::AWS::EC2::Types::AssociationStatus compares ok
# CHANGE!
# vicselect
# code, message
# code -- Str
# Setting code to syzygy!associating
ok 1789 - Changed Amazon::AWS::EC2::Types::AssociationStatus fails eqv
ok 1790 - Amazon::AWS::EC2::Types::AttributeBooleanValue loads. Is not a Failure object
ok 1791 - Amazon::AWS::EC2::Types::AttributeBooleanValue exists
ok 1792 - Amazon::AWS::EC2::Types::AttributeBooleanValue can be populated
ok 1793 - Amazon::AWS::EC2::Types::AttributeBooleanValue serializes ok
ok 1794 - Amazon::AWS::EC2::Types::AttributeBooleanValue deseralizes ok
# Value
# value
ok 1795 - Amazon::AWS::EC2::Types::AttributeBooleanValue compares ok
# CHANGE!
# vicselect
# Value, value
# Value -- Str
# Setting Value to True
not ok 1796 - Changed Amazon::AWS::EC2::Types::AttributeBooleanValue fails eqv
# Failed test 'Changed Amazon::AWS::EC2::Types::AttributeBooleanValue fails eqv'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
ok 1797 - Amazon::AWS::EC2::Types::AttributeValue loads. Is not a Failure object
ok 1798 - Amazon::AWS::EC2::Types::AttributeValue exists
ok 1799 - Amazon::AWS::EC2::Types::AttributeValue can be populated
ok 1800 - Amazon::AWS::EC2::Types::AttributeValue serializes ok
ok 1801 - Amazon::AWS::EC2::Types::AttributeValue deseralizes ok
# Value
# value
ok 1802 - Amazon::AWS::EC2::Types::AttributeValue compares ok
# CHANGE!
# vicselect
# Value, value
# value -- Str
# Setting value to syzygy!eMIgAFHWIgRpEKlnQkNKuHYXtk
ok 1803 - Changed Amazon::AWS::EC2::Types::AttributeValue fails eqv
ok 1804 - Amazon::AWS::EC2::Types::AuthorizationRule loads. Is not a Failure object
ok 1805 - Amazon::AWS::EC2::Types::AuthorizationRule exists
ok 1806 - Amazon::AWS::EC2::Types::AuthorizationRule can be populated
ok 1807 - Amazon::AWS::EC2::Types::AuthorizationRule serializes ok
ok 1808 - Amazon::AWS::EC2::Types::AuthorizationRule deseralizes ok
# accessAll
# clientVpnEndpointId
# description
# destinationCidr
# groupId
# status
# code
not ok 1809 - Amazon::AWS::EC2::Types::AuthorizationRule compares ok
# Failed test 'Amazon::AWS::EC2::Types::AuthorizationRule compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# accessAll, clientVpnEndpointId, description, destinationCidr, groupId, status
# destinationCidr -- Str
# Setting destinationCidr to syzygy!RyfsgTJwYXKYctTbtqPNZAR
ok 1810 - Changed Amazon::AWS::EC2::Types::AuthorizationRule fails eqv
ok 1811 - Amazon::AWS::EC2::Types::AvailabilityZoneMessage loads. Is not a Failure object
ok 1812 - Amazon::AWS::EC2::Types::AvailabilityZoneMessage exists
ok 1813 - Amazon::AWS::EC2::Types::AvailabilityZoneMessage can be populated
ok 1814 - Amazon::AWS::EC2::Types::AvailabilityZoneMessage serializes ok
ok 1815 - Amazon::AWS::EC2::Types::AvailabilityZoneMessage deseralizes ok
# message
ok 1816 - Amazon::AWS::EC2::Types::AvailabilityZoneMessage compares ok
# CHANGE!
# vicselect
# message
# message -- Str
# Setting message to syzygy!NgcpePjEZcvwXNqKwKqE
ok 1817 - Changed Amazon::AWS::EC2::Types::AvailabilityZoneMessage fails eqv
ok 1818 - Amazon::AWS::EC2::Types::AvailableCapacity loads. Is not a Failure object
ok 1819 - Amazon::AWS::EC2::Types::AvailableCapacity exists
ok 1820 - Amazon::AWS::EC2::Types::AvailableCapacity can be populated
ok 1821 - Amazon::AWS::EC2::Types::AvailableCapacity serializes ok
ok 1822 - Amazon::AWS::EC2::Types::AvailableCapacity deseralizes ok
# availableInstanceCapacity
Amazon::AWS::EC2::Types::InstanceCapacity.new(availableCapacity => 5, instanceType => "SJQUJkKKWsQD", totalCapacity => 18)
Amazon::AWS::EC2::Types::InstanceCapacity.new(availableCapacity => 5, instanceType => "SJQUJkKKWsQD", totalCapacity => 18)
# availableCapacity
# instanceType
# totalCapacity
# availableVCpus
ok 1823 - Amazon::AWS::EC2::Types::AvailableCapacity compares ok
# CHANGE!
# vicselect
# availableInstanceCapacity, availableVCpus
# availableVCpus -- Str
# Setting availableVCpus to 18
ok 1824 - Changed Amazon::AWS::EC2::Types::AvailableCapacity fails eqv
ok 1825 - Amazon::AWS::EC2::Types::BlockDeviceMapping loads. Is not a Failure object
not ok 1826 - Amazon::AWS::EC2::Types::BlockDeviceMapping exists
# Failed test 'Amazon::AWS::EC2::Types::BlockDeviceMapping exists'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
Nil
Perl6::Metamodel::ClassHOW.new
# No such symbol 'Amazon::AWS::EC2::Types::BlockDeviceMapping'
not ok 1827 - Amazon::AWS::EC2::Types::BlockDeviceMapping can be populated
# Failed test 'Amazon::AWS::EC2::Types::BlockDeviceMapping can be populated'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such symbol 'Amazon::AWS::EC2::Types::BlockDeviceMapping'
not ok 1828 - Amazon::AWS::EC2::Types::BlockDeviceMapping serializes ok
# Failed test 'Amazon::AWS::EC2::Types::BlockDeviceMapping serializes ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such method 'to-xml' for invocant of type 'Any'
ok 1829 - Amazon::AWS::EC2::Types::BlockDeviceMapping deseralizes ok
# No such method 'eqv' for invocant of type 'Any'
ok 1830 - Amazon::AWS::EC2::Types::BundleTask loads. Is not a Failure object
not ok 1831 - Amazon::AWS::EC2::Types::BundleTask exists
# Failed test 'Amazon::AWS::EC2::Types::BundleTask exists'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
Nil
Perl6::Metamodel::ClassHOW.new
# No such symbol 'Amazon::AWS::EC2::Types::BundleTask'
not ok 1832 - Amazon::AWS::EC2::Types::BundleTask can be populated
# Failed test 'Amazon::AWS::EC2::Types::BundleTask can be populated'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such symbol 'Amazon::AWS::EC2::Types::BundleTask'
not ok 1833 - Amazon::AWS::EC2::Types::BundleTask serializes ok
# Failed test 'Amazon::AWS::EC2::Types::BundleTask serializes ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such method 'to-xml' for invocant of type 'Any'
ok 1834 - Amazon::AWS::EC2::Types::BundleTask deseralizes ok
# No such method 'eqv' for invocant of type 'Any'
ok 1835 - Amazon::AWS::EC2::Types::CapacityReservation loads. Is not a Failure object
ok 1836 - Amazon::AWS::EC2::Types::CapacityReservation exists
ok 1837 - Amazon::AWS::EC2::Types::CapacityReservation can be populated
ok 1838 - Amazon::AWS::EC2::Types::CapacityReservation serializes ok
ok 1839 - Amazon::AWS::EC2::Types::CapacityReservation deseralizes ok
# availabilityZone
# availableInstanceCount
# capacityReservationId
# createDate
# ebsOptimized
# endDate
# endDateType
# ephemeralStorage
# instanceMatchCriteria
# instancePlatform
# instanceType
# state
# tags
# tenancy
# totalInstanceCount
ok 1840 - Amazon::AWS::EC2::Types::CapacityReservation compares ok
# CHANGE!
# vicselect
# availabilityZone, availableInstanceCount, capacityReservationId, createDate, ebsOptimized, endDate, endDateType, ephemeralStorage, instanceMatchCriteria, instancePlatform, instanceType, state, tags, tenancy, totalInstanceCount
# ephemeralStorage -- Str
# Setting ephemeralStorage to True
not ok 1841 - Changed Amazon::AWS::EC2::Types::CapacityReservation fails eqv
# Failed test 'Changed Amazon::AWS::EC2::Types::CapacityReservation fails eqv'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
ok 1842 - Amazon::AWS::EC2::Types::CapacityReservationSpecification loads. Is not a Failure object
ok 1843 - Amazon::AWS::EC2::Types::CapacityReservationSpecification exists
ok 1844 - Amazon::AWS::EC2::Types::CapacityReservationSpecification can be populated
ok 1845 - Amazon::AWS::EC2::Types::CapacityReservationSpecification serializes ok
ok 1846 - Amazon::AWS::EC2::Types::CapacityReservationSpecification deseralizes ok
# CapacityReservationPreference
# CapacityReservationTarget
# CapacityReservationId
ok 1847 - Amazon::AWS::EC2::Types::CapacityReservationSpecification compares ok
# CHANGE!
# vicselect
# CapacityReservationPreference, CapacityReservationTarget
# CapacityReservationTarget -- Str
# Setting CapacityReservationTarget to Amazon::AWS::EC2::Types::CapacityReservationTarget.new(CapacityReservationId => Str)
ok 1848 - Changed Amazon::AWS::EC2::Types::CapacityReservationSpecification fails eqv
ok 1849 - Amazon::AWS::EC2::Types::CapacityReservationSpecificationResponse loads. Is not a Failure object
ok 1850 - Amazon::AWS::EC2::Types::CapacityReservationSpecificationResponse exists
ok 1851 - Amazon::AWS::EC2::Types::CapacityReservationSpecificationResponse can be populated
ok 1852 - Amazon::AWS::EC2::Types::CapacityReservationSpecificationResponse serializes ok
ok 1853 - Amazon::AWS::EC2::Types::CapacityReservationSpecificationResponse deseralizes ok
# capacityReservationPreference
# capacityReservationTarget
# capacityReservationId
not ok 1854 - Amazon::AWS::EC2::Types::CapacityReservationSpecificationResponse compares ok
# Failed test 'Amazon::AWS::EC2::Types::CapacityReservationSpecificationResponse compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# capacityReservationPreference, capacityReservationTarget
# capacityReservationTarget -- Str
# Setting capacityReservationTarget to Amazon::AWS::EC2::Types::CapacityReservationTargetResponse.new(capacityReservationId => Str)
ok 1855 - Changed Amazon::AWS::EC2::Types::CapacityReservationSpecificationResponse fails eqv
ok 1856 - Amazon::AWS::EC2::Types::ClassicLinkInstance loads. Is not a Failure object
ok 1857 - Amazon::AWS::EC2::Types::ClassicLinkInstance exists
ok 1858 - Amazon::AWS::EC2::Types::ClassicLinkInstance can be populated
ok 1859 - Amazon::AWS::EC2::Types::ClassicLinkInstance serializes ok
ok 1860 - Amazon::AWS::EC2::Types::ClassicLinkInstance deseralizes ok
# groups
# instanceId
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "dYgndhfohNwHcRXFtuSqzSwPteIl", key => "grVvjoEUFQVXmUlzbKhwxUrOdVmz", Value => "mQOfdhYQs", value => "DkTpFSQvxO")
Amazon::AWS::EC2::Types::Tag.new(Key => "dYgndhfohNwHcRXFtuSqzSwPteIl", key => "grVvjoEUFQVXmUlzbKhwxUrOdVmz", Value => "mQOfdhYQs", value => "DkTpFSQvxO")
# Key
# key
# Value
# value
# vpcId
ok 1861 - Amazon::AWS::EC2::Types::ClassicLinkInstance compares ok
# CHANGE!
# vicselect
# groups, instanceId, tags, vpcId
# tags -- Str
# Setting tags to []
# Type check failed in assignment to @!tags; expected Amazon::AWS::EC2::Types::Tag but got Array[Amazon::AWS::EC2::Types::Tag] (Array[Amazon::AWS::EC2::Types::Tag].new())
ok 1862 - Amazon::AWS::EC2::Types::ClientVpnAuthentication loads. Is not a Failure object
ok 1863 - Amazon::AWS::EC2::Types::ClientVpnAuthentication exists
ok 1864 - Amazon::AWS::EC2::Types::ClientVpnAuthentication can be populated
ok 1865 - Amazon::AWS::EC2::Types::ClientVpnAuthentication serializes ok
ok 1866 - Amazon::AWS::EC2::Types::ClientVpnAuthentication deseralizes ok
# activeDirectory
# directoryId
not ok 1867 - Amazon::AWS::EC2::Types::ClientVpnAuthentication compares ok
# Failed test 'Amazon::AWS::EC2::Types::ClientVpnAuthentication compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# activeDirectory, mutualAuthentication, type
# activeDirectory -- Str
# Setting activeDirectory to Amazon::AWS::EC2::Types::DirectoryServiceAuthentication.new(directoryId => Str)
ok 1868 - Changed Amazon::AWS::EC2::Types::ClientVpnAuthentication fails eqv
ok 1869 - Amazon::AWS::EC2::Types::ClientVpnAuthenticationRequest loads. Is not a Failure object
ok 1870 - Amazon::AWS::EC2::Types::ClientVpnAuthenticationRequest exists
ok 1871 - Amazon::AWS::EC2::Types::ClientVpnAuthenticationRequest can be populated
ok 1872 - Amazon::AWS::EC2::Types::ClientVpnAuthenticationRequest serializes ok
ok 1873 - Amazon::AWS::EC2::Types::ClientVpnAuthenticationRequest deseralizes ok
# ActiveDirectory
# DirectoryId
not ok 1874 - Amazon::AWS::EC2::Types::ClientVpnAuthenticationRequest compares ok
# Failed test 'Amazon::AWS::EC2::Types::ClientVpnAuthenticationRequest compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# ActiveDirectory, MutualAuthentication, Type
# MutualAuthentication -- Str
# Setting MutualAuthentication to Amazon::AWS::EC2::Types::CertificateAuthenticationRequest.new(ClientRootCertificateChainArn => Str)
ok 1875 - Changed Amazon::AWS::EC2::Types::ClientVpnAuthenticationRequest fails eqv
ok 1876 - Amazon::AWS::EC2::Types::ClientVpnConnection loads. Is not a Failure object
ok 1877 - Amazon::AWS::EC2::Types::ClientVpnConnection exists
ok 1878 - Amazon::AWS::EC2::Types::ClientVpnConnection can be populated
ok 1879 - Amazon::AWS::EC2::Types::ClientVpnConnection serializes ok
ok 1880 - Amazon::AWS::EC2::Types::ClientVpnConnection deseralizes ok
# clientIp
# clientVpnEndpointId
# commonName
# connectionEndTime
# connectionEstablishedTime
# connectionId
# egressBytes
# egressPackets
# ingressBytes
# ingressPackets
# status
# code
not ok 1881 - Amazon::AWS::EC2::Types::ClientVpnConnection compares ok
# Failed test 'Amazon::AWS::EC2::Types::ClientVpnConnection compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# clientIp, clientVpnEndpointId, commonName, connectionEndTime, connectionEstablishedTime, connectionId, egressBytes, egressPackets, ingressBytes, ingressPackets, status, timestamp, username
# clientIp -- Str
# Setting clientIp to syzygy!xcpXekVWe
ok 1882 - Changed Amazon::AWS::EC2::Types::ClientVpnConnection fails eqv
ok 1883 - Amazon::AWS::EC2::Types::ClientVpnEndpoint loads. Is not a Failure object
ok 1884 - Amazon::AWS::EC2::Types::ClientVpnEndpoint exists
ok 1885 - Amazon::AWS::EC2::Types::ClientVpnEndpoint can be populated
ok 1886 - Amazon::AWS::EC2::Types::ClientVpnEndpoint serializes ok
ok 1887 - Amazon::AWS::EC2::Types::ClientVpnEndpoint deseralizes ok
# associatedTargetNetwork
Amazon::AWS::EC2::Types::AssociatedTargetNetwork.new(networkId => "vqokY", networkType => "vpc")
Amazon::AWS::EC2::Types::AssociatedTargetNetwork.new(networkId => "vqokY", networkType => "vpc")
# networkId
# networkType
Amazon::AWS::EC2::Types::AssociatedTargetNetwork.new(networkId => "NoqVKpwZQHydfOyZ", networkType => "vpc")
Amazon::AWS::EC2::Types::AssociatedTargetNetwork.new(networkId => "NoqVKpwZQHydfOyZ", networkType => "vpc")
# networkId
# networkType
# authenticationOptions
Amazon::AWS::EC2::Types::ClientVpnAuthentication.new(activeDirectory => Amazon::AWS::EC2::Types::DirectoryServiceAuthentication.new(directoryId => "pJkJvZgakgtoPQ"), mutualAuthentication => Amazon::AWS::EC2::Types::CertificateAuthentication.new(clientRootCertificateChain => "KOJXfwMXgWMpbtRHpRoV"), type => "certificate")
Amazon::AWS::EC2::Types::ClientVpnAuthentication.new(activeDirectory => Amazon::AWS::EC2::Types::DirectoryServiceAuthentication.new(directoryId => Str), mutualAuthentication => Amazon::AWS::EC2::Types::CertificateAuthentication.new(clientRootCertificateChain => Str), type => "certificate")
# activeDirectory
# directoryId
not ok 1888 - Amazon::AWS::EC2::Types::ClientVpnEndpoint compares ok
# Failed test 'Amazon::AWS::EC2::Types::ClientVpnEndpoint compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# associatedTargetNetwork, authenticationOptions, clientCidrBlock, clientVpnEndpointId, connectionLogOptions, creationTime, deletionTime, description, dnsName, dnsServer, serverCertificateArn, splitTunnel, status, tags, transportProtocol, vpnProtocol
# connectionLogOptions -- Str
# Setting connectionLogOptions to Amazon::AWS::EC2::Types::ConnectionLogResponseOptions.new(CloudwatchLogGroup => Str, CloudwatchLogStream => Str, Enabled => Bool)
ok 1889 - Changed Amazon::AWS::EC2::Types::ClientVpnEndpoint fails eqv
ok 1890 - Amazon::AWS::EC2::Types::ClientVpnRoute loads. Is not a Failure object
ok 1891 - Amazon::AWS::EC2::Types::ClientVpnRoute exists
ok 1892 - Amazon::AWS::EC2::Types::ClientVpnRoute can be populated
ok 1893 - Amazon::AWS::EC2::Types::ClientVpnRoute serializes ok
ok 1894 - Amazon::AWS::EC2::Types::ClientVpnRoute deseralizes ok
# clientVpnEndpointId
# description
# destinationCidr
# origin
# status
# code
not ok 1895 - Amazon::AWS::EC2::Types::ClientVpnRoute compares ok
# Failed test 'Amazon::AWS::EC2::Types::ClientVpnRoute compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# clientVpnEndpointId, description, destinationCidr, origin, status, targetSubnet, type
# status -- Str
# Setting status to Amazon::AWS::EC2::Types::ClientVpnRouteStatus.new(code => Str, message => Str)
ok 1896 - Changed Amazon::AWS::EC2::Types::ClientVpnRoute fails eqv
ok 1897 - Amazon::AWS::EC2::Types::CustomerGateway loads. Is not a Failure object
ok 1898 - Amazon::AWS::EC2::Types::CustomerGateway exists
ok 1899 - Amazon::AWS::EC2::Types::CustomerGateway can be populated
ok 1900 - Amazon::AWS::EC2::Types::CustomerGateway serializes ok
ok 1901 - Amazon::AWS::EC2::Types::CustomerGateway deseralizes ok
# bgpAsn
# customerGatewayId
# ipAddress
# state
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "zLCOjqzaaqttQGYoPcDu", key => "bxCBFRbxMhUtfhTrLCvYnBppcrBrrY", Value => "pUlGLPNfkYsUpCvRjEAfTpzcKN", value => "fOoqLbMpshr")
Amazon::AWS::EC2::Types::Tag.new(Key => "zLCOjqzaaqttQGYoPcDu", key => "bxCBFRbxMhUtfhTrLCvYnBppcrBrrY", Value => "pUlGLPNfkYsUpCvRjEAfTpzcKN", value => "fOoqLbMpshr")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "hkpknLuZovtyfkbIpVqjZPYbE", key => "dTAahNxSoipC", Value => "qfniBNs", value => "pJXspfpdNoJViywK")
Amazon::AWS::EC2::Types::Tag.new(Key => "hkpknLuZovtyfkbIpVqjZPYbE", key => "dTAahNxSoipC", Value => "qfniBNs", value => "pJXspfpdNoJViywK")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "ZHXGAg", key => "mjmtxXJOLJHUTjZhgQbGHybyxosM", Value => "IOHUVwhpNBousSLauMNxCxpk", value => "URpGWdfmCdZcelLuzEVld")
Amazon::AWS::EC2::Types::Tag.new(Key => "ZHXGAg", key => "mjmtxXJOLJHUTjZhgQbGHybyxosM", Value => "IOHUVwhpNBousSLauMNxCxpk", value => "URpGWdfmCdZcelLuzEVld")
# Key
# key
# Value
# value
# type
ok 1902 - Amazon::AWS::EC2::Types::CustomerGateway compares ok
# CHANGE!
# vicselect
# bgpAsn, customerGatewayId, ipAddress, state, tags, type
# tags -- Str
# Setting tags to []
# Type check failed in assignment to @!tags; expected Amazon::AWS::EC2::Types::Tag but got Array[Amazon::AWS::EC2::Types::Tag] (Array[Amazon::AWS::EC2::Types::Tag].new())
ok 1903 - Amazon::AWS::EC2::Types::DeleteLaunchTemplateVersionsResponseErrorItem loads. Is not a Failure object
ok 1904 - Amazon::AWS::EC2::Types::DeleteLaunchTemplateVersionsResponseErrorItem exists
ok 1905 - Amazon::AWS::EC2::Types::DeleteLaunchTemplateVersionsResponseErrorItem can be populated
ok 1906 - Amazon::AWS::EC2::Types::DeleteLaunchTemplateVersionsResponseErrorItem serializes ok
ok 1907 - Amazon::AWS::EC2::Types::DeleteLaunchTemplateVersionsResponseErrorItem deseralizes ok
# launchTemplateId
# launchTemplateName
# responseError
# code
not ok 1908 - Amazon::AWS::EC2::Types::DeleteLaunchTemplateVersionsResponseErrorItem compares ok
# Failed test 'Amazon::AWS::EC2::Types::DeleteLaunchTemplateVersionsResponseErrorItem compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# launchTemplateId, launchTemplateName, responseError, versionNumber
# responseError -- Str
# Setting responseError to Amazon::AWS::EC2::Types::ResponseError.new(code => Str, message => Str)
ok 1909 - Changed Amazon::AWS::EC2::Types::DeleteLaunchTemplateVersionsResponseErrorItem fails eqv
ok 1910 - Amazon::AWS::EC2::Types::DhcpConfiguration loads. Is not a Failure object
ok 1911 - Amazon::AWS::EC2::Types::DhcpConfiguration exists
ok 1912 - Amazon::AWS::EC2::Types::DhcpConfiguration can be populated
ok 1913 - Amazon::AWS::EC2::Types::DhcpConfiguration serializes ok
ok 1914 - Amazon::AWS::EC2::Types::DhcpConfiguration deseralizes ok
# key
# values
Amazon::AWS::EC2::Types::AttributeValue.new(Value => "amSxUNegnWrcORXATkJn", value => "FkJqzzcffximYykfIjKMvdY")
Amazon::AWS::EC2::Types::AttributeValue.new(Value => "amSxUNegnWrcORXATkJn", value => "FkJqzzcffximYykfIjKMvdY")
# Value
# value
Amazon::AWS::EC2::Types::AttributeValue.new(Value => "xwfWKAHpJaHxlpMiTsQvWJsuKucv", value => "hnWcINFKXGs")
Amazon::AWS::EC2::Types::AttributeValue.new(Value => "xwfWKAHpJaHxlpMiTsQvWJsuKucv", value => "hnWcINFKXGs")
# Value
# value
Amazon::AWS::EC2::Types::AttributeValue.new(Value => "laXssCDoMK", value => "oQFQgEyEckCVqdnFTRwLIvYVxLgJu")
Amazon::AWS::EC2::Types::AttributeValue.new(Value => "laXssCDoMK", value => "oQFQgEyEckCVqdnFTRwLIvYVxLgJu")
# Value
# value
ok 1915 - Amazon::AWS::EC2::Types::DhcpConfiguration compares ok
# CHANGE!
# vicselect
# key, values
# key -- Str
# Setting key to syzygy!htBuRrAqJJbqChAxYhhzTFlvxUDiNY
ok 1916 - Changed Amazon::AWS::EC2::Types::DhcpConfiguration fails eqv
ok 1917 - Amazon::AWS::EC2::Types::DhcpOptions loads. Is not a Failure object
ok 1918 - Amazon::AWS::EC2::Types::DhcpOptions exists
ok 1919 - Amazon::AWS::EC2::Types::DhcpOptions can be populated
ok 1920 - Amazon::AWS::EC2::Types::DhcpOptions serializes ok
ok 1921 - Amazon::AWS::EC2::Types::DhcpOptions deseralizes ok
# dhcpConfigurations
# dhcpOptionsId
# ownerId
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "CEYtJeFGKhfzcxZzycN", key => "YeJngXyJQBtdRRLYiffCutA", Value => "VnfPInQncrxNRwxEDRlzRlrra", value => "bAQDNcGomuOfvkY")
Amazon::AWS::EC2::Types::Tag.new(Key => "CEYtJeFGKhfzcxZzycN", key => "YeJngXyJQBtdRRLYiffCutA", Value => "VnfPInQncrxNRwxEDRlzRlrra", value => "bAQDNcGomuOfvkY")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "QESLKtUxhwRqREacUwKjcfuqxg", key => "QgnLTocSamPheUgusFbM", Value => "hTZNXbqPWsWluqsXa", value => "ZJYeZrxgctdjtNS")
Amazon::AWS::EC2::Types::Tag.new(Key => "QESLKtUxhwRqREacUwKjcfuqxg", key => "QgnLTocSamPheUgusFbM", Value => "hTZNXbqPWsWluqsXa", value => "ZJYeZrxgctdjtNS")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "AxGwRfRLhkvdWMxxRFcYORAWqvlXKS", key => "XXxnkrvsQSvxoMvvUaAZhAKuZBQ", Value => "PubzOIhwLoTtIXaojsv", value => "EDnHJwrDGdRTBauYZdFEVbBUEN")
Amazon::AWS::EC2::Types::Tag.new(Key => "AxGwRfRLhkvdWMxxRFcYORAWqvlXKS", key => "XXxnkrvsQSvxoMvvUaAZhAKuZBQ", Value => "PubzOIhwLoTtIXaojsv", value => "EDnHJwrDGdRTBauYZdFEVbBUEN")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "awfebAh", key => "YpNaGpqtGmxFwTLwfBoxqtPxzRSgrR", Value => "jrlbtjGvCdVssSidLHtt", value => "wGOUjDwxPUxcOvlnGE")
Amazon::AWS::EC2::Types::Tag.new(Key => "awfebAh", key => "YpNaGpqtGmxFwTLwfBoxqtPxzRSgrR", Value => "jrlbtjGvCdVssSidLHtt", value => "wGOUjDwxPUxcOvlnGE")
# Key
# key
# Value
# value
ok 1922 - Amazon::AWS::EC2::Types::DhcpOptions compares ok
# CHANGE!
# vicselect
# dhcpConfigurations, dhcpOptionsId, ownerId, tags
# dhcpOptionsId -- Str
# Setting dhcpOptionsId to syzygy!uUZPwcreRKuPAFtzrjsXGjmTKgg
ok 1923 - Changed Amazon::AWS::EC2::Types::DhcpOptions fails eqv
ok 1924 - Amazon::AWS::EC2::Types::DiskImage loads. Is not a Failure object
ok 1925 - Amazon::AWS::EC2::Types::DiskImage exists
ok 1926 - Amazon::AWS::EC2::Types::DiskImage can be populated
ok 1927 - Amazon::AWS::EC2::Types::DiskImage serializes ok
ok 1928 - Amazon::AWS::EC2::Types::DiskImage deseralizes ok
# Description
# Image
# Bytes
not ok 1929 - Amazon::AWS::EC2::Types::DiskImage compares ok
# Failed test 'Amazon::AWS::EC2::Types::DiskImage compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# Description, Image, Volume
# Image -- Str
# Setting Image to Amazon::AWS::EC2::Types::DiskImageDetail.new(Bytes => Int, Format => Str, ImportManifestUrl => Str)
ok 1930 - Changed Amazon::AWS::EC2::Types::DiskImage fails eqv
ok 1931 - Amazon::AWS::EC2::Types::EgressOnlyInternetGateway loads. Is not a Failure object
ok 1932 - Amazon::AWS::EC2::Types::EgressOnlyInternetGateway exists
ok 1933 - Amazon::AWS::EC2::Types::EgressOnlyInternetGateway can be populated
ok 1934 - Amazon::AWS::EC2::Types::EgressOnlyInternetGateway serializes ok
ok 1935 - Amazon::AWS::EC2::Types::EgressOnlyInternetGateway deseralizes ok
# attachments
Amazon::AWS::EC2::Types::InternetGatewayAttachment.new(state => "attaching", vpcId => "AvIgSQYOOep")
Amazon::AWS::EC2::Types::InternetGatewayAttachment.new(state => "attaching", vpcId => "AvIgSQYOOep")
# state
# vpcId
Amazon::AWS::EC2::Types::InternetGatewayAttachment.new(state => "attaching", vpcId => "IleaIadFTavdIbFPCQy")
Amazon::AWS::EC2::Types::InternetGatewayAttachment.new(state => "attaching", vpcId => "IleaIadFTavdIbFPCQy")
# state
# vpcId
# egressOnlyInternetGatewayId
ok 1936 - Amazon::AWS::EC2::Types::EgressOnlyInternetGateway compares ok
# CHANGE!
# vicselect
# attachments, egressOnlyInternetGatewayId
# egressOnlyInternetGatewayId -- Str
# Setting egressOnlyInternetGatewayId to syzygy!HzTVSdBYgNoQwpz
ok 1937 - Changed Amazon::AWS::EC2::Types::EgressOnlyInternetGateway fails eqv
ok 1938 - Amazon::AWS::EC2::Types::ExportTask loads. Is not a Failure object
ok 1939 - Amazon::AWS::EC2::Types::ExportTask exists
ok 1940 - Amazon::AWS::EC2::Types::ExportTask can be populated
ok 1941 - Amazon::AWS::EC2::Types::ExportTask serializes ok
ok 1942 - Amazon::AWS::EC2::Types::ExportTask deseralizes ok
# description
# exportTaskId
# exportToS3
# containerFormat
not ok 1943 - Amazon::AWS::EC2::Types::ExportTask compares ok
# Failed test 'Amazon::AWS::EC2::Types::ExportTask compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# description, exportTaskId, exportToS3, instanceExport, state, statusMessage
# statusMessage -- Str
# Setting statusMessage to syzygy!VaeICeYGiibSPQBivVXEyMYSORogf
ok 1944 - Changed Amazon::AWS::EC2::Types::ExportTask fails eqv
ok 1945 - Amazon::AWS::EC2::Types::FleetLaunchTemplateOverrides loads. Is not a Failure object
ok 1946 - Amazon::AWS::EC2::Types::FleetLaunchTemplateOverrides exists
ok 1947 - Amazon::AWS::EC2::Types::FleetLaunchTemplateOverrides can be populated
ok 1948 - Amazon::AWS::EC2::Types::FleetLaunchTemplateOverrides serializes ok
ok 1949 - Amazon::AWS::EC2::Types::FleetLaunchTemplateOverrides deseralizes ok
# availabilityZone
# instanceType
# maxPrice
# placement
# groupName
not ok 1950 - Amazon::AWS::EC2::Types::FleetLaunchTemplateOverrides compares ok
# Failed test 'Amazon::AWS::EC2::Types::FleetLaunchTemplateOverrides compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# availabilityZone, instanceType, maxPrice, placement, priority, subnetId, weightedCapacity
# maxPrice -- Str
# Setting maxPrice to syzygy!waLJfUazoyVusAwehO
ok 1951 - Changed Amazon::AWS::EC2::Types::FleetLaunchTemplateOverrides fails eqv
ok 1952 - Amazon::AWS::EC2::Types::FleetLaunchTemplateOverridesRequest loads. Is not a Failure object
ok 1953 - Amazon::AWS::EC2::Types::FleetLaunchTemplateOverridesRequest exists
ok 1954 - Amazon::AWS::EC2::Types::FleetLaunchTemplateOverridesRequest can be populated
ok 1955 - Amazon::AWS::EC2::Types::FleetLaunchTemplateOverridesRequest serializes ok
ok 1956 - Amazon::AWS::EC2::Types::FleetLaunchTemplateOverridesRequest deseralizes ok
# AvailabilityZone
# InstanceType
# MaxPrice
# Placement
# Affinity
# AvailabilityZone
# GroupName
# HostId
# PartitionNumber
# SpreadDomain
# Tenancy
# affinity
# availabilityZone
# groupName
# hostId
# partitionNumber
# spreadDomain
# tenancy
# Priority
# SubnetId
# WeightedCapacity
ok 1957 - Amazon::AWS::EC2::Types::FleetLaunchTemplateOverridesRequest compares ok
# CHANGE!
# vicselect
# AvailabilityZone, InstanceType, MaxPrice, Placement, Priority, SubnetId, WeightedCapacity
# InstanceType -- Str
# Setting InstanceType to syzygy!t1
ok 1958 - Changed Amazon::AWS::EC2::Types::FleetLaunchTemplateOverridesRequest fails eqv
ok 1959 - Amazon::AWS::EC2::Types::FpgaImage loads. Is not a Failure object
ok 1960 - Amazon::AWS::EC2::Types::FpgaImage exists
ok 1961 - Amazon::AWS::EC2::Types::FpgaImage can be populated
ok 1962 - Amazon::AWS::EC2::Types::FpgaImage serializes ok
ok 1963 - Amazon::AWS::EC2::Types::FpgaImage deseralizes ok
# createTime
# dataRetentionSupport
# description
# fpgaImageGlobalId
# fpgaImageId
# name
# ownerAlias
# ownerId
# pciId
# DeviceId
not ok 1964 - Amazon::AWS::EC2::Types::FpgaImage compares ok
# Failed test 'Amazon::AWS::EC2::Types::FpgaImage compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# createTime, dataRetentionSupport, description, fpgaImageGlobalId, fpgaImageId, name, ownerAlias, ownerId, pciId, productCodes, public, shellVersion, state, tags, updateTime
# fpgaImageId -- Str
# Setting fpgaImageId to syzygy!wgDNfsV
ok 1965 - Changed Amazon::AWS::EC2::Types::FpgaImage fails eqv
ok 1966 - Amazon::AWS::EC2::Types::FpgaImageAttribute loads. Is not a Failure object
ok 1967 - Amazon::AWS::EC2::Types::FpgaImageAttribute exists
ok 1968 - Amazon::AWS::EC2::Types::FpgaImageAttribute can be populated
ok 1969 - Amazon::AWS::EC2::Types::FpgaImageAttribute serializes ok
ok 1970 - Amazon::AWS::EC2::Types::FpgaImageAttribute deseralizes ok
# description
# fpgaImageId
# loadPermissions
Amazon::AWS::EC2::Types::LoadPermission.new(group => "all", userId => "MshyUdmKBTPmUBx")
Amazon::AWS::EC2::Types::LoadPermission.new(group => "all", userId => "MshyUdmKBTPmUBx")
# group
# userId
Amazon::AWS::EC2::Types::LoadPermission.new(group => "all", userId => "LhyTLcDUfxMcJBvWVtofyKpMb")
Amazon::AWS::EC2::Types::LoadPermission.new(group => "all", userId => "LhyTLcDUfxMcJBvWVtofyKpMb")
# group
# userId
Amazon::AWS::EC2::Types::LoadPermission.new(group => "all", userId => "nHbnmAlfZHxukcs")
Amazon::AWS::EC2::Types::LoadPermission.new(group => "all", userId => "nHbnmAlfZHxukcs")
# group
# userId
# name
# productCodes
ok 1971 - Amazon::AWS::EC2::Types::FpgaImageAttribute compares ok
# CHANGE!
# vicselect
# description, fpgaImageId, loadPermissions, name, productCodes
# name -- Str
# Setting name to syzygy!YjvDchSBiOSnjkUIEGUFQOAqCro
ok 1972 - Changed Amazon::AWS::EC2::Types::FpgaImageAttribute fails eqv
ok 1973 - Amazon::AWS::EC2::Types::Host loads. Is not a Failure object
ok 1974 - Amazon::AWS::EC2::Types::Host exists
ok 1975 - Amazon::AWS::EC2::Types::Host can be populated
ok 1976 - Amazon::AWS::EC2::Types::Host serializes ok
ok 1977 - Amazon::AWS::EC2::Types::Host deseralizes ok
# allocationTime
# autoPlacement
# availabilityZone
# availableCapacity
# availableInstanceCapacity
not ok 1978 - Amazon::AWS::EC2::Types::Host compares ok
# Failed test 'Amazon::AWS::EC2::Types::Host compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# allocationTime, autoPlacement, availabilityZone, availableCapacity, clientToken, hostId, hostProperties, hostRecovery, hostReservationId, instances, releaseTime, state, tags
# hostProperties -- Str
# Setting hostProperties to Amazon::AWS::EC2::Types::HostProperties.new(cores => Int, instanceType => Str, sockets => Int, totalVCpus => Int)
ok 1979 - Changed Amazon::AWS::EC2::Types::Host fails eqv
ok 1980 - Amazon::AWS::EC2::Types::HostReservation loads. Is not a Failure object
ok 1981 - Amazon::AWS::EC2::Types::HostReservation exists
ok 1982 - Amazon::AWS::EC2::Types::HostReservation can be populated
ok 1983 - Amazon::AWS::EC2::Types::HostReservation serializes ok
ok 1984 - Amazon::AWS::EC2::Types::HostReservation deseralizes ok
# count
# currencyCode
# duration
# end
# hostIds
SPKQChh
SPKQChh
rKiEvpZNBUgNBfM
rKiEvpZNBUgNBfM
DnWWO
DnWWO
# hostReservationId
# hourlyPrice
# instanceFamily
# offeringId
# paymentOption
# start
# state
# tags
# upfrontPrice
ok 1985 - Amazon::AWS::EC2::Types::HostReservation compares ok
# CHANGE!
# vicselect
# count, currencyCode, duration, end, hostIds, hostReservationId, hourlyPrice, instanceFamily, offeringId, paymentOption, start, state, tags, upfrontPrice
# hostReservationId -- Str
# Setting hostReservationId to syzygy!WKrSgACeNxvpTjRzoZqVRGbZQ
ok 1986 - Changed Amazon::AWS::EC2::Types::HostReservation fails eqv
ok 1987 - Amazon::AWS::EC2::Types::Image loads. Is not a Failure object
not ok 1988 - Amazon::AWS::EC2::Types::Image exists
# Failed test 'Amazon::AWS::EC2::Types::Image exists'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
Nil
Perl6::Metamodel::ClassHOW.new
# No such symbol 'Amazon::AWS::EC2::Types::Image'
not ok 1989 - Amazon::AWS::EC2::Types::Image can be populated
# Failed test 'Amazon::AWS::EC2::Types::Image can be populated'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such symbol 'Amazon::AWS::EC2::Types::Image'
not ok 1990 - Amazon::AWS::EC2::Types::Image serializes ok
# Failed test 'Amazon::AWS::EC2::Types::Image serializes ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such method 'to-xml' for invocant of type 'Any'
ok 1991 - Amazon::AWS::EC2::Types::Image deseralizes ok
# No such method 'eqv' for invocant of type 'Any'
ok 1992 - Amazon::AWS::EC2::Types::ImageDiskContainer loads. Is not a Failure object
ok 1993 - Amazon::AWS::EC2::Types::ImageDiskContainer exists
ok 1994 - Amazon::AWS::EC2::Types::ImageDiskContainer can be populated
ok 1995 - Amazon::AWS::EC2::Types::ImageDiskContainer serializes ok
ok 1996 - Amazon::AWS::EC2::Types::ImageDiskContainer deseralizes ok
# Description
# DeviceName
# Format
# SnapshotId
# Url
# UserBucket
# S3Bucket
not ok 1997 - Amazon::AWS::EC2::Types::ImageDiskContainer compares ok
# Failed test 'Amazon::AWS::EC2::Types::ImageDiskContainer compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# Description, DeviceName, Format, SnapshotId, Url, UserBucket
# Description -- Str
# Setting Description to syzygy!NJHRrVxiHPJKtIKeISrqjgEiZxhiqQ
ok 1998 - Changed Amazon::AWS::EC2::Types::ImageDiskContainer fails eqv
ok 1999 - Amazon::AWS::EC2::Types::ImportInstanceLaunchSpecification loads. Is not a Failure object
ok 2000 - Amazon::AWS::EC2::Types::ImportInstanceLaunchSpecification exists
ok 2001 - Amazon::AWS::EC2::Types::ImportInstanceLaunchSpecification can be populated
ok 2002 - Amazon::AWS::EC2::Types::ImportInstanceLaunchSpecification serializes ok
ok 2003 - Amazon::AWS::EC2::Types::ImportInstanceLaunchSpecification deseralizes ok
# AdditionalInfo
# Architecture
# GroupIds
# GroupNames
XBlYHOrZtFTqqdKymEDcvezXKZC
XBlYHOrZtFTqqdKymEDcvezXKZC
RdskVGm
RdskVGm
XutJPMuYczeKNnB
XutJPMuYczeKNnB
JXyosYLmimckyAgysjjEYzzKY
JXyosYLmimckyAgysjjEYzzKY
# InstanceInitiatedShutdownBehavior
# InstanceType
# Monitoring
# Placement
# Affinity
# AvailabilityZone
# GroupName
# HostId
# PartitionNumber
# SpreadDomain
# Tenancy
# affinity
# availabilityZone
# groupName
# hostId
# partitionNumber
# spreadDomain
# tenancy
# PrivateIpAddress
# SubnetId
# UserData
# Data
not ok 2004 - Amazon::AWS::EC2::Types::ImportInstanceLaunchSpecification compares ok
# Failed test 'Amazon::AWS::EC2::Types::ImportInstanceLaunchSpecification compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# AdditionalInfo, Architecture, GroupIds, GroupNames, InstanceInitiatedShutdownBehavior, InstanceType, Monitoring, Placement, PrivateIpAddress, SubnetId, UserData
# GroupIds -- Str
# Setting GroupIds to []
# Type check failed in assignment to @!GroupIds; expected Str but got Array[Str] (Array[Str].new())
ok 2005 - Amazon::AWS::EC2::Types::ImportInstanceTaskDetails loads. Is not a Failure object
ok 2006 - Amazon::AWS::EC2::Types::ImportInstanceTaskDetails exists
ok 2007 - Amazon::AWS::EC2::Types::ImportInstanceTaskDetails can be populated
ok 2008 - Amazon::AWS::EC2::Types::ImportInstanceTaskDetails serializes ok
ok 2009 - Amazon::AWS::EC2::Types::ImportInstanceTaskDetails deseralizes ok
# description
# instanceId
# platform
# volumes
Amazon::AWS::EC2::Types::ImportInstanceVolumeDetailItem.new(availabilityZone => "lYmPDlriOZizzeUjQohoobIPnXn", bytesConverted => 30, description => "dyekTDUsCALeHVn", image => Amazon::AWS::EC2::Types::DiskImageDescription.new(checksum => "sLkGfuipbOJBDiElMvOarUkD", format => "RAW", importManifestUrl => "upioLyyzqITzBGuSH", size => 29), status => "pYGKQeXuNdIDcYdzdGvFFDNK", statusMessage => "IoVUEyxjfxsVtkRdgOMIfqZvM", volume => Amazon::AWS::EC2::Types::DiskImageVolumeDescription.new(id => "QIUGB", size => 12))
Amazon::AWS::EC2::Types::ImportInstanceVolumeDetailItem.new(availabilityZone => "lYmPDlriOZizzeUjQohoobIPnXn", bytesConverted => 30, description => "dyekTDUsCALeHVn", image => Amazon::AWS::EC2::Types::DiskImageDescription.new(checksum => Str, format => Str, importManifestUrl => Str, size => Int), status => "pYGKQeXuNdIDcYdzdGvFFDNK", statusMessage => "IoVUEyxjfxsVtkRdgOMIfqZvM", volume => Amazon::AWS::EC2::Types::DiskImageVolumeDescription.new(id => Str, size => Int))
# availabilityZone
# bytesConverted
# description
# image
# checksum
not ok 2010 - Amazon::AWS::EC2::Types::ImportInstanceTaskDetails compares ok
# Failed test 'Amazon::AWS::EC2::Types::ImportInstanceTaskDetails compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# description, instanceId, platform, volumes
# platform -- Str
# Setting platform to syzygy!Windows
ok 2011 - Changed Amazon::AWS::EC2::Types::ImportInstanceTaskDetails fails eqv
ok 2012 - Amazon::AWS::EC2::Types::InstanceMarketOptionsRequest loads. Is not a Failure object
ok 2013 - Amazon::AWS::EC2::Types::InstanceMarketOptionsRequest exists
ok 2014 - Amazon::AWS::EC2::Types::InstanceMarketOptionsRequest can be populated
ok 2015 - Amazon::AWS::EC2::Types::InstanceMarketOptionsRequest serializes ok
ok 2016 - Amazon::AWS::EC2::Types::InstanceMarketOptionsRequest deseralizes ok
# MarketType
# SpotOptions
# BlockDurationMinutes
not ok 2017 - Amazon::AWS::EC2::Types::InstanceMarketOptionsRequest compares ok
# Failed test 'Amazon::AWS::EC2::Types::InstanceMarketOptionsRequest compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# MarketType, SpotOptions
# SpotOptions -- Str
# Setting SpotOptions to Amazon::AWS::EC2::Types::SpotMarketOptions.new(BlockDurationMinutes => Int, InstanceInterruptionBehavior => Str, MaxPrice => Str, SpotInstanceType => Str, ValidUntil => Str)
ok 2018 - Changed Amazon::AWS::EC2::Types::InstanceMarketOptionsRequest fails eqv
ok 2019 - Amazon::AWS::EC2::Types::InstanceMonitoring loads. Is not a Failure object
ok 2020 - Amazon::AWS::EC2::Types::InstanceMonitoring exists
ok 2021 - Amazon::AWS::EC2::Types::InstanceMonitoring can be populated
ok 2022 - Amazon::AWS::EC2::Types::InstanceMonitoring serializes ok
ok 2023 - Amazon::AWS::EC2::Types::InstanceMonitoring deseralizes ok
# instanceId
# monitoring
# state
not ok 2024 - Amazon::AWS::EC2::Types::InstanceMonitoring compares ok
# Failed test 'Amazon::AWS::EC2::Types::InstanceMonitoring compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# instanceId, monitoring
# monitoring -- Str
# Setting monitoring to Amazon::AWS::EC2::Types::Monitoring.new(state => Str)
ok 2025 - Changed Amazon::AWS::EC2::Types::InstanceMonitoring fails eqv
ok 2026 - Amazon::AWS::EC2::Types::InstanceNetworkInterface loads. Is not a Failure object
ok 2027 - Amazon::AWS::EC2::Types::InstanceNetworkInterface exists
ok 2028 - Amazon::AWS::EC2::Types::InstanceNetworkInterface can be populated
ok 2029 - Amazon::AWS::EC2::Types::InstanceNetworkInterface serializes ok
ok 2030 - Amazon::AWS::EC2::Types::InstanceNetworkInterface deseralizes ok
# association
# ipOwnerId
not ok 2031 - Amazon::AWS::EC2::Types::InstanceNetworkInterface compares ok
# Failed test 'Amazon::AWS::EC2::Types::InstanceNetworkInterface compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# association, attachment, description, groups, interfaceType, ipv6Addressess, macAddress, networkInterfaceId, ownerId, privateDnsName, privateIpAddress, privateIpAddressess, sourceDestCheck, status, subnetId, vpcId
# status -- Str
# Setting status to syzygy!available
ok 2032 - Changed Amazon::AWS::EC2::Types::InstanceNetworkInterface fails eqv
ok 2033 - Amazon::AWS::EC2::Types::InstanceNetworkInterfaceSpecification loads. Is not a Failure object
not ok 2034 - Amazon::AWS::EC2::Types::InstanceNetworkInterfaceSpecification exists
# Failed test 'Amazon::AWS::EC2::Types::InstanceNetworkInterfaceSpecification exists'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
Nil
Perl6::Metamodel::ClassHOW.new
# No such symbol 'Amazon::AWS::EC2::Types::InstanceNetworkInterfaceSpecification'
not ok 2035 - Amazon::AWS::EC2::Types::InstanceNetworkInterfaceSpecification can be populated
# Failed test 'Amazon::AWS::EC2::Types::InstanceNetworkInterfaceSpecification can be populated'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such symbol 'Amazon::AWS::EC2::Types::InstanceNetworkInterfaceSpecification'
not ok 2036 - Amazon::AWS::EC2::Types::InstanceNetworkInterfaceSpecification serializes ok
# Failed test 'Amazon::AWS::EC2::Types::InstanceNetworkInterfaceSpecification serializes ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such method 'to-xml' for invocant of type 'Any'
ok 2037 - Amazon::AWS::EC2::Types::InstanceNetworkInterfaceSpecification deseralizes ok
# No such method 'eqv' for invocant of type 'Any'
ok 2038 - Amazon::AWS::EC2::Types::InstanceStatus loads. Is not a Failure object
ok 2039 - Amazon::AWS::EC2::Types::InstanceStatus exists
ok 2040 - Amazon::AWS::EC2::Types::InstanceStatus can be populated
ok 2041 - Amazon::AWS::EC2::Types::InstanceStatus serializes ok
ok 2042 - Amazon::AWS::EC2::Types::InstanceStatus deseralizes ok
# availabilityZone
# eventss
Amazon::AWS::EC2::Types::InstanceStatusEvent.new(code => "instance", description => "bKwOCMuWeKMmtqPnGf", instanceEventId => "mFcJBvKAIeARFwpXPyauwGlga", notAfter => "mwlQFZpVZbdVBkHFoqXBFkdokuNY", notBefore => "tqTAcLAOaLQOSuvhpfrljJ", notBeforeDeadline => "kkBHTUEmTISmKwbrkNgYlSGNmYV")
Amazon::AWS::EC2::Types::InstanceStatusEvent.new(code => "instance", description => "bKwOCMuWeKMmtqPnGf", instanceEventId => "mFcJBvKAIeARFwpXPyauwGlga", notAfter => "mwlQFZpVZbdVBkHFoqXBFkdokuNY", notBefore => "tqTAcLAOaLQOSuvhpfrljJ", notBeforeDeadline => "kkBHTUEmTISmKwbrkNgYlSGNmYV")
# code
# description
# instanceEventId
# notAfter
# notBefore
# notBeforeDeadline
# instanceId
# instanceState
# code
not ok 2043 - Amazon::AWS::EC2::Types::InstanceStatus compares ok
# Failed test 'Amazon::AWS::EC2::Types::InstanceStatus compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# availabilityZone, eventss, instanceId, instanceState, instanceStatus, systemStatus
# systemStatus -- Str
# Setting systemStatus to Amazon::AWS::EC2::Types::InstanceStatusSummary.new(details => Array[Amazon::AWS::EC2::Types::InstanceStatusDetails].new(), status => Str)
ok 2044 - Changed Amazon::AWS::EC2::Types::InstanceStatus fails eqv
ok 2045 - Amazon::AWS::EC2::Types::InternetGateway loads. Is not a Failure object
ok 2046 - Amazon::AWS::EC2::Types::InternetGateway exists
ok 2047 - Amazon::AWS::EC2::Types::InternetGateway can be populated
ok 2048 - Amazon::AWS::EC2::Types::InternetGateway serializes ok
ok 2049 - Amazon::AWS::EC2::Types::InternetGateway deseralizes ok
# attachments
Amazon::AWS::EC2::Types::InternetGatewayAttachment.new(state => "attaching", vpcId => "nGEaQjkdcY")
Amazon::AWS::EC2::Types::InternetGatewayAttachment.new(state => "attaching", vpcId => "nGEaQjkdcY")
# state
# vpcId
Amazon::AWS::EC2::Types::InternetGatewayAttachment.new(state => "detached", vpcId => "tIMYOgzKYPotSInmNSI")
Amazon::AWS::EC2::Types::InternetGatewayAttachment.new(state => "detached", vpcId => "tIMYOgzKYPotSInmNSI")
# state
# vpcId
Amazon::AWS::EC2::Types::InternetGatewayAttachment.new(state => "attached", vpcId => "ZRWDCtJvexvk")
Amazon::AWS::EC2::Types::InternetGatewayAttachment.new(state => "attached", vpcId => "ZRWDCtJvexvk")
# state
# vpcId
Amazon::AWS::EC2::Types::InternetGatewayAttachment.new(state => "detaching", vpcId => "UmWJQNEhvPOTyimrvubfSsCMyDeOKU")
Amazon::AWS::EC2::Types::InternetGatewayAttachment.new(state => "detaching", vpcId => "UmWJQNEhvPOTyimrvubfSsCMyDeOKU")
# state
# vpcId
# internetGatewayId
# ownerId
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "phVSIxKZ", key => "SxjfF", Value => "ptROvzhYuXHb", value => "uyHGcLRrbNdI")
Amazon::AWS::EC2::Types::Tag.new(Key => "phVSIxKZ", key => "SxjfF", Value => "ptROvzhYuXHb", value => "uyHGcLRrbNdI")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "XLFGlNyDLcKRBqVkfCAceXHl", key => "uCacVgSaLlTFECgYonfypl", Value => "QdASInIyrAnEJwDC", value => "uJmswJDaCpCFKdMgGCDcQWAbbM")
Amazon::AWS::EC2::Types::Tag.new(Key => "XLFGlNyDLcKRBqVkfCAceXHl", key => "uCacVgSaLlTFECgYonfypl", Value => "QdASInIyrAnEJwDC", value => "uJmswJDaCpCFKdMgGCDcQWAbbM")
# Key
# key
# Value
# value
ok 2050 - Amazon::AWS::EC2::Types::InternetGateway compares ok
# CHANGE!
# vicselect
# attachments, internetGatewayId, ownerId, tags
# attachments -- Str
# Setting attachments to []
# Type check failed in assignment to @!attachments; expected Amazon::AWS::EC2::Types::InternetGatewayAttachment but got Array[Amazon::AWS::EC2::Types::InternetGatewayAttachment] (Array[Amazon::AWS::EC2::Types::InternetGatewayAttachment].new())
ok 2051 - Amazon::AWS::EC2::Types::IpPermission loads. Is not a Failure object
ok 2052 - Amazon::AWS::EC2::Types::IpPermission exists
ok 2053 - Amazon::AWS::EC2::Types::IpPermission can be populated
ok 2054 - Amazon::AWS::EC2::Types::IpPermission serializes ok
ok 2055 - Amazon::AWS::EC2::Types::IpPermission deseralizes ok
# FromPort
# fromPort
# UserIdGroupPairs
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "VaUeOFlCBSdhqzQpo", description => "zIXhdYKuOftLWZpiCGnwYz", GroupId => "XHbqkAPgVNYIwnhSctrAPSouj", groupId => "SKZegoSawxKvZrvoJBUpn", GroupName => "yOFIovhLHFqEBhCKdEr", groupName => "TSsTCN", PeeringStatus => "mOhjv", peeringStatus => "kxYAsvTqRRbZPOffzMfjMw", UserId => "Gistt", userId => "OSIJD", VpcId => "cYArNzbBosynaeISDsRMWJAR", vpcId => "cpdbKlZTZPEUb", VpcPeeringConnectionId => "kNYnpR", vpcPeeringConnectionId => "pFEORwhALLQBCrNKr")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "VaUeOFlCBSdhqzQpo", description => "zIXhdYKuOftLWZpiCGnwYz", GroupId => "XHbqkAPgVNYIwnhSctrAPSouj", groupId => "SKZegoSawxKvZrvoJBUpn", GroupName => "yOFIovhLHFqEBhCKdEr", groupName => "TSsTCN", PeeringStatus => "mOhjv", peeringStatus => "kxYAsvTqRRbZPOffzMfjMw", UserId => "Gistt", userId => "OSIJD", VpcId => "cYArNzbBosynaeISDsRMWJAR", vpcId => "cpdbKlZTZPEUb", VpcPeeringConnectionId => "kNYnpR", vpcPeeringConnectionId => "pFEORwhALLQBCrNKr")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
# groups
# IpProtocol
# ipProtocol
# IpRanges
# ipRanges
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "HRrtzAKBbLEFH", cidrIp => "EciIduu", Description => "tmYJRiNlNx", description => "zAXOyBdCxwSclyJ")
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "HRrtzAKBbLEFH", cidrIp => "EciIduu", Description => "tmYJRiNlNx", description => "zAXOyBdCxwSclyJ")
# CidrIp
# cidrIp
# Description
# description
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "kixUGEcEjIEjU", cidrIp => "mAJakKvqWyhgrcBEXxXBZPELPAh", Description => "bDTGoCqHtcFjmnEuUmHhQkeacBU", description => "HQiEhlZuixzMzAiOeBXhP")
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "kixUGEcEjIEjU", cidrIp => "mAJakKvqWyhgrcBEXxXBZPELPAh", Description => "bDTGoCqHtcFjmnEuUmHhQkeacBU", description => "HQiEhlZuixzMzAiOeBXhP")
# CidrIp
# cidrIp
# Description
# description
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "gEIqGbKucmExyyfGEmUi", cidrIp => "SKABzAtexsXgtZUdQcqm", Description => "rdOwPqDQhVdis", description => "AQyXSgDYyAYoYLkzTmfNAaf")
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "gEIqGbKucmExyyfGEmUi", cidrIp => "SKABzAtexsXgtZUdQcqm", Description => "rdOwPqDQhVdis", description => "AQyXSgDYyAYoYLkzTmfNAaf")
# CidrIp
# cidrIp
# Description
# description
# Ipv6Ranges
# ipv6Ranges
Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "gJnMshBKiHgtMMWY", cidrIpv6 => "NtyIFoRIUzenFWTCy", Description => "hQpUJXKWdWgZmhTtGqzCHWHUg", description => "RfpgWckbvejYXctrvBZaLNZq")
Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "gJnMshBKiHgtMMWY", cidrIpv6 => "NtyIFoRIUzenFWTCy", Description => "hQpUJXKWdWgZmhTtGqzCHWHUg", description => "RfpgWckbvejYXctrvBZaLNZq")
# CidrIpv6
# cidrIpv6
# Description
# description
# PrefixListIds
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "TocNIzRhL", description => "AkmGevOkWfurCVGwHlITxSmnCpXiB", PrefixListId => "VTURkbzsFyRTgeadtlBQkTKkDENV", prefixListId => "WjRSvaUxD")
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "TocNIzRhL", description => "AkmGevOkWfurCVGwHlITxSmnCpXiB", PrefixListId => "VTURkbzsFyRTgeadtlBQkTKkDENV", prefixListId => "WjRSvaUxD")
# Description
# description
# PrefixListId
# prefixListId
# prefixListIds
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "klSriuLH", description => "CPGgNxKkincVfcTP", PrefixListId => "gTPzHbbKpflHrJ", prefixListId => "ToeSHNoSXpPHdtYpzeuJFIYFe")
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "klSriuLH", description => "CPGgNxKkincVfcTP", PrefixListId => "gTPzHbbKpflHrJ", prefixListId => "ToeSHNoSXpPHdtYpzeuJFIYFe")
# Description
# description
# PrefixListId
# prefixListId
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "FQSdhxkzmrUkO", description => "uYxecZbWDxTlhqIWMvXbv", PrefixListId => "rjOBHvO", prefixListId => "SFhRsMLeGoMbOvUQj")
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "FQSdhxkzmrUkO", description => "uYxecZbWDxTlhqIWMvXbv", PrefixListId => "rjOBHvO", prefixListId => "SFhRsMLeGoMbOvUQj")
# Description
# description
# PrefixListId
# prefixListId
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "dwNYNwArWObTppJdjCSWHjSVxw", description => "GobPtTE", PrefixListId => "PCGDqnOsYpwmdrcSfKr", prefixListId => "lDnOwQaKOIOSXLvduUUYjfIKfuhF")
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "dwNYNwArWObTppJdjCSWHjSVxw", description => "GobPtTE", PrefixListId => "PCGDqnOsYpwmdrcSfKr", prefixListId => "lDnOwQaKOIOSXLvduUUYjfIKfuhF")
# Description
# description
# PrefixListId
# prefixListId
# ToPort
# toPort
ok 2056 - Amazon::AWS::EC2::Types::IpPermission compares ok
# CHANGE!
# vicselect
# FromPort, fromPort, UserIdGroupPairs, groups, IpProtocol, ipProtocol, IpRanges, ipRanges, Ipv6Ranges, ipv6Ranges, PrefixListIds, prefixListIds, ToPort, toPort
# Ipv6Ranges -- Str
# Setting Ipv6Ranges to []
# Type check failed in assignment to @!Ipv6Ranges; expected Amazon::AWS::EC2::Types::Ipv6Range but got Array[Amazon::AWS::EC2::Types::Ipv6Range] (Array[Amazon::AWS::EC2::Types::Ipv6Range].new())
ok 2057 - Amazon::AWS::EC2::Types::LaunchSpecification loads. Is not a Failure object
not ok 2058 - Amazon::AWS::EC2::Types::LaunchSpecification exists
# Failed test 'Amazon::AWS::EC2::Types::LaunchSpecification exists'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
Nil
Perl6::Metamodel::ClassHOW.new
# No such symbol 'Amazon::AWS::EC2::Types::LaunchSpecification'
not ok 2059 - Amazon::AWS::EC2::Types::LaunchSpecification can be populated
# Failed test 'Amazon::AWS::EC2::Types::LaunchSpecification can be populated'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such symbol 'Amazon::AWS::EC2::Types::LaunchSpecification'
not ok 2060 - Amazon::AWS::EC2::Types::LaunchSpecification serializes ok
# Failed test 'Amazon::AWS::EC2::Types::LaunchSpecification serializes ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such method 'to-xml' for invocant of type 'Any'
ok 2061 - Amazon::AWS::EC2::Types::LaunchSpecification deseralizes ok
# No such method 'eqv' for invocant of type 'Any'
ok 2062 - Amazon::AWS::EC2::Types::LaunchTemplate loads. Is not a Failure object
ok 2063 - Amazon::AWS::EC2::Types::LaunchTemplate exists
ok 2064 - Amazon::AWS::EC2::Types::LaunchTemplate can be populated
ok 2065 - Amazon::AWS::EC2::Types::LaunchTemplate serializes ok
ok 2066 - Amazon::AWS::EC2::Types::LaunchTemplate deseralizes ok
# createdBy
# createTime
# defaultVersionNumber
# latestVersionNumber
# launchTemplateId
# launchTemplateName
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "dNQObxKkREeH", key => "IlLjSOttVDHHqyGdFCq", Value => "ztFRvybxXliNUuNpczpVsdpmZ", value => "YyoIAgeJZYxKBrLwkqDI")
Amazon::AWS::EC2::Types::Tag.new(Key => "dNQObxKkREeH", key => "IlLjSOttVDHHqyGdFCq", Value => "ztFRvybxXliNUuNpczpVsdpmZ", value => "YyoIAgeJZYxKBrLwkqDI")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "ffxhtWYHeLGDhDIVPRSujhCDTBzqZS", key => "gaoCbYKY", Value => "ojKVGDBD", value => "KOMWsJd")
Amazon::AWS::EC2::Types::Tag.new(Key => "ffxhtWYHeLGDhDIVPRSujhCDTBzqZS", key => "gaoCbYKY", Value => "ojKVGDBD", value => "KOMWsJd")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "sasBVuQHHAUiAwqDygBJWyPI", key => "ukBSkcYWgmMWHRbZghialDWr", Value => "aINfF", value => "kVoqsLxjVkQBkU")
Amazon::AWS::EC2::Types::Tag.new(Key => "sasBVuQHHAUiAwqDygBJWyPI", key => "ukBSkcYWgmMWHRbZghialDWr", Value => "aINfF", value => "kVoqsLxjVkQBkU")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "hrxjyLHpJYSNPo", key => "EyvmxoSFKG", Value => "PCLoVMIhaO", value => "kZXXMnSLdYObfNfTtiD")
Amazon::AWS::EC2::Types::Tag.new(Key => "hrxjyLHpJYSNPo", key => "EyvmxoSFKG", Value => "PCLoVMIhaO", value => "kZXXMnSLdYObfNfTtiD")
# Key
# key
# Value
# value
ok 2067 - Amazon::AWS::EC2::Types::LaunchTemplate compares ok
# CHANGE!
# vicselect
# createdBy, createTime, defaultVersionNumber, latestVersionNumber, launchTemplateId, launchTemplateName, tags
# launchTemplateName -- Str
# Setting launchTemplateName to syzygy!IFVGgFoDAANynxKnyqk
ok 2068 - Changed Amazon::AWS::EC2::Types::LaunchTemplate fails eqv
ok 2069 - Amazon::AWS::EC2::Types::LaunchTemplateAndOverridesResponse loads. Is not a Failure object
ok 2070 - Amazon::AWS::EC2::Types::LaunchTemplateAndOverridesResponse exists
ok 2071 - Amazon::AWS::EC2::Types::LaunchTemplateAndOverridesResponse can be populated
ok 2072 - Amazon::AWS::EC2::Types::LaunchTemplateAndOverridesResponse serializes ok
ok 2073 - Amazon::AWS::EC2::Types::LaunchTemplateAndOverridesResponse deseralizes ok
# launchTemplateSpecification
# LaunchTemplateId
not ok 2074 - Amazon::AWS::EC2::Types::LaunchTemplateAndOverridesResponse compares ok
# Failed test 'Amazon::AWS::EC2::Types::LaunchTemplateAndOverridesResponse compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# launchTemplateSpecification, overrides
# overrides -- Str
# Setting overrides to Amazon::AWS::EC2::Types::FleetLaunchTemplateOverrides.new(availabilityZone => Str, instanceType => Str, maxPrice => Str, placement => Amazon::AWS::EC2::Types::PlacementResponse, priority => Num, subnetId => Str, weightedCapacity => Num)
ok 2075 - Changed Amazon::AWS::EC2::Types::LaunchTemplateAndOverridesResponse fails eqv
ok 2076 - Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMapping loads. Is not a Failure object
ok 2077 - Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMapping exists
ok 2078 - Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMapping can be populated
ok 2079 - Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMapping serializes ok
ok 2080 - Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMapping deseralizes ok
# deviceName
# ebs
# deleteOnTermination
not ok 2081 - Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMapping compares ok
# Failed test 'Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMapping compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# deviceName, ebs, noDevice, virtualName
# deviceName -- Str
# Setting deviceName to syzygy!rRfVbMcxtLsdqxoeDQDH
ok 2082 - Changed Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMapping fails eqv
ok 2083 - Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMappingRequest loads. Is not a Failure object
ok 2084 - Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMappingRequest exists
ok 2085 - Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMappingRequest can be populated
ok 2086 - Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMappingRequest serializes ok
ok 2087 - Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMappingRequest deseralizes ok
# DeviceName
# Ebs
# DeleteOnTermination
not ok 2088 - Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMappingRequest compares ok
# Failed test 'Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMappingRequest compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# DeviceName, Ebs, NoDevice, VirtualName
# VirtualName -- Str
# Setting VirtualName to syzygy!kzPpOFCIjuaJnfWF
ok 2089 - Changed Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMappingRequest fails eqv
ok 2090 - Amazon::AWS::EC2::Types::LaunchTemplateConfig loads. Is not a Failure object
ok 2091 - Amazon::AWS::EC2::Types::LaunchTemplateConfig exists
ok 2092 - Amazon::AWS::EC2::Types::LaunchTemplateConfig can be populated
ok 2093 - Amazon::AWS::EC2::Types::LaunchTemplateConfig serializes ok
ok 2094 - Amazon::AWS::EC2::Types::LaunchTemplateConfig deseralizes ok
# LaunchTemplateSpecification
# LaunchTemplateId
not ok 2095 - Amazon::AWS::EC2::Types::LaunchTemplateConfig compares ok
# Failed test 'Amazon::AWS::EC2::Types::LaunchTemplateConfig compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# LaunchTemplateSpecification, launchTemplateSpecification, Overrides, overrides
# launchTemplateSpecification -- Str
# Setting launchTemplateSpecification to Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecification.new(LaunchTemplateId => Str, launchTemplateId => Str, LaunchTemplateName => Str, launchTemplateName => Str, Version => Str, version => Str)
ok 2096 - Changed Amazon::AWS::EC2::Types::LaunchTemplateConfig fails eqv
ok 2097 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceMarketOptions loads. Is not a Failure object
ok 2098 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceMarketOptions exists
ok 2099 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceMarketOptions can be populated
ok 2100 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceMarketOptions serializes ok
ok 2101 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceMarketOptions deseralizes ok
# marketType
# spotOptions
# blockDurationMinutes
not ok 2102 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceMarketOptions compares ok
# Failed test 'Amazon::AWS::EC2::Types::LaunchTemplateInstanceMarketOptions compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# marketType, spotOptions
# marketType -- Str
# Setting marketType to syzygy!spot
ok 2103 - Changed Amazon::AWS::EC2::Types::LaunchTemplateInstanceMarketOptions fails eqv
ok 2104 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceMarketOptionsRequest loads. Is not a Failure object
ok 2105 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceMarketOptionsRequest exists
ok 2106 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceMarketOptionsRequest can be populated
ok 2107 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceMarketOptionsRequest serializes ok
ok 2108 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceMarketOptionsRequest deseralizes ok
# MarketType
# SpotOptions
# BlockDurationMinutes
not ok 2109 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceMarketOptionsRequest compares ok
# Failed test 'Amazon::AWS::EC2::Types::LaunchTemplateInstanceMarketOptionsRequest compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# MarketType, SpotOptions
# SpotOptions -- Str
# Setting SpotOptions to Amazon::AWS::EC2::Types::LaunchTemplateSpotMarketOptionsRequest.new(BlockDurationMinutes => Int, InstanceInterruptionBehavior => Str, MaxPrice => Str, SpotInstanceType => Str, ValidUntil => Str)
ok 2110 - Changed Amazon::AWS::EC2::Types::LaunchTemplateInstanceMarketOptionsRequest fails eqv
ok 2111 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceNetworkInterfaceSpecification loads. Is not a Failure object
ok 2112 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceNetworkInterfaceSpecification exists
ok 2113 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceNetworkInterfaceSpecification can be populated
ok 2114 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceNetworkInterfaceSpecification serializes ok
ok 2115 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceNetworkInterfaceSpecification deseralizes ok
# associatePublicIpAddress
# deleteOnTermination
# description
# deviceIndex
# groups
# interfaceType
# ipv6AddressCount
# ipv6Addressess
Amazon::AWS::EC2::Types::InstanceIpv6Address.new(Ipv6Address => "QGehnVeQCagaXdJ", ipv6Address => "yjevlOMwWRbwfaTiUCcZSFO")
Amazon::AWS::EC2::Types::InstanceIpv6Address.new(Ipv6Address => "QGehnVeQCagaXdJ", ipv6Address => "yjevlOMwWRbwfaTiUCcZSFO")
# Ipv6Address
# ipv6Address
Amazon::AWS::EC2::Types::InstanceIpv6Address.new(Ipv6Address => "WcjCfJrQfzgDpkMd", ipv6Address => "GRGagXdjvock")
Amazon::AWS::EC2::Types::InstanceIpv6Address.new(Ipv6Address => "WcjCfJrQfzgDpkMd", ipv6Address => "GRGagXdjvock")
# Ipv6Address
# ipv6Address
Amazon::AWS::EC2::Types::InstanceIpv6Address.new(Ipv6Address => "qjPDolPnLQjE", ipv6Address => "KcZBkbLaBrRJ")
Amazon::AWS::EC2::Types::InstanceIpv6Address.new(Ipv6Address => "qjPDolPnLQjE", ipv6Address => "KcZBkbLaBrRJ")
# Ipv6Address
# ipv6Address
Amazon::AWS::EC2::Types::InstanceIpv6Address.new(Ipv6Address => "ojwYxYUtijzjSr", ipv6Address => "zMXUWbiE")
Amazon::AWS::EC2::Types::InstanceIpv6Address.new(Ipv6Address => "ojwYxYUtijzjSr", ipv6Address => "zMXUWbiE")
# Ipv6Address
# ipv6Address
# networkInterfaceId
# privateIpAddress
# privateIpAddressess
Amazon::AWS::EC2::Types::PrivateIpAddressSpecification.new(Primary => Bool::False, primary => Bool::True, PrivateIpAddress => "sFuQbRhTtNwnoHv", privateIpAddress => "eytjpLImcwnAtSZTU")
Amazon::AWS::EC2::Types::PrivateIpAddressSpecification.new(Primary => Bool::False, primary => Bool::True, PrivateIpAddress => "sFuQbRhTtNwnoHv", privateIpAddress => "eytjpLImcwnAtSZTU")
# Primary
# primary
# PrivateIpAddress
# privateIpAddress
# secondaryPrivateIpAddressCount
# subnetId
ok 2116 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceNetworkInterfaceSpecification compares ok
# CHANGE!
# vicselect
# associatePublicIpAddress, deleteOnTermination, description, deviceIndex, groups, interfaceType, ipv6AddressCount, ipv6Addressess, networkInterfaceId, privateIpAddress, privateIpAddressess, secondaryPrivateIpAddressCount, subnetId
# subnetId -- Str
# Setting subnetId to syzygy!RDGJsdpxFpVqVzLEacLoAz
ok 2117 - Changed Amazon::AWS::EC2::Types::LaunchTemplateInstanceNetworkInterfaceSpecification fails eqv
ok 2118 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest loads. Is not a Failure object
ok 2119 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest exists
ok 2120 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest can be populated
ok 2121 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest serializes ok
ok 2122 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest deseralizes ok
# AssociatePublicIpAddress
# DeleteOnTermination
# Description
# DeviceIndex
# InterfaceType
# Ipv6AddressCount
# Ipv6Addresses
# NetworkInterfaceId
# PrivateIpAddress
# PrivateIpAddresses
Amazon::AWS::EC2::Types::PrivateIpAddressSpecification.new(Primary => Bool::True, primary => Bool::True, PrivateIpAddress => "cKbNGAXKme", privateIpAddress => "DfPXTOIJuqIuyVfLBObMDGZHAqvo")
Amazon::AWS::EC2::Types::PrivateIpAddressSpecification.new(Primary => Bool::True, primary => Bool::True, PrivateIpAddress => "cKbNGAXKme", privateIpAddress => "DfPXTOIJuqIuyVfLBObMDGZHAqvo")
# Primary
# primary
# PrivateIpAddress
# privateIpAddress
Amazon::AWS::EC2::Types::PrivateIpAddressSpecification.new(Primary => Bool::False, primary => Bool::False, PrivateIpAddress => "hiDMv", privateIpAddress => "mqyyTgZrkRnvMW")
Amazon::AWS::EC2::Types::PrivateIpAddressSpecification.new(Primary => Bool::False, primary => Bool::False, PrivateIpAddress => "hiDMv", privateIpAddress => "mqyyTgZrkRnvMW")
# Primary
# primary
# PrivateIpAddress
# privateIpAddress
Amazon::AWS::EC2::Types::PrivateIpAddressSpecification.new(Primary => Bool::False, primary => Bool::False, PrivateIpAddress => "zMAjLkVW", privateIpAddress => "jGwDgozIwdnsRGa")
Amazon::AWS::EC2::Types::PrivateIpAddressSpecification.new(Primary => Bool::False, primary => Bool::False, PrivateIpAddress => "zMAjLkVW", privateIpAddress => "jGwDgozIwdnsRGa")
# Primary
# primary
# PrivateIpAddress
# privateIpAddress
# SecondaryPrivateIpAddressCount
# Groups
OkfNgExjryIRP
OkfNgExjryIRP
# SubnetId
ok 2123 - Amazon::AWS::EC2::Types::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest compares ok
# CHANGE!
# vicselect
# AssociatePublicIpAddress, DeleteOnTermination, Description, DeviceIndex, InterfaceType, Ipv6AddressCount, Ipv6Addresses, NetworkInterfaceId, PrivateIpAddress, PrivateIpAddresses, SecondaryPrivateIpAddressCount, Groups, SubnetId
# Ipv6Addresses -- Str
# Setting Ipv6Addresses to []
# Type check failed in assignment to @!Ipv6Addresses; expected Amazon::AWS::EC2::Types::InstanceIpv6AddressRequest but got Array[Amazon::AWS::EC2::Types::InstanceIpv6AddressRequest] (Array[Amazon::AWS::EC2::Types::InstanceIpv6AddressRequest].new())
ok 2124 - Amazon::AWS::EC2::Types::LaunchTemplateTagSpecification loads. Is not a Failure object
ok 2125 - Amazon::AWS::EC2::Types::LaunchTemplateTagSpecification exists
ok 2126 - Amazon::AWS::EC2::Types::LaunchTemplateTagSpecification can be populated
ok 2127 - Amazon::AWS::EC2::Types::LaunchTemplateTagSpecification serializes ok
ok 2128 - Amazon::AWS::EC2::Types::LaunchTemplateTagSpecification deseralizes ok
# resourceType
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "JsVfIIpmAxAwN", key => "SLdvvg", Value => "NeIaDSRQSGEPUlrTfngIPkmf", value => "auZMKXZDtonAyTXUIzm")
Amazon::AWS::EC2::Types::Tag.new(Key => "JsVfIIpmAxAwN", key => "SLdvvg", Value => "NeIaDSRQSGEPUlrTfngIPkmf", value => "auZMKXZDtonAyTXUIzm")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "ZMWnTfdAAsaxJL", key => "AiAvzVXPjyNrNLCoXHUygGDMbKabJ", Value => "qbvXkFgwYjuNsUp", value => "zGpvVLYAjGgZukOKMCNRfiHx")
Amazon::AWS::EC2::Types::Tag.new(Key => "ZMWnTfdAAsaxJL", key => "AiAvzVXPjyNrNLCoXHUygGDMbKabJ", Value => "qbvXkFgwYjuNsUp", value => "zGpvVLYAjGgZukOKMCNRfiHx")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "BfjUYSswVZwFPK", key => "RISlkAYDmoGMGKdgwnR", Value => "qjLnouYQCnPs", value => "UoMmqAhKkpfel")
Amazon::AWS::EC2::Types::Tag.new(Key => "BfjUYSswVZwFPK", key => "RISlkAYDmoGMGKdgwnR", Value => "qjLnouYQCnPs", value => "UoMmqAhKkpfel")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "WUsSlESehxWEiFbEIRPdKaWUO", key => "cmeOyioaQHDRQGcOTGhyffOSKlShe", Value => "KlVHpEjAQfqXeGJRTvMknYbLNGvd", value => "zLxjFSvQgGTtR")
Amazon::AWS::EC2::Types::Tag.new(Key => "WUsSlESehxWEiFbEIRPdKaWUO", key => "cmeOyioaQHDRQGcOTGhyffOSKlShe", Value => "KlVHpEjAQfqXeGJRTvMknYbLNGvd", value => "zLxjFSvQgGTtR")
# Key
# key
# Value
# value
ok 2129 - Amazon::AWS::EC2::Types::LaunchTemplateTagSpecification compares ok
# CHANGE!
# vicselect
# resourceType, tags
# resourceType -- Str
# Setting resourceType to syzygy!client
ok 2130 - Changed Amazon::AWS::EC2::Types::LaunchTemplateTagSpecification fails eqv
ok 2131 - Amazon::AWS::EC2::Types::LaunchTemplateTagSpecificationRequest loads. Is not a Failure object
ok 2132 - Amazon::AWS::EC2::Types::LaunchTemplateTagSpecificationRequest exists
ok 2133 - Amazon::AWS::EC2::Types::LaunchTemplateTagSpecificationRequest can be populated
ok 2134 - Amazon::AWS::EC2::Types::LaunchTemplateTagSpecificationRequest serializes ok
ok 2135 - Amazon::AWS::EC2::Types::LaunchTemplateTagSpecificationRequest deseralizes ok
# ResourceType
# Tags
Amazon::AWS::EC2::Types::Tag.new(Key => "EuvYxfclyQsrFsdhKWlQZud", key => "qdpMnrMhaSKrRelaeVxiiMIrgA", Value => "cANbbofUBpNFCXaYKpwpIInbDo", value => "ILQrf")
Amazon::AWS::EC2::Types::Tag.new(Key => "EuvYxfclyQsrFsdhKWlQZud", key => "qdpMnrMhaSKrRelaeVxiiMIrgA", Value => "cANbbofUBpNFCXaYKpwpIInbDo", value => "ILQrf")
# Key
# key
# Value
# value
ok 2136 - Amazon::AWS::EC2::Types::LaunchTemplateTagSpecificationRequest compares ok
# CHANGE!
# vicselect
# ResourceType, Tags
# Tags -- Str
# Setting Tags to []
# Type check failed in assignment to @!Tags; expected Amazon::AWS::EC2::Types::Tag but got Array[Amazon::AWS::EC2::Types::Tag] (Array[Amazon::AWS::EC2::Types::Tag].new())
ok 2137 - Amazon::AWS::EC2::Types::LoadBalancersConfig loads. Is not a Failure object
ok 2138 - Amazon::AWS::EC2::Types::LoadBalancersConfig exists
ok 2139 - Amazon::AWS::EC2::Types::LoadBalancersConfig can be populated
ok 2140 - Amazon::AWS::EC2::Types::LoadBalancersConfig serializes ok
ok 2141 - Amazon::AWS::EC2::Types::LoadBalancersConfig deseralizes ok
# ClassicLoadBalancersConfig
# ClassicLoadBalancers
not ok 2142 - Amazon::AWS::EC2::Types::LoadBalancersConfig compares ok
# Failed test 'Amazon::AWS::EC2::Types::LoadBalancersConfig compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# ClassicLoadBalancersConfig, classicLoadBalancersConfig, TargetGroupsConfig, targetGroupsConfig
# ClassicLoadBalancersConfig -- Str
# Setting ClassicLoadBalancersConfig to Amazon::AWS::EC2::Types::ClassicLoadBalancersConfig.new(ClassicLoadBalancers => Array[Amazon::AWS::EC2::Types::ClassicLoadBalancer].new(), classicLoadBalancers => Array[Amazon::AWS::EC2::Types::ClassicLoadBalancer].new())
ok 2143 - Changed Amazon::AWS::EC2::Types::LoadBalancersConfig fails eqv
ok 2144 - Amazon::AWS::EC2::Types::LoadPermissionModifications loads. Is not a Failure object
ok 2145 - Amazon::AWS::EC2::Types::LoadPermissionModifications exists
ok 2146 - Amazon::AWS::EC2::Types::LoadPermissionModifications can be populated
ok 2147 - Amazon::AWS::EC2::Types::LoadPermissionModifications serializes ok
ok 2148 - Amazon::AWS::EC2::Types::LoadPermissionModifications deseralizes ok
# Add
Amazon::AWS::EC2::Types::LoadPermissionRequest.new(Group => "all", UserId => "ZLJJUlMaezRjhYFxus")
Amazon::AWS::EC2::Types::LoadPermissionRequest.new(Group => "all", UserId => "ZLJJUlMaezRjhYFxus")
# Group
# UserId
# Remove
Amazon::AWS::EC2::Types::LoadPermissionRequest.new(Group => "all", UserId => "GbFAAvnBsPoqqoxUJCTfOGmd")
Amazon::AWS::EC2::Types::LoadPermissionRequest.new(Group => "all", UserId => "GbFAAvnBsPoqqoxUJCTfOGmd")
# Group
# UserId
ok 2149 - Amazon::AWS::EC2::Types::LoadPermissionModifications compares ok
# CHANGE!
# vicselect
# Add, Remove
# Remove -- Str
# Setting Remove to []
# Type check failed in assignment to @!Remove; expected Amazon::AWS::EC2::Types::LoadPermissionRequest but got Array[Amazon::AWS::EC2::Types::LoadPermissionRequest] (Array[Amazon::AWS::EC2::Types::LoadPermissionRequest].new())
ok 2150 - Amazon::AWS::EC2::Types::NatGateway loads. Is not a Failure object
ok 2151 - Amazon::AWS::EC2::Types::NatGateway exists
ok 2152 - Amazon::AWS::EC2::Types::NatGateway can be populated
ok 2153 - Amazon::AWS::EC2::Types::NatGateway serializes ok
ok 2154 - Amazon::AWS::EC2::Types::NatGateway deseralizes ok
# createTime
# deleteTime
# failureCode
# failureMessage
# natGatewayAddresss
Amazon::AWS::EC2::Types::NatGatewayAddress.new(allocationId => "zRHURaVFIF", networkInterfaceId => "SrPeDKjRTJGcChawJKfSsfzOOWYwb", privateIp => "DxsyyuHTGe", publicIp => "ctGzdOCNMatbXOXNiJTexekS")
Amazon::AWS::EC2::Types::NatGatewayAddress.new(allocationId => "zRHURaVFIF", networkInterfaceId => "SrPeDKjRTJGcChawJKfSsfzOOWYwb", privateIp => "DxsyyuHTGe", publicIp => "ctGzdOCNMatbXOXNiJTexekS")
# allocationId
# networkInterfaceId
# privateIp
# publicIp
Amazon::AWS::EC2::Types::NatGatewayAddress.new(allocationId => "TroWeAdfmdYtgtIVCLQGwKhRbXERTH", networkInterfaceId => "YLTiFZEYipbgFaUVQDL", privateIp => "TThcbq", publicIp => "tFVmWSjAIYuVcRLysRQKqqAieAKn")
Amazon::AWS::EC2::Types::NatGatewayAddress.new(allocationId => "TroWeAdfmdYtgtIVCLQGwKhRbXERTH", networkInterfaceId => "YLTiFZEYipbgFaUVQDL", privateIp => "TThcbq", publicIp => "tFVmWSjAIYuVcRLysRQKqqAieAKn")
# allocationId
# networkInterfaceId
# privateIp
# publicIp
Amazon::AWS::EC2::Types::NatGatewayAddress.new(allocationId => "krWATeoNzVcoTBKxGkgGSUnnucG", networkInterfaceId => "MKufSrfxBaZ", privateIp => "NkIupuNNLTtCMTxJdRW", publicIp => "pbYhgeDNOafHe")
Amazon::AWS::EC2::Types::NatGatewayAddress.new(allocationId => "krWATeoNzVcoTBKxGkgGSUnnucG", networkInterfaceId => "MKufSrfxBaZ", privateIp => "NkIupuNNLTtCMTxJdRW", publicIp => "pbYhgeDNOafHe")
# allocationId
# networkInterfaceId
# privateIp
# publicIp
# natGatewayId
# provisionedBandwidth
# provisioned
not ok 2155 - Amazon::AWS::EC2::Types::NatGateway compares ok
# Failed test 'Amazon::AWS::EC2::Types::NatGateway compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# createTime, deleteTime, failureCode, failureMessage, natGatewayAddresss, natGatewayId, provisionedBandwidth, state, subnetId, tags, vpcId
# createTime -- Str
# Setting createTime to syzygy!dKjebFYjhF
ok 2156 - Changed Amazon::AWS::EC2::Types::NatGateway fails eqv
ok 2157 - Amazon::AWS::EC2::Types::NetworkAclEntry loads. Is not a Failure object
ok 2158 - Amazon::AWS::EC2::Types::NetworkAclEntry exists
ok 2159 - Amazon::AWS::EC2::Types::NetworkAclEntry can be populated
ok 2160 - Amazon::AWS::EC2::Types::NetworkAclEntry serializes ok
ok 2161 - Amazon::AWS::EC2::Types::NetworkAclEntry deseralizes ok
# cidrBlock
# egress
# icmpTypeCode
# Code
not ok 2162 - Amazon::AWS::EC2::Types::NetworkAclEntry compares ok
# Failed test 'Amazon::AWS::EC2::Types::NetworkAclEntry compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# cidrBlock, egress, icmpTypeCode, ipv6CidrBlock, portRange, protocol, ruleAction, ruleNumber
# protocol -- Str
# Setting protocol to syzygy!JzigWRYxksnAXXjfXgVxyojUu
ok 2163 - Changed Amazon::AWS::EC2::Types::NetworkAclEntry fails eqv
ok 2164 - Amazon::AWS::EC2::Types::NetworkInterface loads. Is not a Failure object
ok 2165 - Amazon::AWS::EC2::Types::NetworkInterface exists
ok 2166 - Amazon::AWS::EC2::Types::NetworkInterface can be populated
ok 2167 - Amazon::AWS::EC2::Types::NetworkInterface serializes ok
ok 2168 - Amazon::AWS::EC2::Types::NetworkInterface deseralizes ok
# association
# allocationId
not ok 2169 - Amazon::AWS::EC2::Types::NetworkInterface compares ok
# Failed test 'Amazon::AWS::EC2::Types::NetworkInterface compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# association, attachment, availabilityZone, description, groups, interfaceType, ipv6Addressess, macAddress, networkInterfaceId, ownerId, privateDnsName, privateIpAddress, privateIpAddressess, requesterId, requesterManaged, sourceDestCheck, status, subnetId, tags, vpcId
# vpcId -- Str
# Setting vpcId to syzygy!CrOecRi
ok 2170 - Changed Amazon::AWS::EC2::Types::NetworkInterface fails eqv
ok 2171 - Amazon::AWS::EC2::Types::NetworkInterfacePermission loads. Is not a Failure object
ok 2172 - Amazon::AWS::EC2::Types::NetworkInterfacePermission exists
ok 2173 - Amazon::AWS::EC2::Types::NetworkInterfacePermission can be populated
ok 2174 - Amazon::AWS::EC2::Types::NetworkInterfacePermission serializes ok
ok 2175 - Amazon::AWS::EC2::Types::NetworkInterfacePermission deseralizes ok
# awsAccountId
# awsService
# networkInterfaceId
# networkInterfacePermissionId
# permission
# permissionState
# state
not ok 2176 - Amazon::AWS::EC2::Types::NetworkInterfacePermission compares ok
# Failed test 'Amazon::AWS::EC2::Types::NetworkInterfacePermission compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# awsAccountId, awsService, networkInterfaceId, networkInterfacePermissionId, permission, permissionState
# networkInterfaceId -- Str
# Setting networkInterfaceId to syzygy!aWgRuZGOLxuOrPzXdWPrDb
ok 2177 - Changed Amazon::AWS::EC2::Types::NetworkInterfacePermission fails eqv
ok 2178 - Amazon::AWS::EC2::Types::PublicIpv4Pool loads. Is not a Failure object
ok 2179 - Amazon::AWS::EC2::Types::PublicIpv4Pool exists
ok 2180 - Amazon::AWS::EC2::Types::PublicIpv4Pool can be populated
ok 2181 - Amazon::AWS::EC2::Types::PublicIpv4Pool serializes ok
ok 2182 - Amazon::AWS::EC2::Types::PublicIpv4Pool deseralizes ok
# description
# poolAddressRanges
Amazon::AWS::EC2::Types::PublicIpv4PoolRange.new(addressCount => 14, availableAddressCount => 27, firstAddress => "obeSzblqsOcsUpTGpMKyh", lastAddress => "OiSUjbNtspqeKByihw")
Amazon::AWS::EC2::Types::PublicIpv4PoolRange.new(addressCount => 14, availableAddressCount => 27, firstAddress => "obeSzblqsOcsUpTGpMKyh", lastAddress => "OiSUjbNtspqeKByihw")
# addressCount
# availableAddressCount
# firstAddress
# lastAddress
# poolId
# totalAddressCount
# totalAvailableAddressCount
ok 2183 - Amazon::AWS::EC2::Types::PublicIpv4Pool compares ok
# CHANGE!
# vicselect
# description, poolAddressRanges, poolId, totalAddressCount, totalAvailableAddressCount
# totalAvailableAddressCount -- Str
# Setting totalAvailableAddressCount to 18
ok 2184 - Changed Amazon::AWS::EC2::Types::PublicIpv4Pool fails eqv
ok 2185 - Amazon::AWS::EC2::Types::RequestLaunchTemplateData loads. Is not a Failure object
ok 2186 - Amazon::AWS::EC2::Types::RequestLaunchTemplateData exists
ok 2187 - Amazon::AWS::EC2::Types::RequestLaunchTemplateData can be populated
ok 2188 - Amazon::AWS::EC2::Types::RequestLaunchTemplateData serializes ok
ok 2189 - Amazon::AWS::EC2::Types::RequestLaunchTemplateData deseralizes ok
# BlockDeviceMappings
Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMappingRequest.new(DeviceName => "kPkiTywPlmZmNb", Ebs => Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDeviceRequest.new(DeleteOnTermination => Bool::False, Encrypted => Bool::True, Iops => 13, KmsKeyId => "jlaZntq", SnapshotId => "XLVxXSHhBSQfLBaTZNloIMzNFssM", VolumeSize => 27, VolumeType => "st1"), NoDevice => "GWfjvzAoMMgTTKufIvBuf", VirtualName => "TFrzoKGCd")
Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMappingRequest.new(DeviceName => "kPkiTywPlmZmNb", Ebs => Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDeviceRequest.new(DeleteOnTermination => Bool::False, Encrypted => Bool::False, Iops => Int, KmsKeyId => Str, SnapshotId => Str, VolumeSize => Int, VolumeType => Str), NoDevice => "GWfjvzAoMMgTTKufIvBuf", VirtualName => "TFrzoKGCd")
# DeviceName
# Ebs
# DeleteOnTermination
# Encrypted
not ok 2190 - Amazon::AWS::EC2::Types::RequestLaunchTemplateData compares ok
# Failed test 'Amazon::AWS::EC2::Types::RequestLaunchTemplateData compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# BlockDeviceMappings, CapacityReservationSpecification, CpuOptions, CreditSpecification, DisableApiTermination, EbsOptimized, ElasticGpuSpecifications, ElasticInferenceAccelerators, HibernationOptions, IamInstanceProfile, ImageId, InstanceInitiatedShutdownBehavior, InstanceMarketOptions, InstanceType, KernelId, KeyName, LicenseSpecifications, Monitoring, NetworkInterfaces, Placement, RamDiskId, SecurityGroups, SecurityGroupIds, TagSpecifications, UserData
# InstanceMarketOptions -- Str
# Setting InstanceMarketOptions to Amazon::AWS::EC2::Types::LaunchTemplateInstanceMarketOptionsRequest.new(MarketType => Str, SpotOptions => Amazon::AWS::EC2::Types::LaunchTemplateSpotMarketOptionsRequest)
ok 2191 - Changed Amazon::AWS::EC2::Types::RequestLaunchTemplateData fails eqv
ok 2192 - Amazon::AWS::EC2::Types::RequestSpotLaunchSpecification loads. Is not a Failure object
not ok 2193 - Amazon::AWS::EC2::Types::RequestSpotLaunchSpecification exists
# Failed test 'Amazon::AWS::EC2::Types::RequestSpotLaunchSpecification exists'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
Nil
Perl6::Metamodel::ClassHOW.new
# No such symbol 'Amazon::AWS::EC2::Types::RequestSpotLaunchSpecification'
not ok 2194 - Amazon::AWS::EC2::Types::RequestSpotLaunchSpecification can be populated
# Failed test 'Amazon::AWS::EC2::Types::RequestSpotLaunchSpecification can be populated'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such symbol 'Amazon::AWS::EC2::Types::RequestSpotLaunchSpecification'
not ok 2195 - Amazon::AWS::EC2::Types::RequestSpotLaunchSpecification serializes ok
# Failed test 'Amazon::AWS::EC2::Types::RequestSpotLaunchSpecification serializes ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such method 'to-xml' for invocant of type 'Any'
ok 2196 - Amazon::AWS::EC2::Types::RequestSpotLaunchSpecification deseralizes ok
# No such method 'eqv' for invocant of type 'Any'
ok 2197 - Amazon::AWS::EC2::Types::ReservedInstances loads. Is not a Failure object
ok 2198 - Amazon::AWS::EC2::Types::ReservedInstances exists
ok 2199 - Amazon::AWS::EC2::Types::ReservedInstances can be populated
ok 2200 - Amazon::AWS::EC2::Types::ReservedInstances serializes ok
ok 2201 - Amazon::AWS::EC2::Types::ReservedInstances deseralizes ok
# availabilityZone
# currencyCode
# duration
# end
# fixedPrice
# instanceCount
# instanceTenancy
# instanceType
# offeringClass
# offeringType
# productDescription
# recurringCharges
Amazon::AWS::EC2::Types::RecurringCharge.new(amount => 13.716671579873934e0, frequency => "Hourly")
Amazon::AWS::EC2::Types::RecurringCharge.new(amount => 13.716671579873934e0, frequency => "Hourly")
# amount
# frequency
# reservedInstancesId
# scope
# start
# state
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "CTOJfPIsesNosxR", key => "XLnuSSYyJeM", Value => "WyeePusaOrvo", value => "AxLekoJcLow")
Amazon::AWS::EC2::Types::Tag.new(Key => "CTOJfPIsesNosxR", key => "XLnuSSYyJeM", Value => "WyeePusaOrvo", value => "AxLekoJcLow")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "HYOUEMzfwdGbPGMJ", key => "aYDcDNijUPKmSfHnUNyn", Value => "jFjGwGCBlz", value => "PiWmJCYLDV")
Amazon::AWS::EC2::Types::Tag.new(Key => "HYOUEMzfwdGbPGMJ", key => "aYDcDNijUPKmSfHnUNyn", Value => "jFjGwGCBlz", value => "PiWmJCYLDV")
# Key
# key
# Value
# value
# usagePrice
ok 2202 - Amazon::AWS::EC2::Types::ReservedInstances compares ok
# CHANGE!
# vicselect
# availabilityZone, currencyCode, duration, end, fixedPrice, instanceCount, instanceTenancy, instanceType, offeringClass, offeringType, productDescription, recurringCharges, reservedInstancesId, scope, start, state, tags, usagePrice
# duration -- Str
# Setting duration to 14
ok 2203 - Changed Amazon::AWS::EC2::Types::ReservedInstances fails eqv
ok 2204 - Amazon::AWS::EC2::Types::ReservedInstancesListing loads. Is not a Failure object
ok 2205 - Amazon::AWS::EC2::Types::ReservedInstancesListing exists
ok 2206 - Amazon::AWS::EC2::Types::ReservedInstancesListing can be populated
ok 2207 - Amazon::AWS::EC2::Types::ReservedInstancesListing serializes ok
ok 2208 - Amazon::AWS::EC2::Types::ReservedInstancesListing deseralizes ok
# clientToken
# createDate
# instanceCounts
Amazon::AWS::EC2::Types::InstanceCount.new(instanceCount => 11, state => "cancelled")
Amazon::AWS::EC2::Types::InstanceCount.new(instanceCount => 11, state => "cancelled")
# instanceCount
# state
Amazon::AWS::EC2::Types::InstanceCount.new(instanceCount => 19, state => "cancelled")
Amazon::AWS::EC2::Types::InstanceCount.new(instanceCount => 19, state => "cancelled")
# instanceCount
# state
Amazon::AWS::EC2::Types::InstanceCount.new(instanceCount => 30, state => "available")
Amazon::AWS::EC2::Types::InstanceCount.new(instanceCount => 30, state => "available")
# instanceCount
# state
Amazon::AWS::EC2::Types::InstanceCount.new(instanceCount => 6, state => "available")
Amazon::AWS::EC2::Types::InstanceCount.new(instanceCount => 6, state => "available")
# instanceCount
# state
# priceSchedules
Amazon::AWS::EC2::Types::PriceSchedule.new(active => Bool::True, currencyCode => "USD", price => 10.434184495611841e0, term => 9)
Amazon::AWS::EC2::Types::PriceSchedule.new(active => Bool::True, currencyCode => "USD", price => 10.434184495611841e0, term => 9)
# active
# currencyCode
# price
# term
Amazon::AWS::EC2::Types::PriceSchedule.new(active => Bool::False, currencyCode => "USD", price => 21.566433189763934e0, term => 22)
Amazon::AWS::EC2::Types::PriceSchedule.new(active => Bool::False, currencyCode => "USD", price => 21.566433189763934e0, term => 22)
# active
# currencyCode
# price
# term
Amazon::AWS::EC2::Types::PriceSchedule.new(active => Bool::True, currencyCode => "USD", price => 18.476750225062826e0, term => 24)
Amazon::AWS::EC2::Types::PriceSchedule.new(active => Bool::True, currencyCode => "USD", price => 18.476750225062826e0, term => 24)
# active
# currencyCode
# price
# term
# reservedInstancesId
# reservedInstancesListingId
# status
# statusMessage
# tags
# updateDate
ok 2209 - Amazon::AWS::EC2::Types::ReservedInstancesListing compares ok
# CHANGE!
# vicselect
# clientToken, createDate, instanceCounts, priceSchedules, reservedInstancesId, reservedInstancesListingId, status, statusMessage, tags, updateDate
# status -- Str
# Setting status to syzygy!cancelled
ok 2210 - Changed Amazon::AWS::EC2::Types::ReservedInstancesListing fails eqv
ok 2211 - Amazon::AWS::EC2::Types::ReservedInstancesModification loads. Is not a Failure object
ok 2212 - Amazon::AWS::EC2::Types::ReservedInstancesModification exists
ok 2213 - Amazon::AWS::EC2::Types::ReservedInstancesModification can be populated
ok 2214 - Amazon::AWS::EC2::Types::ReservedInstancesModification serializes ok
ok 2215 - Amazon::AWS::EC2::Types::ReservedInstancesModification deseralizes ok
# clientToken
# createDate
# effectiveDate
# modificationResults
Amazon::AWS::EC2::Types::ReservedInstancesModificationResult.new(reservedInstancesId => "lJAhXhmB", targetConfiguration => Amazon::AWS::EC2::Types::ReservedInstancesConfiguration.new(AvailabilityZone => "IrZkCvScOqulktupplhx", availabilityZone => "KViHxOjAjSmhkgw", InstanceCount => 23, instanceCount => 18, InstanceType => "t1", instanceType => "t1", Platform => "SZACFiRLEUgQT", platform => "TGrTdCNCpwPsKxGSF", Scope => "Availability", scope => "Availability"))
Amazon::AWS::EC2::Types::ReservedInstancesModificationResult.new(reservedInstancesId => "lJAhXhmB", targetConfiguration => Amazon::AWS::EC2::Types::ReservedInstancesConfiguration.new(AvailabilityZone => Str, availabilityZone => Str, InstanceCount => Int, instanceCount => Int, InstanceType => Str, instanceType => Str, Platform => Str, platform => Str, Scope => Str, scope => Str))
# reservedInstancesId
# targetConfiguration
# AvailabilityZone
not ok 2216 - Amazon::AWS::EC2::Types::ReservedInstancesModification compares ok
# Failed test 'Amazon::AWS::EC2::Types::ReservedInstancesModification compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# clientToken, createDate, effectiveDate, modificationResults, reservedInstancesModificationId, reservedInstancess, status, statusMessage, updateDate
# reservedInstancesModificationId -- Str
# Setting reservedInstancesModificationId to syzygy!dvkNAggjlTPcoMgyAX
ok 2217 - Changed Amazon::AWS::EC2::Types::ReservedInstancesModification fails eqv
ok 2218 - Amazon::AWS::EC2::Types::ResponseLaunchTemplateData loads. Is not a Failure object
ok 2219 - Amazon::AWS::EC2::Types::ResponseLaunchTemplateData exists
ok 2220 - Amazon::AWS::EC2::Types::ResponseLaunchTemplateData can be populated
ok 2221 - Amazon::AWS::EC2::Types::ResponseLaunchTemplateData serializes ok
ok 2222 - Amazon::AWS::EC2::Types::ResponseLaunchTemplateData deseralizes ok
# blockDeviceMappings
Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMapping.new(deviceName => "jhxTOnwG", ebs => Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDevice.new(deleteOnTermination => Bool::True, encrypted => Bool::False, iops => 23, kmsKeyId => "SKbDrJLjHkRcMdgGJVFZprkexRnfz", snapshotId => "bGdCB", volumeSize => 14, volumeType => "st1"), noDevice => "iKVyXgwsSkkKHTCTqIdeAwVrUqKrP", virtualName => "RDkxCNyxYptuXxpzktUlnAyA")
Amazon::AWS::EC2::Types::LaunchTemplateBlockDeviceMapping.new(deviceName => "jhxTOnwG", ebs => Amazon::AWS::EC2::Types::LaunchTemplateEbsBlockDevice.new(deleteOnTermination => Bool::False, encrypted => Bool::False, iops => Int, kmsKeyId => Str, snapshotId => Str, volumeSize => Int, volumeType => Str), noDevice => "iKVyXgwsSkkKHTCTqIdeAwVrUqKrP", virtualName => "RDkxCNyxYptuXxpzktUlnAyA")
# deviceName
# ebs
# deleteOnTermination
not ok 2223 - Amazon::AWS::EC2::Types::ResponseLaunchTemplateData compares ok
# Failed test 'Amazon::AWS::EC2::Types::ResponseLaunchTemplateData compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# blockDeviceMappings, capacityReservationSpecification, cpuOptions, creditSpecification, disableApiTermination, ebsOptimized, elasticGpuSpecifications, elasticInferenceAccelerators, hibernationOptions, iamInstanceProfile, imageId, instanceInitiatedShutdownBehavior, instanceMarketOptions, instanceType, kernelId, keyName, licenses, monitoring, networkInterfaces, placement, ramDiskId, securityGroupIds, securityGroups, tagSpecifications, userData
# monitoring -- Str
# Setting monitoring to Amazon::AWS::EC2::Types::LaunchTemplatesMonitoring.new(enabled => Bool)
ok 2224 - Changed Amazon::AWS::EC2::Types::ResponseLaunchTemplateData fails eqv
ok 2225 - Amazon::AWS::EC2::Types::RouteTable loads. Is not a Failure object
ok 2226 - Amazon::AWS::EC2::Types::RouteTable exists
ok 2227 - Amazon::AWS::EC2::Types::RouteTable can be populated
ok 2228 - Amazon::AWS::EC2::Types::RouteTable serializes ok
ok 2229 - Amazon::AWS::EC2::Types::RouteTable deseralizes ok
# associations
Amazon::AWS::EC2::Types::RouteTableAssociation.new(main => Bool::True, routeTableAssociationId => "bQOikLrdcmvFQIBULrlXnfF", routeTableId => "xVsmnVujqVxasYtrePHqIRbHAI", subnetId => "CFtKLQiMfFsbTvAgzvzmMRtVwW")
Amazon::AWS::EC2::Types::RouteTableAssociation.new(main => Bool::True, routeTableAssociationId => "bQOikLrdcmvFQIBULrlXnfF", routeTableId => "xVsmnVujqVxasYtrePHqIRbHAI", subnetId => "CFtKLQiMfFsbTvAgzvzmMRtVwW")
# main
# routeTableAssociationId
# routeTableId
# subnetId
Amazon::AWS::EC2::Types::RouteTableAssociation.new(main => Bool::False, routeTableAssociationId => "ZYlzASbAbPejPdtsihXIkPVRnKGVab", routeTableId => "zAAayN", subnetId => "FwsiLLaZRTDMeMPJOPmx")
Amazon::AWS::EC2::Types::RouteTableAssociation.new(main => Bool::False, routeTableAssociationId => "ZYlzASbAbPejPdtsihXIkPVRnKGVab", routeTableId => "zAAayN", subnetId => "FwsiLLaZRTDMeMPJOPmx")
# main
# routeTableAssociationId
# routeTableId
# subnetId
Amazon::AWS::EC2::Types::RouteTableAssociation.new(main => Bool::False, routeTableAssociationId => "JMxVhYnRPZtHPibMFrQSb", routeTableId => "gdvMmiaZ", subnetId => "hIjOCSVBGPNgzxkXOKOqAdimTx")
Amazon::AWS::EC2::Types::RouteTableAssociation.new(main => Bool::False, routeTableAssociationId => "JMxVhYnRPZtHPibMFrQSb", routeTableId => "gdvMmiaZ", subnetId => "hIjOCSVBGPNgzxkXOKOqAdimTx")
# main
# routeTableAssociationId
# routeTableId
# subnetId
Amazon::AWS::EC2::Types::RouteTableAssociation.new(main => Bool::True, routeTableAssociationId => "nrOCBOiKkQrK", routeTableId => "kuKuzC", subnetId => "ACiJvZuYXvOY")
Amazon::AWS::EC2::Types::RouteTableAssociation.new(main => Bool::True, routeTableAssociationId => "nrOCBOiKkQrK", routeTableId => "kuKuzC", subnetId => "ACiJvZuYXvOY")
# main
# routeTableAssociationId
# routeTableId
# subnetId
# ownerId
# propagatingVgws
Amazon::AWS::EC2::Types::PropagatingVgw.new(gatewayId => "CfDzMTXjt")
Amazon::AWS::EC2::Types::PropagatingVgw.new(gatewayId => "CfDzMTXjt")
# gatewayId
Amazon::AWS::EC2::Types::PropagatingVgw.new(gatewayId => "zliClqYAuyDENfnR")
Amazon::AWS::EC2::Types::PropagatingVgw.new(gatewayId => "zliClqYAuyDENfnR")
# gatewayId
Amazon::AWS::EC2::Types::PropagatingVgw.new(gatewayId => "RjdZYlXaUiWYcWlgOFw")
Amazon::AWS::EC2::Types::PropagatingVgw.new(gatewayId => "RjdZYlXaUiWYcWlgOFw")
# gatewayId
Amazon::AWS::EC2::Types::PropagatingVgw.new(gatewayId => "LpFwV")
Amazon::AWS::EC2::Types::PropagatingVgw.new(gatewayId => "LpFwV")
# gatewayId
# routes
Amazon::AWS::EC2::Types::Route.new(destinationCidrBlock => "klmSRZFLaIxMIyfXZIERHFVUzSr", destinationIpv6CidrBlock => "ntwJUJ", destinationPrefixListId => "aAhTnVrYwLi", egressOnlyInternetGatewayId => "TGYqa", gatewayId => "bpoqTShbOeHZFEbbQmqrr", instanceId => "NhLFQZu", instanceOwnerId => "YyAvYipKfNv", natGatewayId => "jBrZitBbW", networkInterfaceId => "uNOpuwZFdljGPUcTvgWzhHpo", origin => "CreateRouteTable", state => "active", transitGatewayId => "JdSKHnCMsWLzzWhHVgvQURNpNL", vpcPeeringConnectionId => "ZTsbPwo")
Amazon::AWS::EC2::Types::Route.new(destinationCidrBlock => "klmSRZFLaIxMIyfXZIERHFVUzSr", destinationIpv6CidrBlock => "ntwJUJ", destinationPrefixListId => "aAhTnVrYwLi", egressOnlyInternetGatewayId => "TGYqa", gatewayId => "bpoqTShbOeHZFEbbQmqrr", instanceId => "NhLFQZu", instanceOwnerId => "YyAvYipKfNv", natGatewayId => "jBrZitBbW", networkInterfaceId => "uNOpuwZFdljGPUcTvgWzhHpo", origin => "CreateRouteTable", state => "active", transitGatewayId => "JdSKHnCMsWLzzWhHVgvQURNpNL", vpcPeeringConnectionId => "ZTsbPwo")
# destinationCidrBlock
# destinationIpv6CidrBlock
# destinationPrefixListId
# egressOnlyInternetGatewayId
# gatewayId
# instanceId
# instanceOwnerId
# natGatewayId
# networkInterfaceId
# origin
# state
# transitGatewayId
# vpcPeeringConnectionId
Amazon::AWS::EC2::Types::Route.new(destinationCidrBlock => "feZmzGLkLksY", destinationIpv6CidrBlock => "Jequbh", destinationPrefixListId => "LTIMz", egressOnlyInternetGatewayId => "NSHbUtVeeNdzIgMymHNvbR", gatewayId => "ZfWHkbIEiXTHwLjMUvk", instanceId => "eMObNkzojXImqvIH", instanceOwnerId => "WkuQwj", natGatewayId => "XqxraxtLVBpjtIDZvMcla", networkInterfaceId => "fLfAgbrJBCeDtuABBDiPKwVmI", origin => "EnableVgwRoutePropagation", state => "active", transitGatewayId => "hdFYKhdRkzghRQxoI", vpcPeeringConnectionId => "OVEvaTFkYMomoDTxUIfAaEP")
Amazon::AWS::EC2::Types::Route.new(destinationCidrBlock => "feZmzGLkLksY", destinationIpv6CidrBlock => "Jequbh", destinationPrefixListId => "LTIMz", egressOnlyInternetGatewayId => "NSHbUtVeeNdzIgMymHNvbR", gatewayId => "ZfWHkbIEiXTHwLjMUvk", instanceId => "eMObNkzojXImqvIH", instanceOwnerId => "WkuQwj", natGatewayId => "XqxraxtLVBpjtIDZvMcla", networkInterfaceId => "fLfAgbrJBCeDtuABBDiPKwVmI", origin => "EnableVgwRoutePropagation", state => "active", transitGatewayId => "hdFYKhdRkzghRQxoI", vpcPeeringConnectionId => "OVEvaTFkYMomoDTxUIfAaEP")
# destinationCidrBlock
# destinationIpv6CidrBlock
# destinationPrefixListId
# egressOnlyInternetGatewayId
# gatewayId
# instanceId
# instanceOwnerId
# natGatewayId
# networkInterfaceId
# origin
# state
# transitGatewayId
# vpcPeeringConnectionId
Amazon::AWS::EC2::Types::Route.new(destinationCidrBlock => "QDtcOGcEahxkjSVqSVpEJyd", destinationIpv6CidrBlock => "wGUwrhUKsjsLbvjKqETVPBOCHN", destinationPrefixListId => "RPmszMIxsXqvMFCVOTpagB", egressOnlyInternetGatewayId => "JkBKJNFmJcsYXhbaeuXlMOKcjEx", gatewayId => "UOFehGDtXoQzVY", instanceId => "pKVVcgArdGkOBaSbQgBFkvAbCpzRN", instanceOwnerId => "pQifWchFYhftKHDQQwcValsdD", natGatewayId => "esdCYsV", networkInterfaceId => "eUAQlwwNVkKffRJpN", origin => "CreateRouteTable", state => "active", transitGatewayId => "XYsMcyBmNkiGW", vpcPeeringConnectionId => "cEsuXtGaGfi")
Amazon::AWS::EC2::Types::Route.new(destinationCidrBlock => "QDtcOGcEahxkjSVqSVpEJyd", destinationIpv6CidrBlock => "wGUwrhUKsjsLbvjKqETVPBOCHN", destinationPrefixListId => "RPmszMIxsXqvMFCVOTpagB", egressOnlyInternetGatewayId => "JkBKJNFmJcsYXhbaeuXlMOKcjEx", gatewayId => "UOFehGDtXoQzVY", instanceId => "pKVVcgArdGkOBaSbQgBFkvAbCpzRN", instanceOwnerId => "pQifWchFYhftKHDQQwcValsdD", natGatewayId => "esdCYsV", networkInterfaceId => "eUAQlwwNVkKffRJpN", origin => "CreateRouteTable", state => "active", transitGatewayId => "XYsMcyBmNkiGW", vpcPeeringConnectionId => "cEsuXtGaGfi")
# destinationCidrBlock
# destinationIpv6CidrBlock
# destinationPrefixListId
# egressOnlyInternetGatewayId
# gatewayId
# instanceId
# instanceOwnerId
# natGatewayId
# networkInterfaceId
# origin
# state
# transitGatewayId
# vpcPeeringConnectionId
# routeTableId
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "lEkenXxddhnSGJVUsaop", key => "EhMzMojCprFolyogh", Value => "GKqAOetZsPV", value => "SDLUCaKThwN")
Amazon::AWS::EC2::Types::Tag.new(Key => "lEkenXxddhnSGJVUsaop", key => "EhMzMojCprFolyogh", Value => "GKqAOetZsPV", value => "SDLUCaKThwN")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "nWFEtYqslsYqVQVPP", key => "oSRTtPeBFkFPlfBFor", Value => "SendwKwjdGBh", value => "ALeLCraHbnY")
Amazon::AWS::EC2::Types::Tag.new(Key => "nWFEtYqslsYqVQVPP", key => "oSRTtPeBFkFPlfBFor", Value => "SendwKwjdGBh", value => "ALeLCraHbnY")
# Key
# key
# Value
# value
# vpcId
ok 2230 - Amazon::AWS::EC2::Types::RouteTable compares ok
# CHANGE!
# vicselect
# associations, ownerId, propagatingVgws, routes, routeTableId, tags, vpcId
# vpcId -- Str
# Setting vpcId to syzygy!EIeDHpZerckby
ok 2231 - Changed Amazon::AWS::EC2::Types::RouteTable fails eqv
ok 2232 - Amazon::AWS::EC2::Types::ScheduledInstance loads. Is not a Failure object
ok 2233 - Amazon::AWS::EC2::Types::ScheduledInstance exists
ok 2234 - Amazon::AWS::EC2::Types::ScheduledInstance can be populated
ok 2235 - Amazon::AWS::EC2::Types::ScheduledInstance serializes ok
ok 2236 - Amazon::AWS::EC2::Types::ScheduledInstance deseralizes ok
# availabilityZone
# createDate
# hourlyPrice
# instanceCount
# instanceType
# networkPlatform
# nextSlotStartTime
# platform
# previousSlotEndTime
# recurrence
# frequency
not ok 2237 - Amazon::AWS::EC2::Types::ScheduledInstance compares ok
# Failed test 'Amazon::AWS::EC2::Types::ScheduledInstance compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# availabilityZone, createDate, hourlyPrice, instanceCount, instanceType, networkPlatform, nextSlotStartTime, platform, previousSlotEndTime, recurrence, scheduledInstanceId, slotDurationInHours, termEndDate, termStartDate, totalScheduledInstanceHours
# recurrence -- Str
# Setting recurrence to Amazon::AWS::EC2::Types::ScheduledInstanceRecurrence.new(frequency => Str, interval => Int, occurrenceDays => Array[Int].new(), occurrenceRelativeToEnd => Bool, occurrenceUnit => Str)
ok 2238 - Changed Amazon::AWS::EC2::Types::ScheduledInstance fails eqv
ok 2239 - Amazon::AWS::EC2::Types::ScheduledInstanceAvailability loads. Is not a Failure object
ok 2240 - Amazon::AWS::EC2::Types::ScheduledInstanceAvailability exists
ok 2241 - Amazon::AWS::EC2::Types::ScheduledInstanceAvailability can be populated
ok 2242 - Amazon::AWS::EC2::Types::ScheduledInstanceAvailability serializes ok
ok 2243 - Amazon::AWS::EC2::Types::ScheduledInstanceAvailability deseralizes ok
# availabilityZone
# availableInstanceCount
# firstSlotStartTime
# hourlyPrice
# instanceType
# maxTermDurationInDays
# minTermDurationInDays
# networkPlatform
# platform
# purchaseToken
# recurrence
# frequency
not ok 2244 - Amazon::AWS::EC2::Types::ScheduledInstanceAvailability compares ok
# Failed test 'Amazon::AWS::EC2::Types::ScheduledInstanceAvailability compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# availabilityZone, availableInstanceCount, firstSlotStartTime, hourlyPrice, instanceType, maxTermDurationInDays, minTermDurationInDays, networkPlatform, platform, purchaseToken, recurrence, slotDurationInHours, totalScheduledInstanceHours
# slotDurationInHours -- Str
# Setting slotDurationInHours to 18
ok 2245 - Changed Amazon::AWS::EC2::Types::ScheduledInstanceAvailability fails eqv
ok 2246 - Amazon::AWS::EC2::Types::ScheduledInstancesBlockDeviceMapping loads. Is not a Failure object
ok 2247 - Amazon::AWS::EC2::Types::ScheduledInstancesBlockDeviceMapping exists
ok 2248 - Amazon::AWS::EC2::Types::ScheduledInstancesBlockDeviceMapping can be populated
ok 2249 - Amazon::AWS::EC2::Types::ScheduledInstancesBlockDeviceMapping serializes ok
ok 2250 - Amazon::AWS::EC2::Types::ScheduledInstancesBlockDeviceMapping deseralizes ok
# DeviceName
# Ebs
# DeleteOnTermination
# Encrypted
not ok 2251 - Amazon::AWS::EC2::Types::ScheduledInstancesBlockDeviceMapping compares ok
# Failed test 'Amazon::AWS::EC2::Types::ScheduledInstancesBlockDeviceMapping compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# DeviceName, Ebs, NoDevice, VirtualName
# NoDevice -- Str
# Setting NoDevice to syzygy!ZcXwnCitjjkZCPtNW
ok 2252 - Changed Amazon::AWS::EC2::Types::ScheduledInstancesBlockDeviceMapping fails eqv
ok 2253 - Amazon::AWS::EC2::Types::ScheduledInstancesNetworkInterface loads. Is not a Failure object
ok 2254 - Amazon::AWS::EC2::Types::ScheduledInstancesNetworkInterface exists
ok 2255 - Amazon::AWS::EC2::Types::ScheduledInstancesNetworkInterface can be populated
ok 2256 - Amazon::AWS::EC2::Types::ScheduledInstancesNetworkInterface serializes ok
ok 2257 - Amazon::AWS::EC2::Types::ScheduledInstancesNetworkInterface deseralizes ok
# AssociatePublicIpAddress
# DeleteOnTermination
# Description
# DeviceIndex
# Groups
ThHyObfWRu
ThHyObfWRu
# Ipv6Addresses
Amazon::AWS::EC2::Types::ScheduledInstancesIpv6Address.new(Ipv6Address => "MMlVbCquWa")
Amazon::AWS::EC2::Types::ScheduledInstancesIpv6Address.new(Ipv6Address => "MMlVbCquWa")
# Ipv6Address
Amazon::AWS::EC2::Types::ScheduledInstancesIpv6Address.new(Ipv6Address => "FibLnwfbqRCcAaMZzfFoAusYzQVa")
Amazon::AWS::EC2::Types::ScheduledInstancesIpv6Address.new(Ipv6Address => "FibLnwfbqRCcAaMZzfFoAusYzQVa")
# Ipv6Address
# Ipv6AddressCount
# NetworkInterfaceId
# PrivateIpAddress
# PrivateIpAddressConfigs
Amazon::AWS::EC2::Types::ScheduledInstancesPrivateIpAddressConfig.new(Primary => Bool::True, PrivateIpAddress => "HXZJzDozVDRvjbeRAHMHsOX")
Amazon::AWS::EC2::Types::ScheduledInstancesPrivateIpAddressConfig.new(Primary => Bool::True, PrivateIpAddress => "HXZJzDozVDRvjbeRAHMHsOX")
# Primary
# PrivateIpAddress
# SecondaryPrivateIpAddressCount
# SubnetId
ok 2258 - Amazon::AWS::EC2::Types::ScheduledInstancesNetworkInterface compares ok
# CHANGE!
# vicselect
# AssociatePublicIpAddress, DeleteOnTermination, Description, DeviceIndex, Groups, Ipv6Addresses, Ipv6AddressCount, NetworkInterfaceId, PrivateIpAddress, PrivateIpAddressConfigs, SecondaryPrivateIpAddressCount, SubnetId
# SecondaryPrivateIpAddressCount -- Str
# Setting SecondaryPrivateIpAddressCount to 6
ok 2259 - Changed Amazon::AWS::EC2::Types::ScheduledInstancesNetworkInterface fails eqv
ok 2260 - Amazon::AWS::EC2::Types::SecurityGroup loads. Is not a Failure object
ok 2261 - Amazon::AWS::EC2::Types::SecurityGroup exists
ok 2262 - Amazon::AWS::EC2::Types::SecurityGroup can be populated
ok 2263 - Amazon::AWS::EC2::Types::SecurityGroup serializes ok
ok 2264 - Amazon::AWS::EC2::Types::SecurityGroup deseralizes ok
# groupDescription
# groupId
# groupName
# ipPermissions
Amazon::AWS::EC2::Types::IpPermission.new(FromPort => 18, fromPort => 29, UserIdGroupPairs => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "mDdkPMnN", description => "vxeIJPpidjFgwlKhJLYoeEAzEIjjP", GroupId => "QHubElaoRujwc", groupId => "hTNeLfJeHRpDZrHsZkVjEknnaTlGMn", GroupName => "pvBRuJhXvZoc", groupName => "WlVArLquZGfkbwsSIxfczBxBd", PeeringStatus => "XhXCHSsyskYp", peeringStatus => "EzmanpyKnVPcwHmJIQtLLtyJqSOe", UserId => "QOPFLEGPYgqInPTyGknUVjFFCiyhJP", userId => "CHAqpsmwDZiw", VpcId => "jcBLbXjhnNboQBVJCwBesobtYWF", vpcId => "HkEpLeDrYLBdmRBOqMOEpYZibENJr", VpcPeeringConnectionId => "NYffTyqIRSYnWggnKB", vpcPeeringConnectionId => "jJqjBXpYF"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "qiLZbtCabUIjLjNeYQaqLORPG", description => "cFwOqmEbDsFyPSZ", GroupId => "vWeBXNByMGbpKpitqOafLvYSWfDKdz", groupId => "ZfLmfXKtEVnl", GroupName => "PHCWAWMtgBtYYzTlQslRzSsVm", groupName => "axJqaHiWMXewXklzSIqeykwQIjk", PeeringStatus => "qqQHaGffwpuMQzTOvqCRpxAmf", peeringStatus => "rXjDoMoKccCOR", UserId => "lwVFwLXpTYlMXJRncMrNnxNWoVZq", userId => "WWBiAkDBAHJaevjFVdT", VpcId => "VCaLzhUczCwn", vpcId => "hnxmUlUCkyF", VpcPeeringConnectionId => "TVxPqQNrUZolmrRcwEJnDdBRB", vpcPeeringConnectionId => "bCDJNuCUEooLYgJgqc"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "KpOWvBRZM", description => "KAsIvVjOtSABMQMwOugL", GroupId => "tJrNvMSwcGHtLcRNc", groupId => "YzWedzG", GroupName => "lCpbRsHwORLxumBFChsfnfH", groupName => "mYpRuAIILrJpFzCLbeZEyKOGAeGr", PeeringStatus => "dyVncSSJuOQWHkmEDqVOJtMAkL", peeringStatus => "AqkLbAQrsP", UserId => "dEnKiNmjtBs", userId => "cCUtWioIeKk", VpcId => "LOPyvyUFflqjxXCHh", vpcId => "WnPpFJqXEImDiVQsBgyEllQ", VpcPeeringConnectionId => "EDbCsXxQp", vpcPeeringConnectionId => "KJlFRZUNPosAggQxozpz")), groups => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(), IpProtocol => "uITDGDRoICoZ", ipProtocol => "zZMRjzUzFOQFmnoIS", IpRanges => Array[Amazon::AWS::EC2::Types::IpRange].new(Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "hwvTbfWdCBmVqykOIpidLhic", cidrIp => "nLKUblSACsNERDC", Description => "UPPXfLUCNyoXkcEVPli", description => "BUeYQbmk")), ipRanges => Array[Amazon::AWS::EC2::Types::IpRange].new(Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "aAMss", cidrIp => "JSjTPjViJXpMrcHHZbDdTiQVBnBpoz", Description => "WeJnHgPrIlKYxbFqaUqw", description => "xrfeNZuszWkFatZVvVVh")), Ipv6Ranges => Array[Amazon::AWS::EC2::Types::Ipv6Range].new(Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "pWAiyiEmnwZtLMYVdXFcSIeJ", cidrIpv6 => "zynKDxOrbGHDEfHRyConXuytylnFb", Description => "SSLpCPWKrxbCmGEZLFBeOfGC", description => "YLXKeCXHUZ"), Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "diWPeNgwNB", cidrIpv6 => "dYCsrLnguFvh", Description => "THkeeItvohwUBPgrIBll", description => "YTVTuQxudQhk"), Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "ZTOrcTBhrdhqEfmguk", cidrIpv6 => "IvYAacGOFwoVivzSJSJhpK", Description => "nlfVJblKeZNeUBGlJuVxIpWgfIw", description => "bCDifCuVkhXtrBxXTsjwH")), ipv6Ranges => Array[Amazon::AWS::EC2::Types::Ipv6Range].new(), PrefixListIds => Array[Amazon::AWS::EC2::Types::PrefixListId].new(Amazon::AWS::EC2::Types::PrefixListId.new(Description => "nJAxFq", description => "VcxkDu", PrefixListId => "AKSGmAreJEiOhIGVuerOueGiOSew", prefixListId => "fbPPWfZrlyXLWqrEsoeoSMKUPeQssj"), Amazon::AWS::EC2::Types::PrefixListId.new(Description => "VkqjjOhqtOXFzIKXNy", description => "MITmtcRKEBEkGRVwjP", PrefixListId => "ohODSNlV", prefixListId => "cPZpbbnVgxFR")), prefixListIds => Array[Amazon::AWS::EC2::Types::PrefixListId].new(Amazon::AWS::EC2::Types::PrefixListId.new(Description => "CJQRukGDgjVVqNaTHgNkawWOY", description => "oxRTMMRIvQtAYculbNwrwaXUXhF", PrefixListId => "IwMBmRyuZhZEeDxkyeTsluPGmb", prefixListId => "xegOyYAoQsqUcgLhFSJWimnxsRUjaV"), Amazon::AWS::EC2::Types::PrefixListId.new(Description => "NgbDEolgwCiIipjYpSBRWc", description => "grORkESKONWuswUkrfmkkFKIqaYR", PrefixListId => "KJKNzphBEwynjYCdqJhPIpVtRRa", prefixListId => "vFiVMt")), ToPort => 11, toPort => 16)
Amazon::AWS::EC2::Types::IpPermission.new(FromPort => 18, fromPort => 29, UserIdGroupPairs => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "mDdkPMnN", description => "vxeIJPpidjFgwlKhJLYoeEAzEIjjP", GroupId => "QHubElaoRujwc", groupId => "hTNeLfJeHRpDZrHsZkVjEknnaTlGMn", GroupName => "pvBRuJhXvZoc", groupName => "WlVArLquZGfkbwsSIxfczBxBd", PeeringStatus => "XhXCHSsyskYp", peeringStatus => "EzmanpyKnVPcwHmJIQtLLtyJqSOe", UserId => "QOPFLEGPYgqInPTyGknUVjFFCiyhJP", userId => "CHAqpsmwDZiw", VpcId => "jcBLbXjhnNboQBVJCwBesobtYWF", vpcId => "HkEpLeDrYLBdmRBOqMOEpYZibENJr", VpcPeeringConnectionId => "NYffTyqIRSYnWggnKB", vpcPeeringConnectionId => "jJqjBXpYF"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "qiLZbtCabUIjLjNeYQaqLORPG", description => "cFwOqmEbDsFyPSZ", GroupId => "vWeBXNByMGbpKpitqOafLvYSWfDKdz", groupId => "ZfLmfXKtEVnl", GroupName => "PHCWAWMtgBtYYzTlQslRzSsVm", groupName => "axJqaHiWMXewXklzSIqeykwQIjk", PeeringStatus => "qqQHaGffwpuMQzTOvqCRpxAmf", peeringStatus => "rXjDoMoKccCOR", UserId => "lwVFwLXpTYlMXJRncMrNnxNWoVZq", userId => "WWBiAkDBAHJaevjFVdT", VpcId => "VCaLzhUczCwn", vpcId => "hnxmUlUCkyF", VpcPeeringConnectionId => "TVxPqQNrUZolmrRcwEJnDdBRB", vpcPeeringConnectionId => "bCDJNuCUEooLYgJgqc"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "KpOWvBRZM", description => "KAsIvVjOtSABMQMwOugL", GroupId => "tJrNvMSwcGHtLcRNc", groupId => "YzWedzG", GroupName => "lCpbRsHwORLxumBFChsfnfH", groupName => "mYpRuAIILrJpFzCLbeZEyKOGAeGr", PeeringStatus => "dyVncSSJuOQWHkmEDqVOJtMAkL", peeringStatus => "AqkLbAQrsP", UserId => "dEnKiNmjtBs", userId => "cCUtWioIeKk", VpcId => "LOPyvyUFflqjxXCHh", vpcId => "WnPpFJqXEImDiVQsBgyEllQ", VpcPeeringConnectionId => "EDbCsXxQp", vpcPeeringConnectionId => "KJlFRZUNPosAggQxozpz")), groups => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(), IpProtocol => "uITDGDRoICoZ", ipProtocol => "zZMRjzUzFOQFmnoIS", IpRanges => Array[Amazon::AWS::EC2::Types::IpRange].new(Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "hwvTbfWdCBmVqykOIpidLhic", cidrIp => "nLKUblSACsNERDC", Description => "UPPXfLUCNyoXkcEVPli", description => "BUeYQbmk")), ipRanges => Array[Amazon::AWS::EC2::Types::IpRange].new(Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "aAMss", cidrIp => "JSjTPjViJXpMrcHHZbDdTiQVBnBpoz", Description => "WeJnHgPrIlKYxbFqaUqw", description => "xrfeNZuszWkFatZVvVVh")), Ipv6Ranges => Array[Amazon::AWS::EC2::Types::Ipv6Range].new(Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "pWAiyiEmnwZtLMYVdXFcSIeJ", cidrIpv6 => "zynKDxOrbGHDEfHRyConXuytylnFb", Description => "SSLpCPWKrxbCmGEZLFBeOfGC", description => "YLXKeCXHUZ"), Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "diWPeNgwNB", cidrIpv6 => "dYCsrLnguFvh", Description => "THkeeItvohwUBPgrIBll", description => "YTVTuQxudQhk"), Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "ZTOrcTBhrdhqEfmguk", cidrIpv6 => "IvYAacGOFwoVivzSJSJhpK", Description => "nlfVJblKeZNeUBGlJuVxIpWgfIw", description => "bCDifCuVkhXtrBxXTsjwH")), ipv6Ranges => Array[Amazon::AWS::EC2::Types::Ipv6Range].new(), PrefixListIds => Array[Amazon::AWS::EC2::Types::PrefixListId].new(Amazon::AWS::EC2::Types::PrefixListId.new(Description => "nJAxFq", description => "VcxkDu", PrefixListId => "AKSGmAreJEiOhIGVuerOueGiOSew", prefixListId => "fbPPWfZrlyXLWqrEsoeoSMKUPeQssj"), Amazon::AWS::EC2::Types::PrefixListId.new(Description => "VkqjjOhqtOXFzIKXNy", description => "MITmtcRKEBEkGRVwjP", PrefixListId => "ohODSNlV", prefixListId => "cPZpbbnVgxFR")), prefixListIds => Array[Amazon::AWS::EC2::Types::PrefixListId].new(Amazon::AWS::EC2::Types::PrefixListId.new(Description => "CJQRukGDgjVVqNaTHgNkawWOY", description => "oxRTMMRIvQtAYculbNwrwaXUXhF", PrefixListId => "IwMBmRyuZhZEeDxkyeTsluPGmb", prefixListId => "xegOyYAoQsqUcgLhFSJWimnxsRUjaV"), Amazon::AWS::EC2::Types::PrefixListId.new(Description => "NgbDEolgwCiIipjYpSBRWc", description => "grORkESKONWuswUkrfmkkFKIqaYR", PrefixListId => "KJKNzphBEwynjYCdqJhPIpVtRRa", prefixListId => "vFiVMt")), ToPort => 11, toPort => 16)
# FromPort
# fromPort
# UserIdGroupPairs
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "mDdkPMnN", description => "vxeIJPpidjFgwlKhJLYoeEAzEIjjP", GroupId => "QHubElaoRujwc", groupId => "hTNeLfJeHRpDZrHsZkVjEknnaTlGMn", GroupName => "pvBRuJhXvZoc", groupName => "WlVArLquZGfkbwsSIxfczBxBd", PeeringStatus => "XhXCHSsyskYp", peeringStatus => "EzmanpyKnVPcwHmJIQtLLtyJqSOe", UserId => "QOPFLEGPYgqInPTyGknUVjFFCiyhJP", userId => "CHAqpsmwDZiw", VpcId => "jcBLbXjhnNboQBVJCwBesobtYWF", vpcId => "HkEpLeDrYLBdmRBOqMOEpYZibENJr", VpcPeeringConnectionId => "NYffTyqIRSYnWggnKB", vpcPeeringConnectionId => "jJqjBXpYF")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "mDdkPMnN", description => "vxeIJPpidjFgwlKhJLYoeEAzEIjjP", GroupId => "QHubElaoRujwc", groupId => "hTNeLfJeHRpDZrHsZkVjEknnaTlGMn", GroupName => "pvBRuJhXvZoc", groupName => "WlVArLquZGfkbwsSIxfczBxBd", PeeringStatus => "XhXCHSsyskYp", peeringStatus => "EzmanpyKnVPcwHmJIQtLLtyJqSOe", UserId => "QOPFLEGPYgqInPTyGknUVjFFCiyhJP", userId => "CHAqpsmwDZiw", VpcId => "jcBLbXjhnNboQBVJCwBesobtYWF", vpcId => "HkEpLeDrYLBdmRBOqMOEpYZibENJr", VpcPeeringConnectionId => "NYffTyqIRSYnWggnKB", vpcPeeringConnectionId => "jJqjBXpYF")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "qiLZbtCabUIjLjNeYQaqLORPG", description => "cFwOqmEbDsFyPSZ", GroupId => "vWeBXNByMGbpKpitqOafLvYSWfDKdz", groupId => "ZfLmfXKtEVnl", GroupName => "PHCWAWMtgBtYYzTlQslRzSsVm", groupName => "axJqaHiWMXewXklzSIqeykwQIjk", PeeringStatus => "qqQHaGffwpuMQzTOvqCRpxAmf", peeringStatus => "rXjDoMoKccCOR", UserId => "lwVFwLXpTYlMXJRncMrNnxNWoVZq", userId => "WWBiAkDBAHJaevjFVdT", VpcId => "VCaLzhUczCwn", vpcId => "hnxmUlUCkyF", VpcPeeringConnectionId => "TVxPqQNrUZolmrRcwEJnDdBRB", vpcPeeringConnectionId => "bCDJNuCUEooLYgJgqc")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "qiLZbtCabUIjLjNeYQaqLORPG", description => "cFwOqmEbDsFyPSZ", GroupId => "vWeBXNByMGbpKpitqOafLvYSWfDKdz", groupId => "ZfLmfXKtEVnl", GroupName => "PHCWAWMtgBtYYzTlQslRzSsVm", groupName => "axJqaHiWMXewXklzSIqeykwQIjk", PeeringStatus => "qqQHaGffwpuMQzTOvqCRpxAmf", peeringStatus => "rXjDoMoKccCOR", UserId => "lwVFwLXpTYlMXJRncMrNnxNWoVZq", userId => "WWBiAkDBAHJaevjFVdT", VpcId => "VCaLzhUczCwn", vpcId => "hnxmUlUCkyF", VpcPeeringConnectionId => "TVxPqQNrUZolmrRcwEJnDdBRB", vpcPeeringConnectionId => "bCDJNuCUEooLYgJgqc")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "KpOWvBRZM", description => "KAsIvVjOtSABMQMwOugL", GroupId => "tJrNvMSwcGHtLcRNc", groupId => "YzWedzG", GroupName => "lCpbRsHwORLxumBFChsfnfH", groupName => "mYpRuAIILrJpFzCLbeZEyKOGAeGr", PeeringStatus => "dyVncSSJuOQWHkmEDqVOJtMAkL", peeringStatus => "AqkLbAQrsP", UserId => "dEnKiNmjtBs", userId => "cCUtWioIeKk", VpcId => "LOPyvyUFflqjxXCHh", vpcId => "WnPpFJqXEImDiVQsBgyEllQ", VpcPeeringConnectionId => "EDbCsXxQp", vpcPeeringConnectionId => "KJlFRZUNPosAggQxozpz")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "KpOWvBRZM", description => "KAsIvVjOtSABMQMwOugL", GroupId => "tJrNvMSwcGHtLcRNc", groupId => "YzWedzG", GroupName => "lCpbRsHwORLxumBFChsfnfH", groupName => "mYpRuAIILrJpFzCLbeZEyKOGAeGr", PeeringStatus => "dyVncSSJuOQWHkmEDqVOJtMAkL", peeringStatus => "AqkLbAQrsP", UserId => "dEnKiNmjtBs", userId => "cCUtWioIeKk", VpcId => "LOPyvyUFflqjxXCHh", vpcId => "WnPpFJqXEImDiVQsBgyEllQ", VpcPeeringConnectionId => "EDbCsXxQp", vpcPeeringConnectionId => "KJlFRZUNPosAggQxozpz")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
# groups
# IpProtocol
# ipProtocol
# IpRanges
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "hwvTbfWdCBmVqykOIpidLhic", cidrIp => "nLKUblSACsNERDC", Description => "UPPXfLUCNyoXkcEVPli", description => "BUeYQbmk")
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "hwvTbfWdCBmVqykOIpidLhic", cidrIp => "nLKUblSACsNERDC", Description => "UPPXfLUCNyoXkcEVPli", description => "BUeYQbmk")
# CidrIp
# cidrIp
# Description
# description
# ipRanges
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "aAMss", cidrIp => "JSjTPjViJXpMrcHHZbDdTiQVBnBpoz", Description => "WeJnHgPrIlKYxbFqaUqw", description => "xrfeNZuszWkFatZVvVVh")
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "aAMss", cidrIp => "JSjTPjViJXpMrcHHZbDdTiQVBnBpoz", Description => "WeJnHgPrIlKYxbFqaUqw", description => "xrfeNZuszWkFatZVvVVh")
# CidrIp
# cidrIp
# Description
# description
# Ipv6Ranges
Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "pWAiyiEmnwZtLMYVdXFcSIeJ", cidrIpv6 => "zynKDxOrbGHDEfHRyConXuytylnFb", Description => "SSLpCPWKrxbCmGEZLFBeOfGC", description => "YLXKeCXHUZ")
Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "pWAiyiEmnwZtLMYVdXFcSIeJ", cidrIpv6 => "zynKDxOrbGHDEfHRyConXuytylnFb", Description => "SSLpCPWKrxbCmGEZLFBeOfGC", description => "YLXKeCXHUZ")
# CidrIpv6
# cidrIpv6
# Description
# description
Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "diWPeNgwNB", cidrIpv6 => "dYCsrLnguFvh", Description => "THkeeItvohwUBPgrIBll", description => "YTVTuQxudQhk")
Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "diWPeNgwNB", cidrIpv6 => "dYCsrLnguFvh", Description => "THkeeItvohwUBPgrIBll", description => "YTVTuQxudQhk")
# CidrIpv6
# cidrIpv6
# Description
# description
Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "ZTOrcTBhrdhqEfmguk", cidrIpv6 => "IvYAacGOFwoVivzSJSJhpK", Description => "nlfVJblKeZNeUBGlJuVxIpWgfIw", description => "bCDifCuVkhXtrBxXTsjwH")
Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "ZTOrcTBhrdhqEfmguk", cidrIpv6 => "IvYAacGOFwoVivzSJSJhpK", Description => "nlfVJblKeZNeUBGlJuVxIpWgfIw", description => "bCDifCuVkhXtrBxXTsjwH")
# CidrIpv6
# cidrIpv6
# Description
# description
# ipv6Ranges
# PrefixListIds
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "nJAxFq", description => "VcxkDu", PrefixListId => "AKSGmAreJEiOhIGVuerOueGiOSew", prefixListId => "fbPPWfZrlyXLWqrEsoeoSMKUPeQssj")
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "nJAxFq", description => "VcxkDu", PrefixListId => "AKSGmAreJEiOhIGVuerOueGiOSew", prefixListId => "fbPPWfZrlyXLWqrEsoeoSMKUPeQssj")
# Description
# description
# PrefixListId
# prefixListId
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "VkqjjOhqtOXFzIKXNy", description => "MITmtcRKEBEkGRVwjP", PrefixListId => "ohODSNlV", prefixListId => "cPZpbbnVgxFR")
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "VkqjjOhqtOXFzIKXNy", description => "MITmtcRKEBEkGRVwjP", PrefixListId => "ohODSNlV", prefixListId => "cPZpbbnVgxFR")
# Description
# description
# PrefixListId
# prefixListId
# prefixListIds
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "CJQRukGDgjVVqNaTHgNkawWOY", description => "oxRTMMRIvQtAYculbNwrwaXUXhF", PrefixListId => "IwMBmRyuZhZEeDxkyeTsluPGmb", prefixListId => "xegOyYAoQsqUcgLhFSJWimnxsRUjaV")
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "CJQRukGDgjVVqNaTHgNkawWOY", description => "oxRTMMRIvQtAYculbNwrwaXUXhF", PrefixListId => "IwMBmRyuZhZEeDxkyeTsluPGmb", prefixListId => "xegOyYAoQsqUcgLhFSJWimnxsRUjaV")
# Description
# description
# PrefixListId
# prefixListId
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "NgbDEolgwCiIipjYpSBRWc", description => "grORkESKONWuswUkrfmkkFKIqaYR", PrefixListId => "KJKNzphBEwynjYCdqJhPIpVtRRa", prefixListId => "vFiVMt")
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "NgbDEolgwCiIipjYpSBRWc", description => "grORkESKONWuswUkrfmkkFKIqaYR", PrefixListId => "KJKNzphBEwynjYCdqJhPIpVtRRa", prefixListId => "vFiVMt")
# Description
# description
# PrefixListId
# prefixListId
# ToPort
# toPort
Amazon::AWS::EC2::Types::IpPermission.new(FromPort => 19, fromPort => 23, UserIdGroupPairs => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "hnLQE", description => "UaqBmtLFxoRZUeJ", GroupId => "YBvOUtDLsWAptaeDIUIDMuuVBVIT", groupId => "BJTsUGrNGnTDTUuWjrdFEydINvHt", GroupName => "gGmdpoou", groupName => "arPoXGmiTaMdMPWCCEEpgTc", PeeringStatus => "AFryjFJBQZJgqIu", peeringStatus => "wSscMrORTquejslSedn", UserId => "eJWGXtpkl", userId => "VXLdidSbUEsTjpmM", VpcId => "EynwFFpp", vpcId => "GIdaLFTlhIzTOHDsHWSaR", VpcPeeringConnectionId => "cnySQ", vpcPeeringConnectionId => "BfukGDwtGHtKUKHgkDfiWaNqcqr"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "eyHJYjJCmgghl", description => "rjvGoIkmmgIYGiliCCJaXaxY", GroupId => "kKmWEcPcksupUiAiCSD", groupId => "WxjinvWkexSJNYOTTrHmlOWHzsLV", GroupName => "iRaLO", groupName => "jbpnC", PeeringStatus => "aElbDxnQoRvBKpsjYDioJxaCbs", peeringStatus => "aMePBXBcNnNpObUlJHhnHDOFrwB", UserId => "uyQOHyRVKunWfXk", userId => "sSqNkDprWyHSrGwMcVYQDagSaIU", VpcId => "aFyPAwrxkIyliLuUcyr", vpcId => "FoygvTvHTZ", VpcPeeringConnectionId => "CexaYuFJUFYeUGAmNAPzXJhJa", vpcPeeringConnectionId => "BCeMBzbo"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "bvNuVdfQpfXNgIqMYoBabmVY", description => "vAeDGowqmGHB", GroupId => "ryhahUMsfJr", groupId => "hazsQlp", GroupName => "eTtVtywug", groupName => "JJrJHTUfqYVmBTMNPZEFxg", PeeringStatus => "vJjcXSUQBhjNdlFrQUUENNMAWoOVT", peeringStatus => "EYzDlmNsoFZ", UserId => "fPAcyjZecoDAEmawc", userId => "hCLCMRRaJTnsqDrnyKRMLurUVg", VpcId => "DkJsEibygxGBdCWtONAZQX", vpcId => "rUqKTiMifB", VpcPeeringConnectionId => "yVGtqVoWyveGTWFvOOTFrPHMGH", vpcPeeringConnectionId => "GkoAsjGWPqvWuKEq"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "nNpPavyhKRbnEpTv", description => "ZKktzbzlCki", GroupId => "WgXbsFtZVrMyjtyqkDze", groupId => "rZvyZftKgkDjMgbjxJwaEPjbGo", GroupName => "BqYkJcgj", groupName => "xJqOYgKwyD", PeeringStatus => "kHvJIoVOpCqMVBjRcPl", peeringStatus => "IjaIWxafPRz", UserId => "MgucktddLnRyFPEkMPoTDdNyWeyQYv", userId => "iGVlJcZrEnqunsHVkyWiIuCTFpUi", VpcId => "qYeYmorA", vpcId => "vEiIzCZzkDtb", VpcPeeringConnectionId => "BnNKtbL", vpcPeeringConnectionId => "ktbdbyISAaVdQWaoOtYzfFWWowFD")), groups => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "QFrEuAlxYHKJtZTubPZ", description => "RMtmeZpFpNDMBnpihj", GroupId => "hhqIKoMkkkg", groupId => "stQyPiaYsLdbdUGYWuVHOMxTrds", GroupName => "WQpEzpjxtBKYcMuRisfkDkoraJhAaV", groupName => "yHjfjhIlugLwdm", PeeringStatus => "kQLAnkEzvAMBIeSInaLzJIiroq", peeringStatus => "hceakUJqoSr", UserId => "JXVFmSYpDYmffDBgAPsq", userId => "lWNHVRgQhCVOcxwiVgFLSqJdq", VpcId => "DStfkJREegGMIrurqVsHMBXU", vpcId => "DvFvF", VpcPeeringConnectionId => "VVYKklqWzPvvdJxKcNVACkKBObc", vpcPeeringConnectionId => "MYQhsLmyMcWaklyTZxWWoZXND")), IpProtocol => "xcAnDriptWeYFyAyWcntTu", ipProtocol => "unuduSADoAZVSepfXxHTizDdQABVii", IpRanges => Array[Amazon::AWS::EC2::Types::IpRange].new(Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "tXlOOMimaTu", cidrIp => "gqobsPUPXEOQlfpcrcfdhKyOSnHnW", Description => "AFjRbUeQpYDYEkVmCpr", description => "oLDjgysIoXZiOwKRvfw"), Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "hdQioY", cidrIp => "talWoTOfYbmNFGlRnIBce", Description => "vEboHdZuDINSpYwgaWqaXnHRmXy", description => "iMofCNlxIo")), ipRanges => Array[Amazon::AWS::EC2::Types::IpRange].new(Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "TtTgtjKDfImYzCLsppVRW", cidrIp => "qHIVvmGHmWf", Description => "ZvWiDlglOwghmOUacMNVJDjRkYOu", description => "PZYPnebPWKxOLcl"), Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "cHjfVzGxIo", cidrIp => "eciWPGQpXAO", Description => "FwmKASWcDZU", description => "PSbgmudnzsnIjAtHAVjxXzsvcWSmWg"), Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "IWEwwwbsxxBfZpgmH", cidrIp => "hNentsQxdI", Description => "uuIzwsHzZfGxuZZglrPfj", description => "FTegOjyOBchlseffGSLXkQbFsQy"), Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "foeHpbkjlFMvfBOkLSpa", cidrIp => "snyyId", Description => "ndPxmlWKQjBWmGnsp", description => "bhOMnDNIHUXEbdaZNpLmmhxtWPIny")), Ipv6Ranges => Array[Amazon::AWS::EC2::Types::Ipv6Range].new(), ipv6Ranges => Array[Amazon::AWS::EC2::Types::Ipv6Range].new(Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "ijoRsqjzFXVfOn", cidrIpv6 => "kicEauFlBGWrejxZk", Description => "uvCIFErvjSOGirwzWZvAemCcsgX", description => "DNXCLSvj"), Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "rpBPFHhYvirasbQswn", cidrIpv6 => "sFvsWUDnnXkEdAXglkYAVYlX", Description => "BcZOoREkyObsCyYGeWHeZm", description => "MXJEsgyr"), Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "nCNNmVAlLUqnHdwpIZNhh", cidrIpv6 => "iKGGHzwPbZStfcQOZVwZzGRRdBj", Description => "xHXFXnUwt", description => "tLTlwLFNuZnYSfFpZNHoCLUwXpaosQ")), PrefixListIds => Array[Amazon::AWS::EC2::Types::PrefixListId].new(), prefixListIds => Array[Amazon::AWS::EC2::Types::PrefixListId].new(Amazon::AWS::EC2::Types::PrefixListId.new(Description => "ocdRkQANsIbSQiDtWPt", description => "aDLZaW", PrefixListId => "MLSDXzcIjUSoY", prefixListId => "BfNoFxMXMePbjWPyWxUqC")), ToPort => 19, toPort => 19)
Amazon::AWS::EC2::Types::IpPermission.new(FromPort => 19, fromPort => 23, UserIdGroupPairs => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "hnLQE", description => "UaqBmtLFxoRZUeJ", GroupId => "YBvOUtDLsWAptaeDIUIDMuuVBVIT", groupId => "BJTsUGrNGnTDTUuWjrdFEydINvHt", GroupName => "gGmdpoou", groupName => "arPoXGmiTaMdMPWCCEEpgTc", PeeringStatus => "AFryjFJBQZJgqIu", peeringStatus => "wSscMrORTquejslSedn", UserId => "eJWGXtpkl", userId => "VXLdidSbUEsTjpmM", VpcId => "EynwFFpp", vpcId => "GIdaLFTlhIzTOHDsHWSaR", VpcPeeringConnectionId => "cnySQ", vpcPeeringConnectionId => "BfukGDwtGHtKUKHgkDfiWaNqcqr"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "eyHJYjJCmgghl", description => "rjvGoIkmmgIYGiliCCJaXaxY", GroupId => "kKmWEcPcksupUiAiCSD", groupId => "WxjinvWkexSJNYOTTrHmlOWHzsLV", GroupName => "iRaLO", groupName => "jbpnC", PeeringStatus => "aElbDxnQoRvBKpsjYDioJxaCbs", peeringStatus => "aMePBXBcNnNpObUlJHhnHDOFrwB", UserId => "uyQOHyRVKunWfXk", userId => "sSqNkDprWyHSrGwMcVYQDagSaIU", VpcId => "aFyPAwrxkIyliLuUcyr", vpcId => "FoygvTvHTZ", VpcPeeringConnectionId => "CexaYuFJUFYeUGAmNAPzXJhJa", vpcPeeringConnectionId => "BCeMBzbo"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "bvNuVdfQpfXNgIqMYoBabmVY", description => "vAeDGowqmGHB", GroupId => "ryhahUMsfJr", groupId => "hazsQlp", GroupName => "eTtVtywug", groupName => "JJrJHTUfqYVmBTMNPZEFxg", PeeringStatus => "vJjcXSUQBhjNdlFrQUUENNMAWoOVT", peeringStatus => "EYzDlmNsoFZ", UserId => "fPAcyjZecoDAEmawc", userId => "hCLCMRRaJTnsqDrnyKRMLurUVg", VpcId => "DkJsEibygxGBdCWtONAZQX", vpcId => "rUqKTiMifB", VpcPeeringConnectionId => "yVGtqVoWyveGTWFvOOTFrPHMGH", vpcPeeringConnectionId => "GkoAsjGWPqvWuKEq"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "nNpPavyhKRbnEpTv", description => "ZKktzbzlCki", GroupId => "WgXbsFtZVrMyjtyqkDze", groupId => "rZvyZftKgkDjMgbjxJwaEPjbGo", GroupName => "BqYkJcgj", groupName => "xJqOYgKwyD", PeeringStatus => "kHvJIoVOpCqMVBjRcPl", peeringStatus => "IjaIWxafPRz", UserId => "MgucktddLnRyFPEkMPoTDdNyWeyQYv", userId => "iGVlJcZrEnqunsHVkyWiIuCTFpUi", VpcId => "qYeYmorA", vpcId => "vEiIzCZzkDtb", VpcPeeringConnectionId => "BnNKtbL", vpcPeeringConnectionId => "ktbdbyISAaVdQWaoOtYzfFWWowFD")), groups => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "QFrEuAlxYHKJtZTubPZ", description => "RMtmeZpFpNDMBnpihj", GroupId => "hhqIKoMkkkg", groupId => "stQyPiaYsLdbdUGYWuVHOMxTrds", GroupName => "WQpEzpjxtBKYcMuRisfkDkoraJhAaV", groupName => "yHjfjhIlugLwdm", PeeringStatus => "kQLAnkEzvAMBIeSInaLzJIiroq", peeringStatus => "hceakUJqoSr", UserId => "JXVFmSYpDYmffDBgAPsq", userId => "lWNHVRgQhCVOcxwiVgFLSqJdq", VpcId => "DStfkJREegGMIrurqVsHMBXU", vpcId => "DvFvF", VpcPeeringConnectionId => "VVYKklqWzPvvdJxKcNVACkKBObc", vpcPeeringConnectionId => "MYQhsLmyMcWaklyTZxWWoZXND")), IpProtocol => "xcAnDriptWeYFyAyWcntTu", ipProtocol => "unuduSADoAZVSepfXxHTizDdQABVii", IpRanges => Array[Amazon::AWS::EC2::Types::IpRange].new(Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "tXlOOMimaTu", cidrIp => "gqobsPUPXEOQlfpcrcfdhKyOSnHnW", Description => "AFjRbUeQpYDYEkVmCpr", description => "oLDjgysIoXZiOwKRvfw"), Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "hdQioY", cidrIp => "talWoTOfYbmNFGlRnIBce", Description => "vEboHdZuDINSpYwgaWqaXnHRmXy", description => "iMofCNlxIo")), ipRanges => Array[Amazon::AWS::EC2::Types::IpRange].new(Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "TtTgtjKDfImYzCLsppVRW", cidrIp => "qHIVvmGHmWf", Description => "ZvWiDlglOwghmOUacMNVJDjRkYOu", description => "PZYPnebPWKxOLcl"), Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "cHjfVzGxIo", cidrIp => "eciWPGQpXAO", Description => "FwmKASWcDZU", description => "PSbgmudnzsnIjAtHAVjxXzsvcWSmWg"), Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "IWEwwwbsxxBfZpgmH", cidrIp => "hNentsQxdI", Description => "uuIzwsHzZfGxuZZglrPfj", description => "FTegOjyOBchlseffGSLXkQbFsQy"), Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "foeHpbkjlFMvfBOkLSpa", cidrIp => "snyyId", Description => "ndPxmlWKQjBWmGnsp", description => "bhOMnDNIHUXEbdaZNpLmmhxtWPIny")), Ipv6Ranges => Array[Amazon::AWS::EC2::Types::Ipv6Range].new(), ipv6Ranges => Array[Amazon::AWS::EC2::Types::Ipv6Range].new(Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "ijoRsqjzFXVfOn", cidrIpv6 => "kicEauFlBGWrejxZk", Description => "uvCIFErvjSOGirwzWZvAemCcsgX", description => "DNXCLSvj"), Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "rpBPFHhYvirasbQswn", cidrIpv6 => "sFvsWUDnnXkEdAXglkYAVYlX", Description => "BcZOoREkyObsCyYGeWHeZm", description => "MXJEsgyr"), Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "nCNNmVAlLUqnHdwpIZNhh", cidrIpv6 => "iKGGHzwPbZStfcQOZVwZzGRRdBj", Description => "xHXFXnUwt", description => "tLTlwLFNuZnYSfFpZNHoCLUwXpaosQ")), PrefixListIds => Array[Amazon::AWS::EC2::Types::PrefixListId].new(), prefixListIds => Array[Amazon::AWS::EC2::Types::PrefixListId].new(Amazon::AWS::EC2::Types::PrefixListId.new(Description => "ocdRkQANsIbSQiDtWPt", description => "aDLZaW", PrefixListId => "MLSDXzcIjUSoY", prefixListId => "BfNoFxMXMePbjWPyWxUqC")), ToPort => 19, toPort => 19)
# FromPort
# fromPort
# UserIdGroupPairs
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "hnLQE", description => "UaqBmtLFxoRZUeJ", GroupId => "YBvOUtDLsWAptaeDIUIDMuuVBVIT", groupId => "BJTsUGrNGnTDTUuWjrdFEydINvHt", GroupName => "gGmdpoou", groupName => "arPoXGmiTaMdMPWCCEEpgTc", PeeringStatus => "AFryjFJBQZJgqIu", peeringStatus => "wSscMrORTquejslSedn", UserId => "eJWGXtpkl", userId => "VXLdidSbUEsTjpmM", VpcId => "EynwFFpp", vpcId => "GIdaLFTlhIzTOHDsHWSaR", VpcPeeringConnectionId => "cnySQ", vpcPeeringConnectionId => "BfukGDwtGHtKUKHgkDfiWaNqcqr")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "hnLQE", description => "UaqBmtLFxoRZUeJ", GroupId => "YBvOUtDLsWAptaeDIUIDMuuVBVIT", groupId => "BJTsUGrNGnTDTUuWjrdFEydINvHt", GroupName => "gGmdpoou", groupName => "arPoXGmiTaMdMPWCCEEpgTc", PeeringStatus => "AFryjFJBQZJgqIu", peeringStatus => "wSscMrORTquejslSedn", UserId => "eJWGXtpkl", userId => "VXLdidSbUEsTjpmM", VpcId => "EynwFFpp", vpcId => "GIdaLFTlhIzTOHDsHWSaR", VpcPeeringConnectionId => "cnySQ", vpcPeeringConnectionId => "BfukGDwtGHtKUKHgkDfiWaNqcqr")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "eyHJYjJCmgghl", description => "rjvGoIkmmgIYGiliCCJaXaxY", GroupId => "kKmWEcPcksupUiAiCSD", groupId => "WxjinvWkexSJNYOTTrHmlOWHzsLV", GroupName => "iRaLO", groupName => "jbpnC", PeeringStatus => "aElbDxnQoRvBKpsjYDioJxaCbs", peeringStatus => "aMePBXBcNnNpObUlJHhnHDOFrwB", UserId => "uyQOHyRVKunWfXk", userId => "sSqNkDprWyHSrGwMcVYQDagSaIU", VpcId => "aFyPAwrxkIyliLuUcyr", vpcId => "FoygvTvHTZ", VpcPeeringConnectionId => "CexaYuFJUFYeUGAmNAPzXJhJa", vpcPeeringConnectionId => "BCeMBzbo")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "eyHJYjJCmgghl", description => "rjvGoIkmmgIYGiliCCJaXaxY", GroupId => "kKmWEcPcksupUiAiCSD", groupId => "WxjinvWkexSJNYOTTrHmlOWHzsLV", GroupName => "iRaLO", groupName => "jbpnC", PeeringStatus => "aElbDxnQoRvBKpsjYDioJxaCbs", peeringStatus => "aMePBXBcNnNpObUlJHhnHDOFrwB", UserId => "uyQOHyRVKunWfXk", userId => "sSqNkDprWyHSrGwMcVYQDagSaIU", VpcId => "aFyPAwrxkIyliLuUcyr", vpcId => "FoygvTvHTZ", VpcPeeringConnectionId => "CexaYuFJUFYeUGAmNAPzXJhJa", vpcPeeringConnectionId => "BCeMBzbo")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "bvNuVdfQpfXNgIqMYoBabmVY", description => "vAeDGowqmGHB", GroupId => "ryhahUMsfJr", groupId => "hazsQlp", GroupName => "eTtVtywug", groupName => "JJrJHTUfqYVmBTMNPZEFxg", PeeringStatus => "vJjcXSUQBhjNdlFrQUUENNMAWoOVT", peeringStatus => "EYzDlmNsoFZ", UserId => "fPAcyjZecoDAEmawc", userId => "hCLCMRRaJTnsqDrnyKRMLurUVg", VpcId => "DkJsEibygxGBdCWtONAZQX", vpcId => "rUqKTiMifB", VpcPeeringConnectionId => "yVGtqVoWyveGTWFvOOTFrPHMGH", vpcPeeringConnectionId => "GkoAsjGWPqvWuKEq")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "bvNuVdfQpfXNgIqMYoBabmVY", description => "vAeDGowqmGHB", GroupId => "ryhahUMsfJr", groupId => "hazsQlp", GroupName => "eTtVtywug", groupName => "JJrJHTUfqYVmBTMNPZEFxg", PeeringStatus => "vJjcXSUQBhjNdlFrQUUENNMAWoOVT", peeringStatus => "EYzDlmNsoFZ", UserId => "fPAcyjZecoDAEmawc", userId => "hCLCMRRaJTnsqDrnyKRMLurUVg", VpcId => "DkJsEibygxGBdCWtONAZQX", vpcId => "rUqKTiMifB", VpcPeeringConnectionId => "yVGtqVoWyveGTWFvOOTFrPHMGH", vpcPeeringConnectionId => "GkoAsjGWPqvWuKEq")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "nNpPavyhKRbnEpTv", description => "ZKktzbzlCki", GroupId => "WgXbsFtZVrMyjtyqkDze", groupId => "rZvyZftKgkDjMgbjxJwaEPjbGo", GroupName => "BqYkJcgj", groupName => "xJqOYgKwyD", PeeringStatus => "kHvJIoVOpCqMVBjRcPl", peeringStatus => "IjaIWxafPRz", UserId => "MgucktddLnRyFPEkMPoTDdNyWeyQYv", userId => "iGVlJcZrEnqunsHVkyWiIuCTFpUi", VpcId => "qYeYmorA", vpcId => "vEiIzCZzkDtb", VpcPeeringConnectionId => "BnNKtbL", vpcPeeringConnectionId => "ktbdbyISAaVdQWaoOtYzfFWWowFD")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "nNpPavyhKRbnEpTv", description => "ZKktzbzlCki", GroupId => "WgXbsFtZVrMyjtyqkDze", groupId => "rZvyZftKgkDjMgbjxJwaEPjbGo", GroupName => "BqYkJcgj", groupName => "xJqOYgKwyD", PeeringStatus => "kHvJIoVOpCqMVBjRcPl", peeringStatus => "IjaIWxafPRz", UserId => "MgucktddLnRyFPEkMPoTDdNyWeyQYv", userId => "iGVlJcZrEnqunsHVkyWiIuCTFpUi", VpcId => "qYeYmorA", vpcId => "vEiIzCZzkDtb", VpcPeeringConnectionId => "BnNKtbL", vpcPeeringConnectionId => "ktbdbyISAaVdQWaoOtYzfFWWowFD")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
# groups
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "QFrEuAlxYHKJtZTubPZ", description => "RMtmeZpFpNDMBnpihj", GroupId => "hhqIKoMkkkg", groupId => "stQyPiaYsLdbdUGYWuVHOMxTrds", GroupName => "WQpEzpjxtBKYcMuRisfkDkoraJhAaV", groupName => "yHjfjhIlugLwdm", PeeringStatus => "kQLAnkEzvAMBIeSInaLzJIiroq", peeringStatus => "hceakUJqoSr", UserId => "JXVFmSYpDYmffDBgAPsq", userId => "lWNHVRgQhCVOcxwiVgFLSqJdq", VpcId => "DStfkJREegGMIrurqVsHMBXU", vpcId => "DvFvF", VpcPeeringConnectionId => "VVYKklqWzPvvdJxKcNVACkKBObc", vpcPeeringConnectionId => "MYQhsLmyMcWaklyTZxWWoZXND")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "QFrEuAlxYHKJtZTubPZ", description => "RMtmeZpFpNDMBnpihj", GroupId => "hhqIKoMkkkg", groupId => "stQyPiaYsLdbdUGYWuVHOMxTrds", GroupName => "WQpEzpjxtBKYcMuRisfkDkoraJhAaV", groupName => "yHjfjhIlugLwdm", PeeringStatus => "kQLAnkEzvAMBIeSInaLzJIiroq", peeringStatus => "hceakUJqoSr", UserId => "JXVFmSYpDYmffDBgAPsq", userId => "lWNHVRgQhCVOcxwiVgFLSqJdq", VpcId => "DStfkJREegGMIrurqVsHMBXU", vpcId => "DvFvF", VpcPeeringConnectionId => "VVYKklqWzPvvdJxKcNVACkKBObc", vpcPeeringConnectionId => "MYQhsLmyMcWaklyTZxWWoZXND")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
# IpProtocol
# ipProtocol
# IpRanges
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "tXlOOMimaTu", cidrIp => "gqobsPUPXEOQlfpcrcfdhKyOSnHnW", Description => "AFjRbUeQpYDYEkVmCpr", description => "oLDjgysIoXZiOwKRvfw")
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "tXlOOMimaTu", cidrIp => "gqobsPUPXEOQlfpcrcfdhKyOSnHnW", Description => "AFjRbUeQpYDYEkVmCpr", description => "oLDjgysIoXZiOwKRvfw")
# CidrIp
# cidrIp
# Description
# description
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "hdQioY", cidrIp => "talWoTOfYbmNFGlRnIBce", Description => "vEboHdZuDINSpYwgaWqaXnHRmXy", description => "iMofCNlxIo")
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "hdQioY", cidrIp => "talWoTOfYbmNFGlRnIBce", Description => "vEboHdZuDINSpYwgaWqaXnHRmXy", description => "iMofCNlxIo")
# CidrIp
# cidrIp
# Description
# description
# ipRanges
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "TtTgtjKDfImYzCLsppVRW", cidrIp => "qHIVvmGHmWf", Description => "ZvWiDlglOwghmOUacMNVJDjRkYOu", description => "PZYPnebPWKxOLcl")
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "TtTgtjKDfImYzCLsppVRW", cidrIp => "qHIVvmGHmWf", Description => "ZvWiDlglOwghmOUacMNVJDjRkYOu", description => "PZYPnebPWKxOLcl")
# CidrIp
# cidrIp
# Description
# description
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "cHjfVzGxIo", cidrIp => "eciWPGQpXAO", Description => "FwmKASWcDZU", description => "PSbgmudnzsnIjAtHAVjxXzsvcWSmWg")
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "cHjfVzGxIo", cidrIp => "eciWPGQpXAO", Description => "FwmKASWcDZU", description => "PSbgmudnzsnIjAtHAVjxXzsvcWSmWg")
# CidrIp
# cidrIp
# Description
# description
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "IWEwwwbsxxBfZpgmH", cidrIp => "hNentsQxdI", Description => "uuIzwsHzZfGxuZZglrPfj", description => "FTegOjyOBchlseffGSLXkQbFsQy")
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "IWEwwwbsxxBfZpgmH", cidrIp => "hNentsQxdI", Description => "uuIzwsHzZfGxuZZglrPfj", description => "FTegOjyOBchlseffGSLXkQbFsQy")
# CidrIp
# cidrIp
# Description
# description
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "foeHpbkjlFMvfBOkLSpa", cidrIp => "snyyId", Description => "ndPxmlWKQjBWmGnsp", description => "bhOMnDNIHUXEbdaZNpLmmhxtWPIny")
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "foeHpbkjlFMvfBOkLSpa", cidrIp => "snyyId", Description => "ndPxmlWKQjBWmGnsp", description => "bhOMnDNIHUXEbdaZNpLmmhxtWPIny")
# CidrIp
# cidrIp
# Description
# description
# Ipv6Ranges
# ipv6Ranges
Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "ijoRsqjzFXVfOn", cidrIpv6 => "kicEauFlBGWrejxZk", Description => "uvCIFErvjSOGirwzWZvAemCcsgX", description => "DNXCLSvj")
Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "ijoRsqjzFXVfOn", cidrIpv6 => "kicEauFlBGWrejxZk", Description => "uvCIFErvjSOGirwzWZvAemCcsgX", description => "DNXCLSvj")
# CidrIpv6
# cidrIpv6
# Description
# description
Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "rpBPFHhYvirasbQswn", cidrIpv6 => "sFvsWUDnnXkEdAXglkYAVYlX", Description => "BcZOoREkyObsCyYGeWHeZm", description => "MXJEsgyr")
Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "rpBPFHhYvirasbQswn", cidrIpv6 => "sFvsWUDnnXkEdAXglkYAVYlX", Description => "BcZOoREkyObsCyYGeWHeZm", description => "MXJEsgyr")
# CidrIpv6
# cidrIpv6
# Description
# description
Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "nCNNmVAlLUqnHdwpIZNhh", cidrIpv6 => "iKGGHzwPbZStfcQOZVwZzGRRdBj", Description => "xHXFXnUwt", description => "tLTlwLFNuZnYSfFpZNHoCLUwXpaosQ")
Amazon::AWS::EC2::Types::Ipv6Range.new(CidrIpv6 => "nCNNmVAlLUqnHdwpIZNhh", cidrIpv6 => "iKGGHzwPbZStfcQOZVwZzGRRdBj", Description => "xHXFXnUwt", description => "tLTlwLFNuZnYSfFpZNHoCLUwXpaosQ")
# CidrIpv6
# cidrIpv6
# Description
# description
# PrefixListIds
# prefixListIds
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "ocdRkQANsIbSQiDtWPt", description => "aDLZaW", PrefixListId => "MLSDXzcIjUSoY", prefixListId => "BfNoFxMXMePbjWPyWxUqC")
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "ocdRkQANsIbSQiDtWPt", description => "aDLZaW", PrefixListId => "MLSDXzcIjUSoY", prefixListId => "BfNoFxMXMePbjWPyWxUqC")
# Description
# description
# PrefixListId
# prefixListId
# ToPort
# toPort
Amazon::AWS::EC2::Types::IpPermission.new(FromPort => 20, fromPort => 11, UserIdGroupPairs => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "TflySkTGpFTljHSv", description => "roZwsElktDPOZdD", GroupId => "VvykyIyKWUVDcRj", groupId => "tiJHQTSWmKlbFOytHk", GroupName => "iebmGfHWnEPC", groupName => "LuNsbxV", PeeringStatus => "MXXGzWqfPjuKAiOZCvENznG", peeringStatus => "VlpeqqFjswMBhRBPDnk", UserId => "IxlKVbWYQgiHbwuEOkR", userId => "nQnvSApFoHFAKJOSvCNScG", VpcId => "OehTwGDomMLGYJIYFfXIIZ", vpcId => "uywdQSlpxMVcVsHsFrVDowNZReHH", VpcPeeringConnectionId => "xBSguOSoFmghQ", vpcPeeringConnectionId => "cqauxcsjUqFryyTcd"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "KrvYzHB", description => "qtPRtUgsiGLHGGKtsQQwwmqdApMps", GroupId => "CyGctbV", groupId => "SjnSgoNDY", GroupName => "OCwvOvXxW", groupName => "dFIAGavReweGZlJLjzWnd", PeeringStatus => "ZfbLXlhA", peeringStatus => "ttQFgoNW", UserId => "LBxWjfYrbrRnxQtTVVEgcWVNTvTRJj", userId => "oFjIPxgjoitH", VpcId => "bQNjaftuLtE", vpcId => "gQAaDWyXIY", VpcPeeringConnectionId => "EDpjHTjkGKzYsviNd", vpcPeeringConnectionId => "TtCTWqvM"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "bdHGqOaDdOotwRKImnKLSfzcvNsz", description => "tYMTx", GroupId => "VBOTtePnOGLOYd", groupId => "xZUsetWeIchygnpGlDOuxtEVLBl", GroupName => "gDCdazXiX", groupName => "WjJhPjCvpir", PeeringStatus => "BdOSbY", peeringStatus => "JmIEMxljhfBNmFcWDFUx", UserId => "lkHzNoIyRKmssxyXF", userId => "paZNUsxcHM", VpcId => "JKmeCYOHxNKsMPQOuQuOTeWMSfd", vpcId => "unwHzFRiYzGfRyNkzyqoikZzpeXGhk", VpcPeeringConnectionId => "BTvPMfwEFtdHXlMvosKO", vpcPeeringConnectionId => "vrUOwutiBDeZwPJWZElJLUX")), groups => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "JpTXlOUxacWGkHGhJthCUvL", description => "ntoaSHeSncrqKHajVX", GroupId => "sXUgPztKrmSsrhXVseYrc", groupId => "whwaYFqitGdYzNBGrHxctasuHIalf", GroupName => "AtualojO", groupName => "PGiFQFv", PeeringStatus => "KXmfnBlrNdGqSf", peeringStatus => "syOsblDJznEtu", UserId => "jBhPQ", userId => "NeSAOPCkGQiMwM", VpcId => "VqSruhKvQReqswywG", vpcId => "WOsHaYZg", VpcPeeringConnectionId => "XANSiyNnOsjflRsSeQSQlYZUm", vpcPeeringConnectionId => "pIhUnrvPSJPQEwoKDLf")), IpProtocol => "EYkfyKoppdKvTrmSYxrdY", ipProtocol => "rbOTKCkLxsTSTJzFiccRwNCXB", IpRanges => Array[Amazon::AWS::EC2::Types::IpRange].new(Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "pEUWjXglSdUOoOaJhkjCeFvIfx", cidrIp => "GSRqthkOQYbKXutyzTLKutLw", Description => "QlwoKlPvPZRZaZvupEkajAlZhKL", description => "bNCbdGeXmSof"), Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "cOopORWsRriZH", cidrIp => "hyasGvPualaAIFXogvKTSgNDiOXv", Description => "yFgbYcVQb", description => "bOwErLupApcyPLBnsp"), Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "hffbsKMd", cidrIp => "SnonTOdUbpskTQoQTfT", Description => "QSrqyXQhvJEBqfGJaWgmyPq", description => "yUjBwrPkqxdnVDSeNQJ"), Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "inTZuoh", cidrIp => "ABxpwehXBppzsyBSo", Description => "SJQbMiolHLUIkhCJZRNMCcg", description => "BaobEHLWc")), ipRanges => Array[Amazon::AWS::EC2::Types::IpRange].new(Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "NrBXj", cidrIp => "fwATnDqZFFXQbsZiktWT", Description => "AADyJPlUNqLqwWyOkyNcPtZQKqpjCh", description => "KhsvWQYiwHHuFI"), Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "girakNSAQNNEdfReKyg", cidrIp => "bpaxAM", Description => "pOVwwprkfkHCzyECBePAooW", description => "nttdvDRfNOUeNcnkatmdaTRKZ")), Ipv6Ranges => Array[Amazon::AWS::EC2::Types::Ipv6Range].new(), ipv6Ranges => Array[Amazon::AWS::EC2::Types::Ipv6Range].new(), PrefixListIds => Array[Amazon::AWS::EC2::Types::PrefixListId].new(Amazon::AWS::EC2::Types::PrefixListId.new(Description => "niuaFmnyiofowpQZpxYepRObP", description => "EAlsw", PrefixListId => "mVjuAOlV", prefixListId => "aXaOihQjiOwgoAKXXHawuq"), Amazon::AWS::EC2::Types::PrefixListId.new(Description => "McmLGmfRIAzulVJfMHYn", description => "SoPWfdYt", PrefixListId => "QukTIHQtiwrpryCnKnpRbhnX", prefixListId => "KuyNORkmeAnA"), Amazon::AWS::EC2::Types::PrefixListId.new(Description => "ajiGe", description => "wTSFRYR", PrefixListId => "WFstx", prefixListId => "sCOXizhLzxIitOjVYkPNZndF"), Amazon::AWS::EC2::Types::PrefixListId.new(Description => "eqYSJmUSyviInofFWLcgkEPHxpR", description => "HfXdUtquWLjdaxtruDcJchCzu", PrefixListId => "tXulnTBXutOQSp", prefixListId => "GuBQSCspNmJJiCBdihLGNweSZff")), prefixListIds => Array[Amazon::AWS::EC2::Types::PrefixListId].new(Amazon::AWS::EC2::Types::PrefixListId.new(Description => "dbwDyKYDDutqNlfFlHDND", description => "bvnRQoZpoZdHbPahWPrBJXPkVL", PrefixListId => "szcaaWWmyFkRFaEjVcEDILse", prefixListId => "IiEmfHkdwrXcCoMfDaYczl"), Amazon::AWS::EC2::Types::PrefixListId.new(Description => "HbTGFXfhiEahmHqeBItRIiDiPcCap", description => "WHmEBgBKtAXfACvPnHkJgxL", PrefixListId => "hBFoInVyIGgfbVxFdIHYfspT", prefixListId => "qaNZfISViLJQmpzEwkUKbavasgl"), Amazon::AWS::EC2::Types::PrefixListId.new(Description => "EZlIZDJUKhzGlpRGdt", description => "dWdEHVxQjrrotRmPPFSOyFhzZ", PrefixListId => "SIvHcITlu", prefixListId => "sahmEu")), ToPort => 14, toPort => 13)
Amazon::AWS::EC2::Types::IpPermission.new(FromPort => 20, fromPort => 11, UserIdGroupPairs => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "TflySkTGpFTljHSv", description => "roZwsElktDPOZdD", GroupId => "VvykyIyKWUVDcRj", groupId => "tiJHQTSWmKlbFOytHk", GroupName => "iebmGfHWnEPC", groupName => "LuNsbxV", PeeringStatus => "MXXGzWqfPjuKAiOZCvENznG", peeringStatus => "VlpeqqFjswMBhRBPDnk", UserId => "IxlKVbWYQgiHbwuEOkR", userId => "nQnvSApFoHFAKJOSvCNScG", VpcId => "OehTwGDomMLGYJIYFfXIIZ", vpcId => "uywdQSlpxMVcVsHsFrVDowNZReHH", VpcPeeringConnectionId => "xBSguOSoFmghQ", vpcPeeringConnectionId => "cqauxcsjUqFryyTcd"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "KrvYzHB", description => "qtPRtUgsiGLHGGKtsQQwwmqdApMps", GroupId => "CyGctbV", groupId => "SjnSgoNDY", GroupName => "OCwvOvXxW", groupName => "dFIAGavReweGZlJLjzWnd", PeeringStatus => "ZfbLXlhA", peeringStatus => "ttQFgoNW", UserId => "LBxWjfYrbrRnxQtTVVEgcWVNTvTRJj", userId => "oFjIPxgjoitH", VpcId => "bQNjaftuLtE", vpcId => "gQAaDWyXIY", VpcPeeringConnectionId => "EDpjHTjkGKzYsviNd", vpcPeeringConnectionId => "TtCTWqvM"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "bdHGqOaDdOotwRKImnKLSfzcvNsz", description => "tYMTx", GroupId => "VBOTtePnOGLOYd", groupId => "xZUsetWeIchygnpGlDOuxtEVLBl", GroupName => "gDCdazXiX", groupName => "WjJhPjCvpir", PeeringStatus => "BdOSbY", peeringStatus => "JmIEMxljhfBNmFcWDFUx", UserId => "lkHzNoIyRKmssxyXF", userId => "paZNUsxcHM", VpcId => "JKmeCYOHxNKsMPQOuQuOTeWMSfd", vpcId => "unwHzFRiYzGfRyNkzyqoikZzpeXGhk", VpcPeeringConnectionId => "BTvPMfwEFtdHXlMvosKO", vpcPeeringConnectionId => "vrUOwutiBDeZwPJWZElJLUX")), groups => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "JpTXlOUxacWGkHGhJthCUvL", description => "ntoaSHeSncrqKHajVX", GroupId => "sXUgPztKrmSsrhXVseYrc", groupId => "whwaYFqitGdYzNBGrHxctasuHIalf", GroupName => "AtualojO", groupName => "PGiFQFv", PeeringStatus => "KXmfnBlrNdGqSf", peeringStatus => "syOsblDJznEtu", UserId => "jBhPQ", userId => "NeSAOPCkGQiMwM", VpcId => "VqSruhKvQReqswywG", vpcId => "WOsHaYZg", VpcPeeringConnectionId => "XANSiyNnOsjflRsSeQSQlYZUm", vpcPeeringConnectionId => "pIhUnrvPSJPQEwoKDLf")), IpProtocol => "EYkfyKoppdKvTrmSYxrdY", ipProtocol => "rbOTKCkLxsTSTJzFiccRwNCXB", IpRanges => Array[Amazon::AWS::EC2::Types::IpRange].new(Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "pEUWjXglSdUOoOaJhkjCeFvIfx", cidrIp => "GSRqthkOQYbKXutyzTLKutLw", Description => "QlwoKlPvPZRZaZvupEkajAlZhKL", description => "bNCbdGeXmSof"), Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "cOopORWsRriZH", cidrIp => "hyasGvPualaAIFXogvKTSgNDiOXv", Description => "yFgbYcVQb", description => "bOwErLupApcyPLBnsp"), Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "hffbsKMd", cidrIp => "SnonTOdUbpskTQoQTfT", Description => "QSrqyXQhvJEBqfGJaWgmyPq", description => "yUjBwrPkqxdnVDSeNQJ"), Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "inTZuoh", cidrIp => "ABxpwehXBppzsyBSo", Description => "SJQbMiolHLUIkhCJZRNMCcg", description => "BaobEHLWc")), ipRanges => Array[Amazon::AWS::EC2::Types::IpRange].new(Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "NrBXj", cidrIp => "fwATnDqZFFXQbsZiktWT", Description => "AADyJPlUNqLqwWyOkyNcPtZQKqpjCh", description => "KhsvWQYiwHHuFI"), Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "girakNSAQNNEdfReKyg", cidrIp => "bpaxAM", Description => "pOVwwprkfkHCzyECBePAooW", description => "nttdvDRfNOUeNcnkatmdaTRKZ")), Ipv6Ranges => Array[Amazon::AWS::EC2::Types::Ipv6Range].new(), ipv6Ranges => Array[Amazon::AWS::EC2::Types::Ipv6Range].new(), PrefixListIds => Array[Amazon::AWS::EC2::Types::PrefixListId].new(Amazon::AWS::EC2::Types::PrefixListId.new(Description => "niuaFmnyiofowpQZpxYepRObP", description => "EAlsw", PrefixListId => "mVjuAOlV", prefixListId => "aXaOihQjiOwgoAKXXHawuq"), Amazon::AWS::EC2::Types::PrefixListId.new(Description => "McmLGmfRIAzulVJfMHYn", description => "SoPWfdYt", PrefixListId => "QukTIHQtiwrpryCnKnpRbhnX", prefixListId => "KuyNORkmeAnA"), Amazon::AWS::EC2::Types::PrefixListId.new(Description => "ajiGe", description => "wTSFRYR", PrefixListId => "WFstx", prefixListId => "sCOXizhLzxIitOjVYkPNZndF"), Amazon::AWS::EC2::Types::PrefixListId.new(Description => "eqYSJmUSyviInofFWLcgkEPHxpR", description => "HfXdUtquWLjdaxtruDcJchCzu", PrefixListId => "tXulnTBXutOQSp", prefixListId => "GuBQSCspNmJJiCBdihLGNweSZff")), prefixListIds => Array[Amazon::AWS::EC2::Types::PrefixListId].new(Amazon::AWS::EC2::Types::PrefixListId.new(Description => "dbwDyKYDDutqNlfFlHDND", description => "bvnRQoZpoZdHbPahWPrBJXPkVL", PrefixListId => "szcaaWWmyFkRFaEjVcEDILse", prefixListId => "IiEmfHkdwrXcCoMfDaYczl"), Amazon::AWS::EC2::Types::PrefixListId.new(Description => "HbTGFXfhiEahmHqeBItRIiDiPcCap", description => "WHmEBgBKtAXfACvPnHkJgxL", PrefixListId => "hBFoInVyIGgfbVxFdIHYfspT", prefixListId => "qaNZfISViLJQmpzEwkUKbavasgl"), Amazon::AWS::EC2::Types::PrefixListId.new(Description => "EZlIZDJUKhzGlpRGdt", description => "dWdEHVxQjrrotRmPPFSOyFhzZ", PrefixListId => "SIvHcITlu", prefixListId => "sahmEu")), ToPort => 14, toPort => 13)
# FromPort
# fromPort
# UserIdGroupPairs
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "TflySkTGpFTljHSv", description => "roZwsElktDPOZdD", GroupId => "VvykyIyKWUVDcRj", groupId => "tiJHQTSWmKlbFOytHk", GroupName => "iebmGfHWnEPC", groupName => "LuNsbxV", PeeringStatus => "MXXGzWqfPjuKAiOZCvENznG", peeringStatus => "VlpeqqFjswMBhRBPDnk", UserId => "IxlKVbWYQgiHbwuEOkR", userId => "nQnvSApFoHFAKJOSvCNScG", VpcId => "OehTwGDomMLGYJIYFfXIIZ", vpcId => "uywdQSlpxMVcVsHsFrVDowNZReHH", VpcPeeringConnectionId => "xBSguOSoFmghQ", vpcPeeringConnectionId => "cqauxcsjUqFryyTcd")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "TflySkTGpFTljHSv", description => "roZwsElktDPOZdD", GroupId => "VvykyIyKWUVDcRj", groupId => "tiJHQTSWmKlbFOytHk", GroupName => "iebmGfHWnEPC", groupName => "LuNsbxV", PeeringStatus => "MXXGzWqfPjuKAiOZCvENznG", peeringStatus => "VlpeqqFjswMBhRBPDnk", UserId => "IxlKVbWYQgiHbwuEOkR", userId => "nQnvSApFoHFAKJOSvCNScG", VpcId => "OehTwGDomMLGYJIYFfXIIZ", vpcId => "uywdQSlpxMVcVsHsFrVDowNZReHH", VpcPeeringConnectionId => "xBSguOSoFmghQ", vpcPeeringConnectionId => "cqauxcsjUqFryyTcd")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "KrvYzHB", description => "qtPRtUgsiGLHGGKtsQQwwmqdApMps", GroupId => "CyGctbV", groupId => "SjnSgoNDY", GroupName => "OCwvOvXxW", groupName => "dFIAGavReweGZlJLjzWnd", PeeringStatus => "ZfbLXlhA", peeringStatus => "ttQFgoNW", UserId => "LBxWjfYrbrRnxQtTVVEgcWVNTvTRJj", userId => "oFjIPxgjoitH", VpcId => "bQNjaftuLtE", vpcId => "gQAaDWyXIY", VpcPeeringConnectionId => "EDpjHTjkGKzYsviNd", vpcPeeringConnectionId => "TtCTWqvM")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "KrvYzHB", description => "qtPRtUgsiGLHGGKtsQQwwmqdApMps", GroupId => "CyGctbV", groupId => "SjnSgoNDY", GroupName => "OCwvOvXxW", groupName => "dFIAGavReweGZlJLjzWnd", PeeringStatus => "ZfbLXlhA", peeringStatus => "ttQFgoNW", UserId => "LBxWjfYrbrRnxQtTVVEgcWVNTvTRJj", userId => "oFjIPxgjoitH", VpcId => "bQNjaftuLtE", vpcId => "gQAaDWyXIY", VpcPeeringConnectionId => "EDpjHTjkGKzYsviNd", vpcPeeringConnectionId => "TtCTWqvM")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "bdHGqOaDdOotwRKImnKLSfzcvNsz", description => "tYMTx", GroupId => "VBOTtePnOGLOYd", groupId => "xZUsetWeIchygnpGlDOuxtEVLBl", GroupName => "gDCdazXiX", groupName => "WjJhPjCvpir", PeeringStatus => "BdOSbY", peeringStatus => "JmIEMxljhfBNmFcWDFUx", UserId => "lkHzNoIyRKmssxyXF", userId => "paZNUsxcHM", VpcId => "JKmeCYOHxNKsMPQOuQuOTeWMSfd", vpcId => "unwHzFRiYzGfRyNkzyqoikZzpeXGhk", VpcPeeringConnectionId => "BTvPMfwEFtdHXlMvosKO", vpcPeeringConnectionId => "vrUOwutiBDeZwPJWZElJLUX")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "bdHGqOaDdOotwRKImnKLSfzcvNsz", description => "tYMTx", GroupId => "VBOTtePnOGLOYd", groupId => "xZUsetWeIchygnpGlDOuxtEVLBl", GroupName => "gDCdazXiX", groupName => "WjJhPjCvpir", PeeringStatus => "BdOSbY", peeringStatus => "JmIEMxljhfBNmFcWDFUx", UserId => "lkHzNoIyRKmssxyXF", userId => "paZNUsxcHM", VpcId => "JKmeCYOHxNKsMPQOuQuOTeWMSfd", vpcId => "unwHzFRiYzGfRyNkzyqoikZzpeXGhk", VpcPeeringConnectionId => "BTvPMfwEFtdHXlMvosKO", vpcPeeringConnectionId => "vrUOwutiBDeZwPJWZElJLUX")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
# groups
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "JpTXlOUxacWGkHGhJthCUvL", description => "ntoaSHeSncrqKHajVX", GroupId => "sXUgPztKrmSsrhXVseYrc", groupId => "whwaYFqitGdYzNBGrHxctasuHIalf", GroupName => "AtualojO", groupName => "PGiFQFv", PeeringStatus => "KXmfnBlrNdGqSf", peeringStatus => "syOsblDJznEtu", UserId => "jBhPQ", userId => "NeSAOPCkGQiMwM", VpcId => "VqSruhKvQReqswywG", vpcId => "WOsHaYZg", VpcPeeringConnectionId => "XANSiyNnOsjflRsSeQSQlYZUm", vpcPeeringConnectionId => "pIhUnrvPSJPQEwoKDLf")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "JpTXlOUxacWGkHGhJthCUvL", description => "ntoaSHeSncrqKHajVX", GroupId => "sXUgPztKrmSsrhXVseYrc", groupId => "whwaYFqitGdYzNBGrHxctasuHIalf", GroupName => "AtualojO", groupName => "PGiFQFv", PeeringStatus => "KXmfnBlrNdGqSf", peeringStatus => "syOsblDJznEtu", UserId => "jBhPQ", userId => "NeSAOPCkGQiMwM", VpcId => "VqSruhKvQReqswywG", vpcId => "WOsHaYZg", VpcPeeringConnectionId => "XANSiyNnOsjflRsSeQSQlYZUm", vpcPeeringConnectionId => "pIhUnrvPSJPQEwoKDLf")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
# IpProtocol
# ipProtocol
# IpRanges
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "pEUWjXglSdUOoOaJhkjCeFvIfx", cidrIp => "GSRqthkOQYbKXutyzTLKutLw", Description => "QlwoKlPvPZRZaZvupEkajAlZhKL", description => "bNCbdGeXmSof")
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "pEUWjXglSdUOoOaJhkjCeFvIfx", cidrIp => "GSRqthkOQYbKXutyzTLKutLw", Description => "QlwoKlPvPZRZaZvupEkajAlZhKL", description => "bNCbdGeXmSof")
# CidrIp
# cidrIp
# Description
# description
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "cOopORWsRriZH", cidrIp => "hyasGvPualaAIFXogvKTSgNDiOXv", Description => "yFgbYcVQb", description => "bOwErLupApcyPLBnsp")
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "cOopORWsRriZH", cidrIp => "hyasGvPualaAIFXogvKTSgNDiOXv", Description => "yFgbYcVQb", description => "bOwErLupApcyPLBnsp")
# CidrIp
# cidrIp
# Description
# description
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "hffbsKMd", cidrIp => "SnonTOdUbpskTQoQTfT", Description => "QSrqyXQhvJEBqfGJaWgmyPq", description => "yUjBwrPkqxdnVDSeNQJ")
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "hffbsKMd", cidrIp => "SnonTOdUbpskTQoQTfT", Description => "QSrqyXQhvJEBqfGJaWgmyPq", description => "yUjBwrPkqxdnVDSeNQJ")
# CidrIp
# cidrIp
# Description
# description
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "inTZuoh", cidrIp => "ABxpwehXBppzsyBSo", Description => "SJQbMiolHLUIkhCJZRNMCcg", description => "BaobEHLWc")
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "inTZuoh", cidrIp => "ABxpwehXBppzsyBSo", Description => "SJQbMiolHLUIkhCJZRNMCcg", description => "BaobEHLWc")
# CidrIp
# cidrIp
# Description
# description
# ipRanges
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "NrBXj", cidrIp => "fwATnDqZFFXQbsZiktWT", Description => "AADyJPlUNqLqwWyOkyNcPtZQKqpjCh", description => "KhsvWQYiwHHuFI")
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "NrBXj", cidrIp => "fwATnDqZFFXQbsZiktWT", Description => "AADyJPlUNqLqwWyOkyNcPtZQKqpjCh", description => "KhsvWQYiwHHuFI")
# CidrIp
# cidrIp
# Description
# description
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "girakNSAQNNEdfReKyg", cidrIp => "bpaxAM", Description => "pOVwwprkfkHCzyECBePAooW", description => "nttdvDRfNOUeNcnkatmdaTRKZ")
Amazon::AWS::EC2::Types::IpRange.new(CidrIp => "girakNSAQNNEdfReKyg", cidrIp => "bpaxAM", Description => "pOVwwprkfkHCzyECBePAooW", description => "nttdvDRfNOUeNcnkatmdaTRKZ")
# CidrIp
# cidrIp
# Description
# description
# Ipv6Ranges
# ipv6Ranges
# PrefixListIds
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "niuaFmnyiofowpQZpxYepRObP", description => "EAlsw", PrefixListId => "mVjuAOlV", prefixListId => "aXaOihQjiOwgoAKXXHawuq")
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "niuaFmnyiofowpQZpxYepRObP", description => "EAlsw", PrefixListId => "mVjuAOlV", prefixListId => "aXaOihQjiOwgoAKXXHawuq")
# Description
# description
# PrefixListId
# prefixListId
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "McmLGmfRIAzulVJfMHYn", description => "SoPWfdYt", PrefixListId => "QukTIHQtiwrpryCnKnpRbhnX", prefixListId => "KuyNORkmeAnA")
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "McmLGmfRIAzulVJfMHYn", description => "SoPWfdYt", PrefixListId => "QukTIHQtiwrpryCnKnpRbhnX", prefixListId => "KuyNORkmeAnA")
# Description
# description
# PrefixListId
# prefixListId
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "ajiGe", description => "wTSFRYR", PrefixListId => "WFstx", prefixListId => "sCOXizhLzxIitOjVYkPNZndF")
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "ajiGe", description => "wTSFRYR", PrefixListId => "WFstx", prefixListId => "sCOXizhLzxIitOjVYkPNZndF")
# Description
# description
# PrefixListId
# prefixListId
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "eqYSJmUSyviInofFWLcgkEPHxpR", description => "HfXdUtquWLjdaxtruDcJchCzu", PrefixListId => "tXulnTBXutOQSp", prefixListId => "GuBQSCspNmJJiCBdihLGNweSZff")
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "eqYSJmUSyviInofFWLcgkEPHxpR", description => "HfXdUtquWLjdaxtruDcJchCzu", PrefixListId => "tXulnTBXutOQSp", prefixListId => "GuBQSCspNmJJiCBdihLGNweSZff")
# Description
# description
# PrefixListId
# prefixListId
# prefixListIds
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "dbwDyKYDDutqNlfFlHDND", description => "bvnRQoZpoZdHbPahWPrBJXPkVL", PrefixListId => "szcaaWWmyFkRFaEjVcEDILse", prefixListId => "IiEmfHkdwrXcCoMfDaYczl")
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "dbwDyKYDDutqNlfFlHDND", description => "bvnRQoZpoZdHbPahWPrBJXPkVL", PrefixListId => "szcaaWWmyFkRFaEjVcEDILse", prefixListId => "IiEmfHkdwrXcCoMfDaYczl")
# Description
# description
# PrefixListId
# prefixListId
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "HbTGFXfhiEahmHqeBItRIiDiPcCap", description => "WHmEBgBKtAXfACvPnHkJgxL", PrefixListId => "hBFoInVyIGgfbVxFdIHYfspT", prefixListId => "qaNZfISViLJQmpzEwkUKbavasgl")
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "HbTGFXfhiEahmHqeBItRIiDiPcCap", description => "WHmEBgBKtAXfACvPnHkJgxL", PrefixListId => "hBFoInVyIGgfbVxFdIHYfspT", prefixListId => "qaNZfISViLJQmpzEwkUKbavasgl")
# Description
# description
# PrefixListId
# prefixListId
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "EZlIZDJUKhzGlpRGdt", description => "dWdEHVxQjrrotRmPPFSOyFhzZ", PrefixListId => "SIvHcITlu", prefixListId => "sahmEu")
Amazon::AWS::EC2::Types::PrefixListId.new(Description => "EZlIZDJUKhzGlpRGdt", description => "dWdEHVxQjrrotRmPPFSOyFhzZ", PrefixListId => "SIvHcITlu", prefixListId => "sahmEu")
# Description
# description
# PrefixListId
# prefixListId
# ToPort
# toPort
# ipPermissionsEgress
# ownerId
# tags
# vpcId
ok 2265 - Amazon::AWS::EC2::Types::SecurityGroup compares ok
# CHANGE!
# vicselect
# groupDescription, groupId, groupName, ipPermissions, ipPermissionsEgress, ownerId, tags, vpcId
# vpcId -- Str
# Setting vpcId to syzygy!kuOKSDfpFCdAN
ok 2266 - Changed Amazon::AWS::EC2::Types::SecurityGroup fails eqv
ok 2267 - Amazon::AWS::EC2::Types::ServiceConfiguration loads. Is not a Failure object
ok 2268 - Amazon::AWS::EC2::Types::ServiceConfiguration exists
ok 2269 - Amazon::AWS::EC2::Types::ServiceConfiguration can be populated
ok 2270 - Amazon::AWS::EC2::Types::ServiceConfiguration serializes ok
ok 2271 - Amazon::AWS::EC2::Types::ServiceConfiguration deseralizes ok
# acceptanceRequired
# availabilityZones
TTYRGDyokqMOwEEfqQukWYUQWY
TTYRGDyokqMOwEEfqQukWYUQWY
AwfSQjrCuNtZCfC
AwfSQjrCuNtZCfC
NWudVYevWmRHMOstFyqEQYpNu
NWudVYevWmRHMOstFyqEQYpNu
NFYnrOzJPwOlVawbLvAozGoC
NFYnrOzJPwOlVawbLvAozGoC
# baseEndpointDnsNames
feGeEnfiWGyzQDyrxyAjyieimoOP
feGeEnfiWGyzQDyrxyAjyieimoOP
# managesVpcEndpoints
# networkLoadBalancerArns
MhiCdVjwgQPAE
MhiCdVjwgQPAE
HHiESwRTpYvzwEWKNWMNFRXrDnlOem
HHiESwRTpYvzwEWKNWMNFRXrDnlOem
# privateDnsName
# serviceId
# serviceName
# serviceState
# serviceType
Amazon::AWS::EC2::Types::ServiceTypeDetail.new(serviceType => "Gateway")
Amazon::AWS::EC2::Types::ServiceTypeDetail.new(serviceType => "Gateway")
# serviceType
Amazon::AWS::EC2::Types::ServiceTypeDetail.new(serviceType => "Interface")
Amazon::AWS::EC2::Types::ServiceTypeDetail.new(serviceType => "Interface")
# serviceType
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "tRyFZBHgNaZ", key => "zemdGGAdtJlJoefGejRWamkqdmUCZk", Value => "HmNbua", value => "pKobdKZxUYEqtbLVdo")
Amazon::AWS::EC2::Types::Tag.new(Key => "tRyFZBHgNaZ", key => "zemdGGAdtJlJoefGejRWamkqdmUCZk", Value => "HmNbua", value => "pKobdKZxUYEqtbLVdo")
# Key
# key
# Value
# value
ok 2272 - Amazon::AWS::EC2::Types::ServiceConfiguration compares ok
# CHANGE!
# vicselect
# acceptanceRequired, availabilityZones, baseEndpointDnsNames, managesVpcEndpoints, networkLoadBalancerArns, privateDnsName, serviceId, serviceName, serviceState, serviceType, tags
# networkLoadBalancerArns -- Str
# Setting networkLoadBalancerArns to []
# Type check failed in assignment to @!networkLoadBalancerArns; expected Str but got Array[Str] (Array[Str].new())
ok 2273 - Amazon::AWS::EC2::Types::ServiceDetail loads. Is not a Failure object
ok 2274 - Amazon::AWS::EC2::Types::ServiceDetail exists
ok 2275 - Amazon::AWS::EC2::Types::ServiceDetail can be populated
ok 2276 - Amazon::AWS::EC2::Types::ServiceDetail serializes ok
ok 2277 - Amazon::AWS::EC2::Types::ServiceDetail deseralizes ok
# acceptanceRequired
# availabilityZones
# baseEndpointDnsNames
# managesVpcEndpoints
# owner
# privateDnsName
# serviceId
# serviceName
# serviceType
Amazon::AWS::EC2::Types::ServiceTypeDetail.new(serviceType => "Gateway")
Amazon::AWS::EC2::Types::ServiceTypeDetail.new(serviceType => "Gateway")
# serviceType
Amazon::AWS::EC2::Types::ServiceTypeDetail.new(serviceType => "Gateway")
Amazon::AWS::EC2::Types::ServiceTypeDetail.new(serviceType => "Gateway")
# serviceType
Amazon::AWS::EC2::Types::ServiceTypeDetail.new(serviceType => "Interface")
Amazon::AWS::EC2::Types::ServiceTypeDetail.new(serviceType => "Interface")
# serviceType
Amazon::AWS::EC2::Types::ServiceTypeDetail.new(serviceType => "Gateway")
Amazon::AWS::EC2::Types::ServiceTypeDetail.new(serviceType => "Gateway")
# serviceType
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "xiwJlOkbpGhW", key => "qPcgSPybOpMQwBUDuSBNMhrVLEh", Value => "NhGDXnNholwyLBVdbtkzzyyI", value => "UOUPfQZMueXoUbeaQzPQta")
Amazon::AWS::EC2::Types::Tag.new(Key => "xiwJlOkbpGhW", key => "qPcgSPybOpMQwBUDuSBNMhrVLEh", Value => "NhGDXnNholwyLBVdbtkzzyyI", value => "UOUPfQZMueXoUbeaQzPQta")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "jOmUoQ", key => "LHzizsYvjLNaDpSTrlkGUHHm", Value => "SAjKDzoRe", value => "egLtgDmODxTd")
Amazon::AWS::EC2::Types::Tag.new(Key => "jOmUoQ", key => "LHzizsYvjLNaDpSTrlkGUHHm", Value => "SAjKDzoRe", value => "egLtgDmODxTd")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "gclPCYBvNmifkYVJsbz", key => "dRLyDkebtCjaRSHBVBWujCMoOP", Value => "rFNyUtaJOJgpDoQECA", value => "ruAkTP")
Amazon::AWS::EC2::Types::Tag.new(Key => "gclPCYBvNmifkYVJsbz", key => "dRLyDkebtCjaRSHBVBWujCMoOP", Value => "rFNyUtaJOJgpDoQECA", value => "ruAkTP")
# Key
# key
# Value
# value
# vpcEndpointPolicySupported
ok 2278 - Amazon::AWS::EC2::Types::ServiceDetail compares ok
# CHANGE!
# vicselect
# acceptanceRequired, availabilityZones, baseEndpointDnsNames, managesVpcEndpoints, owner, privateDnsName, serviceId, serviceName, serviceType, tags, vpcEndpointPolicySupported
# vpcEndpointPolicySupported -- Str
# Setting vpcEndpointPolicySupported to True
not ok 2279 - Changed Amazon::AWS::EC2::Types::ServiceDetail fails eqv
# Failed test 'Changed Amazon::AWS::EC2::Types::ServiceDetail fails eqv'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
ok 2280 - Amazon::AWS::EC2::Types::Snapshot loads. Is not a Failure object
ok 2281 - Amazon::AWS::EC2::Types::Snapshot exists
ok 2282 - Amazon::AWS::EC2::Types::Snapshot can be populated
ok 2283 - Amazon::AWS::EC2::Types::Snapshot serializes ok
ok 2284 - Amazon::AWS::EC2::Types::Snapshot deseralizes ok
# dataEncryptionKeyId
# description
# encrypted
# kmsKeyId
# ownerAlias
# ownerId
# progress
# snapshotId
# startTime
# status
# statusMessage
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "GUddZYWneLICUrXOL", key => "ssHSR", Value => "LLvRTXoLBOKfC", value => "GYmuUfqSoXISpKMYKKEFVM")
Amazon::AWS::EC2::Types::Tag.new(Key => "GUddZYWneLICUrXOL", key => "ssHSR", Value => "LLvRTXoLBOKfC", value => "GYmuUfqSoXISpKMYKKEFVM")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "gEzTBaBFFDyX", key => "qhXPQnesWOtG", Value => "ovaCPOd", value => "jnYXtlJuphlswfoveuDyzGNAudhHUf")
Amazon::AWS::EC2::Types::Tag.new(Key => "gEzTBaBFFDyX", key => "qhXPQnesWOtG", Value => "ovaCPOd", value => "jnYXtlJuphlswfoveuDyzGNAudhHUf")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "KtEuEMaEMmhL", key => "AZGVEuMLhHHJfUuKDuNxME", Value => "QgxisUxqhSgDrlPRIcdfyj", value => "RrvYriJylegZmu")
Amazon::AWS::EC2::Types::Tag.new(Key => "KtEuEMaEMmhL", key => "AZGVEuMLhHHJfUuKDuNxME", Value => "QgxisUxqhSgDrlPRIcdfyj", value => "RrvYriJylegZmu")
# Key
# key
# Value
# value
# volumeId
# volumeSize
ok 2285 - Amazon::AWS::EC2::Types::Snapshot compares ok
# CHANGE!
# vicselect
# dataEncryptionKeyId, description, encrypted, kmsKeyId, ownerAlias, ownerId, progress, snapshotId, startTime, status, statusMessage, tags, volumeId, volumeSize
# ownerId -- Str
# Setting ownerId to syzygy!VtCJjotpRlWuVXsBBfXyopGRvuSa
ok 2286 - Changed Amazon::AWS::EC2::Types::Snapshot fails eqv
ok 2287 - Amazon::AWS::EC2::Types::SnapshotDetail loads. Is not a Failure object
ok 2288 - Amazon::AWS::EC2::Types::SnapshotDetail exists
ok 2289 - Amazon::AWS::EC2::Types::SnapshotDetail can be populated
ok 2290 - Amazon::AWS::EC2::Types::SnapshotDetail serializes ok
ok 2291 - Amazon::AWS::EC2::Types::SnapshotDetail deseralizes ok
# description
# deviceName
# diskImageSize
# format
# progress
# snapshotId
# status
# statusMessage
# url
# userBucket
# s3Bucket
not ok 2292 - Amazon::AWS::EC2::Types::SnapshotDetail compares ok
# Failed test 'Amazon::AWS::EC2::Types::SnapshotDetail compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# description, deviceName, diskImageSize, format, progress, snapshotId, status, statusMessage, url, userBucket
# userBucket -- Str
# Setting userBucket to Amazon::AWS::EC2::Types::UserBucketDetails.new(s3Bucket => Str, s3Key => Str)
ok 2293 - Changed Amazon::AWS::EC2::Types::SnapshotDetail fails eqv
ok 2294 - Amazon::AWS::EC2::Types::SnapshotDiskContainer loads. Is not a Failure object
ok 2295 - Amazon::AWS::EC2::Types::SnapshotDiskContainer exists
ok 2296 - Amazon::AWS::EC2::Types::SnapshotDiskContainer can be populated
ok 2297 - Amazon::AWS::EC2::Types::SnapshotDiskContainer serializes ok
ok 2298 - Amazon::AWS::EC2::Types::SnapshotDiskContainer deseralizes ok
# Description
# Format
# Url
# UserBucket
# S3Bucket
not ok 2299 - Amazon::AWS::EC2::Types::SnapshotDiskContainer compares ok
# Failed test 'Amazon::AWS::EC2::Types::SnapshotDiskContainer compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# Description, Format, Url, UserBucket
# Description -- Str
# Setting Description to syzygy!mPTzXNfEtCqMyrLSqSbyASJ
ok 2300 - Changed Amazon::AWS::EC2::Types::SnapshotDiskContainer fails eqv
ok 2301 - Amazon::AWS::EC2::Types::SnapshotInfo loads. Is not a Failure object
ok 2302 - Amazon::AWS::EC2::Types::SnapshotInfo exists
ok 2303 - Amazon::AWS::EC2::Types::SnapshotInfo can be populated
ok 2304 - Amazon::AWS::EC2::Types::SnapshotInfo serializes ok
ok 2305 - Amazon::AWS::EC2::Types::SnapshotInfo deseralizes ok
# description
# encrypted
# ownerId
# progress
# snapshotId
# startTime
# state
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "zagZYrsyNmAJlocdhbWRchJpEO", key => "TidkjqeyCGxTYadsmcqFq", Value => "ALZJHeUguvHRGSdvDtPKkS", value => "aijufhmSAmliIBHHsOvMpPZ")
Amazon::AWS::EC2::Types::Tag.new(Key => "zagZYrsyNmAJlocdhbWRchJpEO", key => "TidkjqeyCGxTYadsmcqFq", Value => "ALZJHeUguvHRGSdvDtPKkS", value => "aijufhmSAmliIBHHsOvMpPZ")
# Key
# key
# Value
# value
# volumeId
# volumeSize
ok 2306 - Amazon::AWS::EC2::Types::SnapshotInfo compares ok
# CHANGE!
# vicselect
# description, encrypted, ownerId, progress, snapshotId, startTime, state, tags, volumeId, volumeSize
# description -- Str
# Setting description to syzygy!rggZOksHlnqHThoVN
ok 2307 - Changed Amazon::AWS::EC2::Types::SnapshotInfo fails eqv
ok 2308 - Amazon::AWS::EC2::Types::SnapshotTaskDetail loads. Is not a Failure object
ok 2309 - Amazon::AWS::EC2::Types::SnapshotTaskDetail exists
ok 2310 - Amazon::AWS::EC2::Types::SnapshotTaskDetail can be populated
ok 2311 - Amazon::AWS::EC2::Types::SnapshotTaskDetail serializes ok
ok 2312 - Amazon::AWS::EC2::Types::SnapshotTaskDetail deseralizes ok
# description
# diskImageSize
# encrypted
# format
# kmsKeyId
# progress
# snapshotId
# status
# statusMessage
# url
# userBucket
# s3Bucket
not ok 2313 - Amazon::AWS::EC2::Types::SnapshotTaskDetail compares ok
# Failed test 'Amazon::AWS::EC2::Types::SnapshotTaskDetail compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# description, diskImageSize, encrypted, format, kmsKeyId, progress, snapshotId, status, statusMessage, url, userBucket
# statusMessage -- Str
# Setting statusMessage to syzygy!FKovfzZD
ok 2314 - Changed Amazon::AWS::EC2::Types::SnapshotTaskDetail fails eqv
ok 2315 - Amazon::AWS::EC2::Types::SpotDatafeedSubscription loads. Is not a Failure object
ok 2316 - Amazon::AWS::EC2::Types::SpotDatafeedSubscription exists
ok 2317 - Amazon::AWS::EC2::Types::SpotDatafeedSubscription can be populated
ok 2318 - Amazon::AWS::EC2::Types::SpotDatafeedSubscription serializes ok
ok 2319 - Amazon::AWS::EC2::Types::SpotDatafeedSubscription deseralizes ok
# bucket
# fault
# code
not ok 2320 - Amazon::AWS::EC2::Types::SpotDatafeedSubscription compares ok
# Failed test 'Amazon::AWS::EC2::Types::SpotDatafeedSubscription compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# bucket, fault, ownerId, prefix, state
# ownerId -- Str
# Setting ownerId to syzygy!nzbqssZgggfhALKPtPSs
ok 2321 - Changed Amazon::AWS::EC2::Types::SpotDatafeedSubscription fails eqv
ok 2322 - Amazon::AWS::EC2::Types::SpotFleetTagSpecification loads. Is not a Failure object
ok 2323 - Amazon::AWS::EC2::Types::SpotFleetTagSpecification exists
ok 2324 - Amazon::AWS::EC2::Types::SpotFleetTagSpecification can be populated
ok 2325 - Amazon::AWS::EC2::Types::SpotFleetTagSpecification serializes ok
ok 2326 - Amazon::AWS::EC2::Types::SpotFleetTagSpecification deseralizes ok
# ResourceType
# resourceType
# Tags
# tag
Amazon::AWS::EC2::Types::Tag.new(Key => "grvaNytjoo", key => "ORQUMhBfoZlstGvdqlNeqLUosufq", Value => "vrwvXJyVVPtZLBujNlrEssVSvsS", value => "eGJEogqBWZBxJ")
Amazon::AWS::EC2::Types::Tag.new(Key => "grvaNytjoo", key => "ORQUMhBfoZlstGvdqlNeqLUosufq", Value => "vrwvXJyVVPtZLBujNlrEssVSvsS", value => "eGJEogqBWZBxJ")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "HVZzBAkTcSlNqBPyNWQPcnokvQSEBF", key => "ApMqdFacNFdBSRu", Value => "edlcjmOdYP", value => "IiKTZYnkgwmytnxyxcZqdIkvkLkA")
Amazon::AWS::EC2::Types::Tag.new(Key => "HVZzBAkTcSlNqBPyNWQPcnokvQSEBF", key => "ApMqdFacNFdBSRu", Value => "edlcjmOdYP", value => "IiKTZYnkgwmytnxyxcZqdIkvkLkA")
# Key
# key
# Value
# value
ok 2327 - Amazon::AWS::EC2::Types::SpotFleetTagSpecification compares ok
# CHANGE!
# vicselect
# ResourceType, resourceType, Tags, tag
# resourceType -- Str
# Setting resourceType to syzygy!client
ok 2328 - Changed Amazon::AWS::EC2::Types::SpotFleetTagSpecification fails eqv
ok 2329 - Amazon::AWS::EC2::Types::SpotInstanceRequest loads. Is not a Failure object
not ok 2330 - Amazon::AWS::EC2::Types::SpotInstanceRequest exists
# Failed test 'Amazon::AWS::EC2::Types::SpotInstanceRequest exists'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
Nil
Perl6::Metamodel::ClassHOW.new
# No such symbol 'Amazon::AWS::EC2::Types::SpotInstanceRequest'
not ok 2331 - Amazon::AWS::EC2::Types::SpotInstanceRequest can be populated
# Failed test 'Amazon::AWS::EC2::Types::SpotInstanceRequest can be populated'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such symbol 'Amazon::AWS::EC2::Types::SpotInstanceRequest'
not ok 2332 - Amazon::AWS::EC2::Types::SpotInstanceRequest serializes ok
# Failed test 'Amazon::AWS::EC2::Types::SpotInstanceRequest serializes ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such method 'to-xml' for invocant of type 'Any'
ok 2333 - Amazon::AWS::EC2::Types::SpotInstanceRequest deseralizes ok
# No such method 'eqv' for invocant of type 'Any'
ok 2334 - Amazon::AWS::EC2::Types::StaleIpPermission loads. Is not a Failure object
ok 2335 - Amazon::AWS::EC2::Types::StaleIpPermission exists
ok 2336 - Amazon::AWS::EC2::Types::StaleIpPermission can be populated
ok 2337 - Amazon::AWS::EC2::Types::StaleIpPermission serializes ok
ok 2338 - Amazon::AWS::EC2::Types::StaleIpPermission deseralizes ok
# fromPort
# groups
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "KCObKZxc", description => "ikyJwuZmgDEijDfeenxUBFq", GroupId => "FUPZktxhDwgpPOmtpGHY", groupId => "MSduSLdSolFEvMFlQ", GroupName => "hExLVbjefXntIPDFXjSO", groupName => "MaXqQKmKDUhAFEzNDaPN", PeeringStatus => "zeinZWhSe", peeringStatus => "QGmlbDieEFPsaTAfuQUpYoLpZLnPOg", UserId => "hmQxGeKrNlxZfuChP", userId => "ppxeYWxacbqDywgAtVP", VpcId => "yXGHHmKALcDsO", vpcId => "RwjUa", VpcPeeringConnectionId => "VoRvmcuyrxPAEjdV", vpcPeeringConnectionId => "bCybDBYYgsCoTquPAKcL")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "KCObKZxc", description => "ikyJwuZmgDEijDfeenxUBFq", GroupId => "FUPZktxhDwgpPOmtpGHY", groupId => "MSduSLdSolFEvMFlQ", GroupName => "hExLVbjefXntIPDFXjSO", groupName => "MaXqQKmKDUhAFEzNDaPN", PeeringStatus => "zeinZWhSe", peeringStatus => "QGmlbDieEFPsaTAfuQUpYoLpZLnPOg", UserId => "hmQxGeKrNlxZfuChP", userId => "ppxeYWxacbqDywgAtVP", VpcId => "yXGHHmKALcDsO", vpcId => "RwjUa", VpcPeeringConnectionId => "VoRvmcuyrxPAEjdV", vpcPeeringConnectionId => "bCybDBYYgsCoTquPAKcL")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
# ipProtocol
# ipRanges
KQoXEBMbHDpQ
KQoXEBMbHDpQ
DhqxAAcuTjIMXtSahL
DhqxAAcuTjIMXtSahL
jvPzRiKpkXFRwUJ
jvPzRiKpkXFRwUJ
# prefixListIds
IwwfopLXcPJu
IwwfopLXcPJu
pWRaABhknFeiscyyvtvEpHOka
pWRaABhknFeiscyyvtvEpHOka
MNfvoNbfKxzcpOCHqR
MNfvoNbfKxzcpOCHqR
MxJgDNIZqyCvfgyrciy
MxJgDNIZqyCvfgyrciy
# toPort
ok 2339 - Amazon::AWS::EC2::Types::StaleIpPermission compares ok
# CHANGE!
# vicselect
# fromPort, groups, ipProtocol, ipRanges, prefixListIds, toPort
# groups -- Str
# Setting groups to []
# Type check failed in assignment to @!groups; expected Amazon::AWS::EC2::Types::UserIdGroupPair but got Array[Amazon::AWS::EC2::Types::UserIdGroupPair] (Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new())
ok 2340 - Amazon::AWS::EC2::Types::StaleSecurityGroup loads. Is not a Failure object
ok 2341 - Amazon::AWS::EC2::Types::StaleSecurityGroup exists
ok 2342 - Amazon::AWS::EC2::Types::StaleSecurityGroup can be populated
ok 2343 - Amazon::AWS::EC2::Types::StaleSecurityGroup serializes ok
ok 2344 - Amazon::AWS::EC2::Types::StaleSecurityGroup deseralizes ok
# description
# groupId
# groupName
# staleIpPermissions
Amazon::AWS::EC2::Types::StaleIpPermission.new(fromPort => 8, groups => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "dZRYmsBwKIwLoUHa", description => "rrQunDeBCDDcQgfEGObvWnCV", GroupId => "PsetphEItVVKtId", groupId => "giGxsYvUHIChVZqFePmIZVyLNzYGW", GroupName => "LcyZRwjFCOev", groupName => "kampSRLwQeBt", PeeringStatus => "wDVuCNZrpPkBOIE", peeringStatus => "DqMIKsN", UserId => "RZTOUSFJoBhYfIwcgREFjVFZfDHi", userId => "RJVQKiHXaKOIvsZICeVb", VpcId => "RZyIWFhuxtNGcdVWTMhqe", vpcId => "olNTRxhMCOy", VpcPeeringConnectionId => "xcXFFAQtWgUHyyizpUZXbVVYtlfj", vpcPeeringConnectionId => "zjItEzk"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "kMUqYlyifvjNdxXtkhhV", description => "saCXzELQPSftIpGkUDeCnvUJMGolBu", GroupId => "vSfjgFb", groupId => "UvzQGl", GroupName => "xVPVGf", groupName => "TKzAHtumRNP", PeeringStatus => "dqRpLUWZACmLwnTByW", peeringStatus => "gWBRebOuKCX", UserId => "qnMpjBryAanxAxHsniZVEr", userId => "PiPumxMqMpsiijeB", VpcId => "HRTOxOKbOSPKGhvApVq", vpcId => "ypChbmovKSLuosQgDrMpmqww", VpcPeeringConnectionId => "MvTFUcTftTlu", vpcPeeringConnectionId => "SzVzuwf"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "gScGvLvXVbQR", description => "zFiUw", GroupId => "ovfAzHzzMLDvbSeBUOCTWCBzj", groupId => "YTfQUalZBXzO", GroupName => "oUOVksfeuCl", groupName => "qdBPttuDoVcnBxkyPEON", PeeringStatus => "JgtJfQxGW", peeringStatus => "qblRnqY", UserId => "lbYeCNAJxJMAcQ", userId => "zaysBMNHBHyAhJLTlLajZzp", VpcId => "KSIVXeNbrKpcSAf", vpcId => "jWbnkrPVXeYPFxAEZmnwHUcyqkL", VpcPeeringConnectionId => "INHZLn", vpcPeeringConnectionId => "GqTbjuyAfSih")), ipProtocol => "KUSuGYYdzwmQlnjY", ipRanges => Array[Str].new("ZOVwuJHZqMiTMwhhpcQwGUBAPn", "TioHeKdWbmJIBKfcxqnIPGoy", "VSxpQMZCLCMOUcOeoiOquaBu"), prefixListIds => Array[Str].new("pLcMjBzUdDrNRpzie", "mKKunxlmWenobQUYOUx", "swXOgD", "UkyxZkAGHHmGuesniQMbQsmZjf"), toPort => 11)
Amazon::AWS::EC2::Types::StaleIpPermission.new(fromPort => 8, groups => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "dZRYmsBwKIwLoUHa", description => "rrQunDeBCDDcQgfEGObvWnCV", GroupId => "PsetphEItVVKtId", groupId => "giGxsYvUHIChVZqFePmIZVyLNzYGW", GroupName => "LcyZRwjFCOev", groupName => "kampSRLwQeBt", PeeringStatus => "wDVuCNZrpPkBOIE", peeringStatus => "DqMIKsN", UserId => "RZTOUSFJoBhYfIwcgREFjVFZfDHi", userId => "RJVQKiHXaKOIvsZICeVb", VpcId => "RZyIWFhuxtNGcdVWTMhqe", vpcId => "olNTRxhMCOy", VpcPeeringConnectionId => "xcXFFAQtWgUHyyizpUZXbVVYtlfj", vpcPeeringConnectionId => "zjItEzk"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "kMUqYlyifvjNdxXtkhhV", description => "saCXzELQPSftIpGkUDeCnvUJMGolBu", GroupId => "vSfjgFb", groupId => "UvzQGl", GroupName => "xVPVGf", groupName => "TKzAHtumRNP", PeeringStatus => "dqRpLUWZACmLwnTByW", peeringStatus => "gWBRebOuKCX", UserId => "qnMpjBryAanxAxHsniZVEr", userId => "PiPumxMqMpsiijeB", VpcId => "HRTOxOKbOSPKGhvApVq", vpcId => "ypChbmovKSLuosQgDrMpmqww", VpcPeeringConnectionId => "MvTFUcTftTlu", vpcPeeringConnectionId => "SzVzuwf"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "gScGvLvXVbQR", description => "zFiUw", GroupId => "ovfAzHzzMLDvbSeBUOCTWCBzj", groupId => "YTfQUalZBXzO", GroupName => "oUOVksfeuCl", groupName => "qdBPttuDoVcnBxkyPEON", PeeringStatus => "JgtJfQxGW", peeringStatus => "qblRnqY", UserId => "lbYeCNAJxJMAcQ", userId => "zaysBMNHBHyAhJLTlLajZzp", VpcId => "KSIVXeNbrKpcSAf", vpcId => "jWbnkrPVXeYPFxAEZmnwHUcyqkL", VpcPeeringConnectionId => "INHZLn", vpcPeeringConnectionId => "GqTbjuyAfSih")), ipProtocol => "KUSuGYYdzwmQlnjY", ipRanges => Array[Str].new("ZOVwuJHZqMiTMwhhpcQwGUBAPn", "TioHeKdWbmJIBKfcxqnIPGoy", "VSxpQMZCLCMOUcOeoiOquaBu"), prefixListIds => Array[Str].new("pLcMjBzUdDrNRpzie", "mKKunxlmWenobQUYOUx", "swXOgD", "UkyxZkAGHHmGuesniQMbQsmZjf"), toPort => 11)
# fromPort
# groups
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "dZRYmsBwKIwLoUHa", description => "rrQunDeBCDDcQgfEGObvWnCV", GroupId => "PsetphEItVVKtId", groupId => "giGxsYvUHIChVZqFePmIZVyLNzYGW", GroupName => "LcyZRwjFCOev", groupName => "kampSRLwQeBt", PeeringStatus => "wDVuCNZrpPkBOIE", peeringStatus => "DqMIKsN", UserId => "RZTOUSFJoBhYfIwcgREFjVFZfDHi", userId => "RJVQKiHXaKOIvsZICeVb", VpcId => "RZyIWFhuxtNGcdVWTMhqe", vpcId => "olNTRxhMCOy", VpcPeeringConnectionId => "xcXFFAQtWgUHyyizpUZXbVVYtlfj", vpcPeeringConnectionId => "zjItEzk")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "dZRYmsBwKIwLoUHa", description => "rrQunDeBCDDcQgfEGObvWnCV", GroupId => "PsetphEItVVKtId", groupId => "giGxsYvUHIChVZqFePmIZVyLNzYGW", GroupName => "LcyZRwjFCOev", groupName => "kampSRLwQeBt", PeeringStatus => "wDVuCNZrpPkBOIE", peeringStatus => "DqMIKsN", UserId => "RZTOUSFJoBhYfIwcgREFjVFZfDHi", userId => "RJVQKiHXaKOIvsZICeVb", VpcId => "RZyIWFhuxtNGcdVWTMhqe", vpcId => "olNTRxhMCOy", VpcPeeringConnectionId => "xcXFFAQtWgUHyyizpUZXbVVYtlfj", vpcPeeringConnectionId => "zjItEzk")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "kMUqYlyifvjNdxXtkhhV", description => "saCXzELQPSftIpGkUDeCnvUJMGolBu", GroupId => "vSfjgFb", groupId => "UvzQGl", GroupName => "xVPVGf", groupName => "TKzAHtumRNP", PeeringStatus => "dqRpLUWZACmLwnTByW", peeringStatus => "gWBRebOuKCX", UserId => "qnMpjBryAanxAxHsniZVEr", userId => "PiPumxMqMpsiijeB", VpcId => "HRTOxOKbOSPKGhvApVq", vpcId => "ypChbmovKSLuosQgDrMpmqww", VpcPeeringConnectionId => "MvTFUcTftTlu", vpcPeeringConnectionId => "SzVzuwf")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "kMUqYlyifvjNdxXtkhhV", description => "saCXzELQPSftIpGkUDeCnvUJMGolBu", GroupId => "vSfjgFb", groupId => "UvzQGl", GroupName => "xVPVGf", groupName => "TKzAHtumRNP", PeeringStatus => "dqRpLUWZACmLwnTByW", peeringStatus => "gWBRebOuKCX", UserId => "qnMpjBryAanxAxHsniZVEr", userId => "PiPumxMqMpsiijeB", VpcId => "HRTOxOKbOSPKGhvApVq", vpcId => "ypChbmovKSLuosQgDrMpmqww", VpcPeeringConnectionId => "MvTFUcTftTlu", vpcPeeringConnectionId => "SzVzuwf")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "gScGvLvXVbQR", description => "zFiUw", GroupId => "ovfAzHzzMLDvbSeBUOCTWCBzj", groupId => "YTfQUalZBXzO", GroupName => "oUOVksfeuCl", groupName => "qdBPttuDoVcnBxkyPEON", PeeringStatus => "JgtJfQxGW", peeringStatus => "qblRnqY", UserId => "lbYeCNAJxJMAcQ", userId => "zaysBMNHBHyAhJLTlLajZzp", VpcId => "KSIVXeNbrKpcSAf", vpcId => "jWbnkrPVXeYPFxAEZmnwHUcyqkL", VpcPeeringConnectionId => "INHZLn", vpcPeeringConnectionId => "GqTbjuyAfSih")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "gScGvLvXVbQR", description => "zFiUw", GroupId => "ovfAzHzzMLDvbSeBUOCTWCBzj", groupId => "YTfQUalZBXzO", GroupName => "oUOVksfeuCl", groupName => "qdBPttuDoVcnBxkyPEON", PeeringStatus => "JgtJfQxGW", peeringStatus => "qblRnqY", UserId => "lbYeCNAJxJMAcQ", userId => "zaysBMNHBHyAhJLTlLajZzp", VpcId => "KSIVXeNbrKpcSAf", vpcId => "jWbnkrPVXeYPFxAEZmnwHUcyqkL", VpcPeeringConnectionId => "INHZLn", vpcPeeringConnectionId => "GqTbjuyAfSih")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
# ipProtocol
# ipRanges
ZOVwuJHZqMiTMwhhpcQwGUBAPn
ZOVwuJHZqMiTMwhhpcQwGUBAPn
TioHeKdWbmJIBKfcxqnIPGoy
TioHeKdWbmJIBKfcxqnIPGoy
VSxpQMZCLCMOUcOeoiOquaBu
VSxpQMZCLCMOUcOeoiOquaBu
# prefixListIds
pLcMjBzUdDrNRpzie
pLcMjBzUdDrNRpzie
mKKunxlmWenobQUYOUx
mKKunxlmWenobQUYOUx
swXOgD
swXOgD
UkyxZkAGHHmGuesniQMbQsmZjf
UkyxZkAGHHmGuesniQMbQsmZjf
# toPort
Amazon::AWS::EC2::Types::StaleIpPermission.new(fromPort => 11, groups => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "zYGhwXCBloyBfqZaCKxDkxpiZQac", description => "yheHGYvXPqsQNtiMnxtmHvFw", GroupId => "nQPggZQrDMDASPUfCGnItGrqEoz", groupId => "gVoXzcfHedJFnm", GroupName => "SEeOljTeuhemMNcezxtbrFcVS", groupName => "EqFDMnKsuvSUpMthEj", PeeringStatus => "TeEFsJQPLzMiZFSCJo", peeringStatus => "wECTWGbYXGWpwQcZ", UserId => "fTDhYdUGfZnVjj", userId => "vQSmgkBbCVHfXtGAsmCR", VpcId => "nZJmwAPhBU", vpcId => "jktqzHybBDBqPRCFnEaP", VpcPeeringConnectionId => "ZMzJbTOJmGiovTwXWMLsRgEFG", vpcPeeringConnectionId => "BLtCybsUwfveyGeTmrYsfdA")), ipProtocol => "fehLEEKL", ipRanges => Array[Str].new("uioDEFBOkiluGicC", "ujifxJmzAshFEwtZwwcpRByzwrLubW", "ncXjYGvtOdyxPvXPX"), prefixListIds => Array[Str].new("JyXdoYwzmphNQEdGmQ", "kxXdvneNvXCayiUa"), toPort => 23)
Amazon::AWS::EC2::Types::StaleIpPermission.new(fromPort => 11, groups => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "zYGhwXCBloyBfqZaCKxDkxpiZQac", description => "yheHGYvXPqsQNtiMnxtmHvFw", GroupId => "nQPggZQrDMDASPUfCGnItGrqEoz", groupId => "gVoXzcfHedJFnm", GroupName => "SEeOljTeuhemMNcezxtbrFcVS", groupName => "EqFDMnKsuvSUpMthEj", PeeringStatus => "TeEFsJQPLzMiZFSCJo", peeringStatus => "wECTWGbYXGWpwQcZ", UserId => "fTDhYdUGfZnVjj", userId => "vQSmgkBbCVHfXtGAsmCR", VpcId => "nZJmwAPhBU", vpcId => "jktqzHybBDBqPRCFnEaP", VpcPeeringConnectionId => "ZMzJbTOJmGiovTwXWMLsRgEFG", vpcPeeringConnectionId => "BLtCybsUwfveyGeTmrYsfdA")), ipProtocol => "fehLEEKL", ipRanges => Array[Str].new("uioDEFBOkiluGicC", "ujifxJmzAshFEwtZwwcpRByzwrLubW", "ncXjYGvtOdyxPvXPX"), prefixListIds => Array[Str].new("JyXdoYwzmphNQEdGmQ", "kxXdvneNvXCayiUa"), toPort => 23)
# fromPort
# groups
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "zYGhwXCBloyBfqZaCKxDkxpiZQac", description => "yheHGYvXPqsQNtiMnxtmHvFw", GroupId => "nQPggZQrDMDASPUfCGnItGrqEoz", groupId => "gVoXzcfHedJFnm", GroupName => "SEeOljTeuhemMNcezxtbrFcVS", groupName => "EqFDMnKsuvSUpMthEj", PeeringStatus => "TeEFsJQPLzMiZFSCJo", peeringStatus => "wECTWGbYXGWpwQcZ", UserId => "fTDhYdUGfZnVjj", userId => "vQSmgkBbCVHfXtGAsmCR", VpcId => "nZJmwAPhBU", vpcId => "jktqzHybBDBqPRCFnEaP", VpcPeeringConnectionId => "ZMzJbTOJmGiovTwXWMLsRgEFG", vpcPeeringConnectionId => "BLtCybsUwfveyGeTmrYsfdA")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "zYGhwXCBloyBfqZaCKxDkxpiZQac", description => "yheHGYvXPqsQNtiMnxtmHvFw", GroupId => "nQPggZQrDMDASPUfCGnItGrqEoz", groupId => "gVoXzcfHedJFnm", GroupName => "SEeOljTeuhemMNcezxtbrFcVS", groupName => "EqFDMnKsuvSUpMthEj", PeeringStatus => "TeEFsJQPLzMiZFSCJo", peeringStatus => "wECTWGbYXGWpwQcZ", UserId => "fTDhYdUGfZnVjj", userId => "vQSmgkBbCVHfXtGAsmCR", VpcId => "nZJmwAPhBU", vpcId => "jktqzHybBDBqPRCFnEaP", VpcPeeringConnectionId => "ZMzJbTOJmGiovTwXWMLsRgEFG", vpcPeeringConnectionId => "BLtCybsUwfveyGeTmrYsfdA")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
# ipProtocol
# ipRanges
uioDEFBOkiluGicC
uioDEFBOkiluGicC
ujifxJmzAshFEwtZwwcpRByzwrLubW
ujifxJmzAshFEwtZwwcpRByzwrLubW
ncXjYGvtOdyxPvXPX
ncXjYGvtOdyxPvXPX
# prefixListIds
JyXdoYwzmphNQEdGmQ
JyXdoYwzmphNQEdGmQ
kxXdvneNvXCayiUa
kxXdvneNvXCayiUa
# toPort
# staleIpPermissionsEgress
Amazon::AWS::EC2::Types::StaleIpPermission.new(fromPort => 30, groups => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(), ipProtocol => "KDvsDRrrAtOhCt", ipRanges => Array[Str].new("QUbRRDsGtXn", "eeCnXw"), prefixListIds => Array[Str].new(), toPort => 27)
Amazon::AWS::EC2::Types::StaleIpPermission.new(fromPort => 30, groups => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(), ipProtocol => "KDvsDRrrAtOhCt", ipRanges => Array[Str].new("QUbRRDsGtXn", "eeCnXw"), prefixListIds => Array[Str].new(), toPort => 27)
# fromPort
# groups
# ipProtocol
# ipRanges
QUbRRDsGtXn
QUbRRDsGtXn
eeCnXw
eeCnXw
# prefixListIds
# toPort
Amazon::AWS::EC2::Types::StaleIpPermission.new(fromPort => 8, groups => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "uDEPnkiIZNnFqClmoPDs", description => "GqJdtGQr", GroupId => "OjfvqLW", groupId => "WlqtO", GroupName => "AvBJjhcriVyOwLcDVA", groupName => "gSatjQA", PeeringStatus => "mxUzTcutbkhUWysV", peeringStatus => "QYcEhkOWHZCxGVRYnzeCYHJEgobH", UserId => "tNBushCrtOa", userId => "KLgizHQZUWyDvpyQyvnwAopNjp", VpcId => "nKesnLrgWM", vpcId => "OiQtwK", VpcPeeringConnectionId => "POdOWKlUfUwxgItxmuTaXZDdivZ", vpcPeeringConnectionId => "XNBtDDzgTAqE"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "TDuucprmpfgpQUiCwsZQq", description => "coqdmDpucXbqBpxpiv", GroupId => "VdMLxAUPVMAEqKgRRbzXIS", groupId => "SseJFMBNSSshzXRBbz", GroupName => "KwzaPMaTrIzMwLdMxe", groupName => "NdHzVITngo", PeeringStatus => "TvIANNycKCQ", peeringStatus => "PteyjUSPUXGe", UserId => "TrvgdATElNzdHqEtAzUsQOoDaeXCw", userId => "JdhiEFObQZMxnbdTmjellYXtGhh", VpcId => "bBbPBpEAYHTKVbxklPjkPoQnAhJbo", vpcId => "XKlMlkUr", VpcPeeringConnectionId => "ZrUVhMkYH", vpcPeeringConnectionId => "BlHuHTJyhfH"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "sOwkQzYKIhfPnFSPSCMulAoTMTDA", description => "ZRawJV", GroupId => "zdWhCBAvGFqxeuDxV", groupId => "GCZEWAbxCeoqZawsKEPfdxtderWu", GroupName => "ySGekOQVfHYTenYOhgEDCYtosYYsN", groupName => "eMCKDdUVIgZTjFzNhGKVdnM", PeeringStatus => "CzDotSuptFhtxUKtOUdsK", peeringStatus => "NrVTGijZkcAkCmZLUnMmhuiJxfRK", UserId => "JrrJYkO", userId => "JQeWzsSpCIhsRnEkTNBslEXvh", VpcId => "HkZIirRTpqGtgVcKyTerTUyBVjgd", vpcId => "wmMaelciqbDIKFb", VpcPeeringConnectionId => "WaGzhwuBslw", vpcPeeringConnectionId => "KhffzQkhNobAzCcWRa"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "mOuNVFsbcfWujpvPxZUOoLtz", description => "MQaQiyIISDeAhKAgekPnrQSad", GroupId => "UHKwBTKN", groupId => "UngrmmslG", GroupName => "ddFPrkLWknPcTkqex", groupName => "fXzFlMee", PeeringStatus => "rwHDtzpikQsKMEIX", peeringStatus => "hblWDjkZipAqcCXWyxzuNSqqvpDVHW", UserId => "AMSJntbvIXFOIMXxPDdTDa", userId => "uFSwCvyjaPNze", VpcId => "QWLDLBp", vpcId => "jUXKVJHxFUDiFtC", VpcPeeringConnectionId => "wPhgtlJAdoBJYfXPDeID", vpcPeeringConnectionId => "oAqspAiDkqDh")), ipProtocol => "UDUTAZVWtGkNmWRcJUAMlmJiMeQbaR", ipRanges => Array[Str].new(), prefixListIds => Array[Str].new("zfSJyotZvrmkdIArrnQBwrTzjjGSIO", "fwwzj"), toPort => 14)
Amazon::AWS::EC2::Types::StaleIpPermission.new(fromPort => 8, groups => Array[Amazon::AWS::EC2::Types::UserIdGroupPair].new(Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "uDEPnkiIZNnFqClmoPDs", description => "GqJdtGQr", GroupId => "OjfvqLW", groupId => "WlqtO", GroupName => "AvBJjhcriVyOwLcDVA", groupName => "gSatjQA", PeeringStatus => "mxUzTcutbkhUWysV", peeringStatus => "QYcEhkOWHZCxGVRYnzeCYHJEgobH", UserId => "tNBushCrtOa", userId => "KLgizHQZUWyDvpyQyvnwAopNjp", VpcId => "nKesnLrgWM", vpcId => "OiQtwK", VpcPeeringConnectionId => "POdOWKlUfUwxgItxmuTaXZDdivZ", vpcPeeringConnectionId => "XNBtDDzgTAqE"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "TDuucprmpfgpQUiCwsZQq", description => "coqdmDpucXbqBpxpiv", GroupId => "VdMLxAUPVMAEqKgRRbzXIS", groupId => "SseJFMBNSSshzXRBbz", GroupName => "KwzaPMaTrIzMwLdMxe", groupName => "NdHzVITngo", PeeringStatus => "TvIANNycKCQ", peeringStatus => "PteyjUSPUXGe", UserId => "TrvgdATElNzdHqEtAzUsQOoDaeXCw", userId => "JdhiEFObQZMxnbdTmjellYXtGhh", VpcId => "bBbPBpEAYHTKVbxklPjkPoQnAhJbo", vpcId => "XKlMlkUr", VpcPeeringConnectionId => "ZrUVhMkYH", vpcPeeringConnectionId => "BlHuHTJyhfH"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "sOwkQzYKIhfPnFSPSCMulAoTMTDA", description => "ZRawJV", GroupId => "zdWhCBAvGFqxeuDxV", groupId => "GCZEWAbxCeoqZawsKEPfdxtderWu", GroupName => "ySGekOQVfHYTenYOhgEDCYtosYYsN", groupName => "eMCKDdUVIgZTjFzNhGKVdnM", PeeringStatus => "CzDotSuptFhtxUKtOUdsK", peeringStatus => "NrVTGijZkcAkCmZLUnMmhuiJxfRK", UserId => "JrrJYkO", userId => "JQeWzsSpCIhsRnEkTNBslEXvh", VpcId => "HkZIirRTpqGtgVcKyTerTUyBVjgd", vpcId => "wmMaelciqbDIKFb", VpcPeeringConnectionId => "WaGzhwuBslw", vpcPeeringConnectionId => "KhffzQkhNobAzCcWRa"), Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "mOuNVFsbcfWujpvPxZUOoLtz", description => "MQaQiyIISDeAhKAgekPnrQSad", GroupId => "UHKwBTKN", groupId => "UngrmmslG", GroupName => "ddFPrkLWknPcTkqex", groupName => "fXzFlMee", PeeringStatus => "rwHDtzpikQsKMEIX", peeringStatus => "hblWDjkZipAqcCXWyxzuNSqqvpDVHW", UserId => "AMSJntbvIXFOIMXxPDdTDa", userId => "uFSwCvyjaPNze", VpcId => "QWLDLBp", vpcId => "jUXKVJHxFUDiFtC", VpcPeeringConnectionId => "wPhgtlJAdoBJYfXPDeID", vpcPeeringConnectionId => "oAqspAiDkqDh")), ipProtocol => "UDUTAZVWtGkNmWRcJUAMlmJiMeQbaR", ipRanges => Array[Str].new(), prefixListIds => Array[Str].new("zfSJyotZvrmkdIArrnQBwrTzjjGSIO", "fwwzj"), toPort => 14)
# fromPort
# groups
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "uDEPnkiIZNnFqClmoPDs", description => "GqJdtGQr", GroupId => "OjfvqLW", groupId => "WlqtO", GroupName => "AvBJjhcriVyOwLcDVA", groupName => "gSatjQA", PeeringStatus => "mxUzTcutbkhUWysV", peeringStatus => "QYcEhkOWHZCxGVRYnzeCYHJEgobH", UserId => "tNBushCrtOa", userId => "KLgizHQZUWyDvpyQyvnwAopNjp", VpcId => "nKesnLrgWM", vpcId => "OiQtwK", VpcPeeringConnectionId => "POdOWKlUfUwxgItxmuTaXZDdivZ", vpcPeeringConnectionId => "XNBtDDzgTAqE")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "uDEPnkiIZNnFqClmoPDs", description => "GqJdtGQr", GroupId => "OjfvqLW", groupId => "WlqtO", GroupName => "AvBJjhcriVyOwLcDVA", groupName => "gSatjQA", PeeringStatus => "mxUzTcutbkhUWysV", peeringStatus => "QYcEhkOWHZCxGVRYnzeCYHJEgobH", UserId => "tNBushCrtOa", userId => "KLgizHQZUWyDvpyQyvnwAopNjp", VpcId => "nKesnLrgWM", vpcId => "OiQtwK", VpcPeeringConnectionId => "POdOWKlUfUwxgItxmuTaXZDdivZ", vpcPeeringConnectionId => "XNBtDDzgTAqE")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "TDuucprmpfgpQUiCwsZQq", description => "coqdmDpucXbqBpxpiv", GroupId => "VdMLxAUPVMAEqKgRRbzXIS", groupId => "SseJFMBNSSshzXRBbz", GroupName => "KwzaPMaTrIzMwLdMxe", groupName => "NdHzVITngo", PeeringStatus => "TvIANNycKCQ", peeringStatus => "PteyjUSPUXGe", UserId => "TrvgdATElNzdHqEtAzUsQOoDaeXCw", userId => "JdhiEFObQZMxnbdTmjellYXtGhh", VpcId => "bBbPBpEAYHTKVbxklPjkPoQnAhJbo", vpcId => "XKlMlkUr", VpcPeeringConnectionId => "ZrUVhMkYH", vpcPeeringConnectionId => "BlHuHTJyhfH")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "TDuucprmpfgpQUiCwsZQq", description => "coqdmDpucXbqBpxpiv", GroupId => "VdMLxAUPVMAEqKgRRbzXIS", groupId => "SseJFMBNSSshzXRBbz", GroupName => "KwzaPMaTrIzMwLdMxe", groupName => "NdHzVITngo", PeeringStatus => "TvIANNycKCQ", peeringStatus => "PteyjUSPUXGe", UserId => "TrvgdATElNzdHqEtAzUsQOoDaeXCw", userId => "JdhiEFObQZMxnbdTmjellYXtGhh", VpcId => "bBbPBpEAYHTKVbxklPjkPoQnAhJbo", vpcId => "XKlMlkUr", VpcPeeringConnectionId => "ZrUVhMkYH", vpcPeeringConnectionId => "BlHuHTJyhfH")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "sOwkQzYKIhfPnFSPSCMulAoTMTDA", description => "ZRawJV", GroupId => "zdWhCBAvGFqxeuDxV", groupId => "GCZEWAbxCeoqZawsKEPfdxtderWu", GroupName => "ySGekOQVfHYTenYOhgEDCYtosYYsN", groupName => "eMCKDdUVIgZTjFzNhGKVdnM", PeeringStatus => "CzDotSuptFhtxUKtOUdsK", peeringStatus => "NrVTGijZkcAkCmZLUnMmhuiJxfRK", UserId => "JrrJYkO", userId => "JQeWzsSpCIhsRnEkTNBslEXvh", VpcId => "HkZIirRTpqGtgVcKyTerTUyBVjgd", vpcId => "wmMaelciqbDIKFb", VpcPeeringConnectionId => "WaGzhwuBslw", vpcPeeringConnectionId => "KhffzQkhNobAzCcWRa")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "sOwkQzYKIhfPnFSPSCMulAoTMTDA", description => "ZRawJV", GroupId => "zdWhCBAvGFqxeuDxV", groupId => "GCZEWAbxCeoqZawsKEPfdxtderWu", GroupName => "ySGekOQVfHYTenYOhgEDCYtosYYsN", groupName => "eMCKDdUVIgZTjFzNhGKVdnM", PeeringStatus => "CzDotSuptFhtxUKtOUdsK", peeringStatus => "NrVTGijZkcAkCmZLUnMmhuiJxfRK", UserId => "JrrJYkO", userId => "JQeWzsSpCIhsRnEkTNBslEXvh", VpcId => "HkZIirRTpqGtgVcKyTerTUyBVjgd", vpcId => "wmMaelciqbDIKFb", VpcPeeringConnectionId => "WaGzhwuBslw", vpcPeeringConnectionId => "KhffzQkhNobAzCcWRa")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "mOuNVFsbcfWujpvPxZUOoLtz", description => "MQaQiyIISDeAhKAgekPnrQSad", GroupId => "UHKwBTKN", groupId => "UngrmmslG", GroupName => "ddFPrkLWknPcTkqex", groupName => "fXzFlMee", PeeringStatus => "rwHDtzpikQsKMEIX", peeringStatus => "hblWDjkZipAqcCXWyxzuNSqqvpDVHW", UserId => "AMSJntbvIXFOIMXxPDdTDa", userId => "uFSwCvyjaPNze", VpcId => "QWLDLBp", vpcId => "jUXKVJHxFUDiFtC", VpcPeeringConnectionId => "wPhgtlJAdoBJYfXPDeID", vpcPeeringConnectionId => "oAqspAiDkqDh")
Amazon::AWS::EC2::Types::UserIdGroupPair.new(Description => "mOuNVFsbcfWujpvPxZUOoLtz", description => "MQaQiyIISDeAhKAgekPnrQSad", GroupId => "UHKwBTKN", groupId => "UngrmmslG", GroupName => "ddFPrkLWknPcTkqex", groupName => "fXzFlMee", PeeringStatus => "rwHDtzpikQsKMEIX", peeringStatus => "hblWDjkZipAqcCXWyxzuNSqqvpDVHW", UserId => "AMSJntbvIXFOIMXxPDdTDa", userId => "uFSwCvyjaPNze", VpcId => "QWLDLBp", vpcId => "jUXKVJHxFUDiFtC", VpcPeeringConnectionId => "wPhgtlJAdoBJYfXPDeID", vpcPeeringConnectionId => "oAqspAiDkqDh")
# Description
# description
# GroupId
# groupId
# GroupName
# groupName
# PeeringStatus
# peeringStatus
# UserId
# userId
# VpcId
# vpcId
# VpcPeeringConnectionId
# vpcPeeringConnectionId
# ipProtocol
# ipRanges
# prefixListIds
zfSJyotZvrmkdIArrnQBwrTzjjGSIO
zfSJyotZvrmkdIArrnQBwrTzjjGSIO
fwwzj
fwwzj
# toPort
# vpcId
ok 2345 - Amazon::AWS::EC2::Types::StaleSecurityGroup compares ok
# CHANGE!
# vicselect
# description, groupId, groupName, staleIpPermissions, staleIpPermissionsEgress, vpcId
# description -- Str
# Setting description to syzygy!IJVIGdkMVr
ok 2346 - Changed Amazon::AWS::EC2::Types::StaleSecurityGroup fails eqv
ok 2347 - Amazon::AWS::EC2::Types::Subnet loads. Is not a Failure object
ok 2348 - Amazon::AWS::EC2::Types::Subnet exists
ok 2349 - Amazon::AWS::EC2::Types::Subnet can be populated
ok 2350 - Amazon::AWS::EC2::Types::Subnet serializes ok
ok 2351 - Amazon::AWS::EC2::Types::Subnet deseralizes ok
# assignIpv6AddressOnCreation
# availabilityZone
# availabilityZoneId
# availableIpAddressCount
# cidrBlock
# defaultForAz
# ipv6CidrBlockAssociations
# mapPublicIpOnLaunch
# ownerId
# state
# subnetArn
# subnetId
# tags
# vpcId
ok 2352 - Amazon::AWS::EC2::Types::Subnet compares ok
# CHANGE!
# vicselect
# assignIpv6AddressOnCreation, availabilityZone, availabilityZoneId, availableIpAddressCount, cidrBlock, defaultForAz, ipv6CidrBlockAssociations, mapPublicIpOnLaunch, ownerId, state, subnetArn, subnetId, tags, vpcId
# subnetArn -- Str
# Setting subnetArn to syzygy!pKvmfVnvnrmcuqdsNgfjfoghUm
ok 2353 - Changed Amazon::AWS::EC2::Types::Subnet fails eqv
ok 2354 - Amazon::AWS::EC2::Types::TargetNetwork loads. Is not a Failure object
ok 2355 - Amazon::AWS::EC2::Types::TargetNetwork exists
ok 2356 - Amazon::AWS::EC2::Types::TargetNetwork can be populated
ok 2357 - Amazon::AWS::EC2::Types::TargetNetwork serializes ok
ok 2358 - Amazon::AWS::EC2::Types::TargetNetwork deseralizes ok
# associationId
# clientVpnEndpointId
# securityGroups
# status
# code
not ok 2359 - Amazon::AWS::EC2::Types::TargetNetwork compares ok
# Failed test 'Amazon::AWS::EC2::Types::TargetNetwork compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# associationId, clientVpnEndpointId, securityGroups, status, targetNetworkId, vpcId
# vpcId -- Str
# Setting vpcId to syzygy!rFePPchboo
ok 2360 - Changed Amazon::AWS::EC2::Types::TargetNetwork fails eqv
ok 2361 - Amazon::AWS::EC2::Types::TransitGateway loads. Is not a Failure object
ok 2362 - Amazon::AWS::EC2::Types::TransitGateway exists
ok 2363 - Amazon::AWS::EC2::Types::TransitGateway can be populated
ok 2364 - Amazon::AWS::EC2::Types::TransitGateway serializes ok
ok 2365 - Amazon::AWS::EC2::Types::TransitGateway deseralizes ok
# creationTime
# description
# options
# amazonSideAsn
not ok 2366 - Amazon::AWS::EC2::Types::TransitGateway compares ok
# Failed test 'Amazon::AWS::EC2::Types::TransitGateway compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# creationTime, description, options, ownerId, state, tags, transitGatewayArn, transitGatewayId
# transitGatewayId -- Str
# Setting transitGatewayId to syzygy!wBAKVhqwJY
ok 2367 - Changed Amazon::AWS::EC2::Types::TransitGateway fails eqv
ok 2368 - Amazon::AWS::EC2::Types::TransitGatewayAttachment loads. Is not a Failure object
ok 2369 - Amazon::AWS::EC2::Types::TransitGatewayAttachment exists
ok 2370 - Amazon::AWS::EC2::Types::TransitGatewayAttachment can be populated
ok 2371 - Amazon::AWS::EC2::Types::TransitGatewayAttachment serializes ok
ok 2372 - Amazon::AWS::EC2::Types::TransitGatewayAttachment deseralizes ok
# association
# state
not ok 2373 - Amazon::AWS::EC2::Types::TransitGatewayAttachment compares ok
# Failed test 'Amazon::AWS::EC2::Types::TransitGatewayAttachment compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# association, creationTime, resourceId, resourceOwnerId, resourceType, state, tags, transitGatewayAttachmentId, transitGatewayId, transitGatewayOwnerId
# creationTime -- Str
# Setting creationTime to syzygy!rkhUQY
ok 2374 - Changed Amazon::AWS::EC2::Types::TransitGatewayAttachment fails eqv
ok 2375 - Amazon::AWS::EC2::Types::TransitGatewayRoute loads. Is not a Failure object
ok 2376 - Amazon::AWS::EC2::Types::TransitGatewayRoute exists
ok 2377 - Amazon::AWS::EC2::Types::TransitGatewayRoute can be populated
ok 2378 - Amazon::AWS::EC2::Types::TransitGatewayRoute serializes ok
ok 2379 - Amazon::AWS::EC2::Types::TransitGatewayRoute deseralizes ok
# destinationCidrBlock
# state
# transitGatewayAttachments
Amazon::AWS::EC2::Types::TransitGatewayRouteAttachment.new(resourceId => "FsJgzDhJhcwxYtjeZt", resourceType => "vpn", transitGatewayAttachmentId => "KUGyOEh")
Amazon::AWS::EC2::Types::TransitGatewayRouteAttachment.new(resourceId => "FsJgzDhJhcwxYtjeZt", resourceType => "vpn", transitGatewayAttachmentId => "KUGyOEh")
# resourceId
# resourceType
# transitGatewayAttachmentId
# type
ok 2380 - Amazon::AWS::EC2::Types::TransitGatewayRoute compares ok
# CHANGE!
# vicselect
# destinationCidrBlock, state, transitGatewayAttachments, type
# state -- Str
# Setting state to syzygy!deleted
ok 2381 - Changed Amazon::AWS::EC2::Types::TransitGatewayRoute fails eqv
ok 2382 - Amazon::AWS::EC2::Types::TransitGatewayVpcAttachment loads. Is not a Failure object
ok 2383 - Amazon::AWS::EC2::Types::TransitGatewayVpcAttachment exists
ok 2384 - Amazon::AWS::EC2::Types::TransitGatewayVpcAttachment can be populated
ok 2385 - Amazon::AWS::EC2::Types::TransitGatewayVpcAttachment serializes ok
ok 2386 - Amazon::AWS::EC2::Types::TransitGatewayVpcAttachment deseralizes ok
# creationTime
# options
# dnsSupport
not ok 2387 - Amazon::AWS::EC2::Types::TransitGatewayVpcAttachment compares ok
# Failed test 'Amazon::AWS::EC2::Types::TransitGatewayVpcAttachment compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# creationTime, options, state, subnetIds, tags, transitGatewayAttachmentId, transitGatewayId, vpcId, vpcOwnerId
# options -- Str
# Setting options to Amazon::AWS::EC2::Types::TransitGatewayVpcAttachmentOptions.new(dnsSupport => Str, ipv6Support => Str)
ok 2388 - Changed Amazon::AWS::EC2::Types::TransitGatewayVpcAttachment fails eqv
ok 2389 - Amazon::AWS::EC2::Types::UnsuccessfulInstanceCreditSpecificationItem loads. Is not a Failure object
ok 2390 - Amazon::AWS::EC2::Types::UnsuccessfulInstanceCreditSpecificationItem exists
ok 2391 - Amazon::AWS::EC2::Types::UnsuccessfulInstanceCreditSpecificationItem can be populated
ok 2392 - Amazon::AWS::EC2::Types::UnsuccessfulInstanceCreditSpecificationItem serializes ok
ok 2393 - Amazon::AWS::EC2::Types::UnsuccessfulInstanceCreditSpecificationItem deseralizes ok
# error
# code
not ok 2394 - Amazon::AWS::EC2::Types::UnsuccessfulInstanceCreditSpecificationItem compares ok
# Failed test 'Amazon::AWS::EC2::Types::UnsuccessfulInstanceCreditSpecificationItem compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# error, instanceId
# error -- Str
# Setting error to Amazon::AWS::EC2::Types::UnsuccessfulInstanceCreditSpecificationItemError.new(code => Str, message => Str)
ok 2395 - Changed Amazon::AWS::EC2::Types::UnsuccessfulInstanceCreditSpecificationItem fails eqv
ok 2396 - Amazon::AWS::EC2::Types::UnsuccessfulItem loads. Is not a Failure object
ok 2397 - Amazon::AWS::EC2::Types::UnsuccessfulItem exists
ok 2398 - Amazon::AWS::EC2::Types::UnsuccessfulItem can be populated
ok 2399 - Amazon::AWS::EC2::Types::UnsuccessfulItem serializes ok
ok 2400 - Amazon::AWS::EC2::Types::UnsuccessfulItem deseralizes ok
# error
# code
not ok 2401 - Amazon::AWS::EC2::Types::UnsuccessfulItem compares ok
# Failed test 'Amazon::AWS::EC2::Types::UnsuccessfulItem compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# error, resourceId
# resourceId -- Str
# Setting resourceId to syzygy!IkefYHxFaxmTyvMiRazRisv
ok 2402 - Changed Amazon::AWS::EC2::Types::UnsuccessfulItem fails eqv
ok 2403 - Amazon::AWS::EC2::Types::Volume loads. Is not a Failure object
ok 2404 - Amazon::AWS::EC2::Types::Volume exists
ok 2405 - Amazon::AWS::EC2::Types::Volume can be populated
ok 2406 - Amazon::AWS::EC2::Types::Volume serializes ok
ok 2407 - Amazon::AWS::EC2::Types::Volume deseralizes ok
# attachments
# availabilityZone
# createTime
# encrypted
# iops
# kmsKeyId
# size
# snapshotId
# status
# tags
# volumeId
# volumeType
ok 2408 - Amazon::AWS::EC2::Types::Volume compares ok
# CHANGE!
# vicselect
# attachments, availabilityZone, createTime, encrypted, iops, kmsKeyId, size, snapshotId, status, tags, volumeId, volumeType
# snapshotId -- Str
# Setting snapshotId to syzygy!RMbfCE
ok 2409 - Changed Amazon::AWS::EC2::Types::Volume fails eqv
ok 2410 - Amazon::AWS::EC2::Types::VpcCidrBlockAssociation loads. Is not a Failure object
ok 2411 - Amazon::AWS::EC2::Types::VpcCidrBlockAssociation exists
ok 2412 - Amazon::AWS::EC2::Types::VpcCidrBlockAssociation can be populated
ok 2413 - Amazon::AWS::EC2::Types::VpcCidrBlockAssociation serializes ok
ok 2414 - Amazon::AWS::EC2::Types::VpcCidrBlockAssociation deseralizes ok
# associationId
# cidrBlock
# cidrBlockState
# state
not ok 2415 - Amazon::AWS::EC2::Types::VpcCidrBlockAssociation compares ok
# Failed test 'Amazon::AWS::EC2::Types::VpcCidrBlockAssociation compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# associationId, cidrBlock, cidrBlockState
# associationId -- Str
# Setting associationId to syzygy!YRgJytjBxKqQOnXKvAUiuz
ok 2416 - Changed Amazon::AWS::EC2::Types::VpcCidrBlockAssociation fails eqv
ok 2417 - Amazon::AWS::EC2::Types::VpcPeeringConnection loads. Is not a Failure object
ok 2418 - Amazon::AWS::EC2::Types::VpcPeeringConnection exists
ok 2419 - Amazon::AWS::EC2::Types::VpcPeeringConnection can be populated
ok 2420 - Amazon::AWS::EC2::Types::VpcPeeringConnection serializes ok
ok 2421 - Amazon::AWS::EC2::Types::VpcPeeringConnection deseralizes ok
# accepterVpcInfo
# cidrBlock
not ok 2422 - Amazon::AWS::EC2::Types::VpcPeeringConnection compares ok
# Failed test 'Amazon::AWS::EC2::Types::VpcPeeringConnection compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# accepterVpcInfo, expirationTime, requesterVpcInfo, status, tags, vpcPeeringConnectionId
# requesterVpcInfo -- Str
# Setting requesterVpcInfo to Amazon::AWS::EC2::Types::VpcPeeringConnectionVpcInfo.new(cidrBlock => Str, cidrBlocks => Array[Amazon::AWS::EC2::Types::CidrBlock].new(), ipv6CidrBlocks => Array[Amazon::AWS::EC2::Types::Ipv6CidrBlock].new(), ownerId => Str, peeringOptions => Amazon::AWS::EC2::Types::VpcPeeringConnectionOptionsDescription, region => Str, vpcId => Str)
ok 2423 - Changed Amazon::AWS::EC2::Types::VpcPeeringConnection fails eqv
ok 2424 - Amazon::AWS::EC2::Types::VpnConnection loads. Is not a Failure object
ok 2425 - Amazon::AWS::EC2::Types::VpnConnection exists
ok 2426 - Amazon::AWS::EC2::Types::VpnConnection can be populated
ok 2427 - Amazon::AWS::EC2::Types::VpnConnection serializes ok
ok 2428 - Amazon::AWS::EC2::Types::VpnConnection deseralizes ok
# category
# customerGatewayConfiguration
# customerGatewayId
# options
# staticRoutesOnly
# routes
Amazon::AWS::EC2::Types::VpnStaticRoute.new(destinationCidrBlock => "fhpVsMrpBPaToHrOlGwCqgLEa", source => "Static", state => "available")
Amazon::AWS::EC2::Types::VpnStaticRoute.new(destinationCidrBlock => "fhpVsMrpBPaToHrOlGwCqgLEa", source => "Static", state => "available")
# destinationCidrBlock
# source
# state
# state
# tags
Amazon::AWS::EC2::Types::Tag.new(Key => "bdErEODSAFNRdHQTUD", key => "blEOpQqvYi", Value => "BDfNIvCtXxEJcUJEDW", value => "bUryvMPJtdbmAyPnpXfOm")
Amazon::AWS::EC2::Types::Tag.new(Key => "bdErEODSAFNRdHQTUD", key => "blEOpQqvYi", Value => "BDfNIvCtXxEJcUJEDW", value => "bUryvMPJtdbmAyPnpXfOm")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "mCXmcWBvoMOQuXZMMhyeRHIuHnr", key => "xdiiFGcpYFaroQH", Value => "ItEgURlLobsr", value => "nmICKBNtvhOcy")
Amazon::AWS::EC2::Types::Tag.new(Key => "mCXmcWBvoMOQuXZMMhyeRHIuHnr", key => "xdiiFGcpYFaroQH", Value => "ItEgURlLobsr", value => "nmICKBNtvhOcy")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "wLykmBVOPGOSEHrQ", key => "BaJjfdPOJTvuzIzKbqB", Value => "LyJfowSxLUKAeZDJfRLnqzKYs", value => "wyfOPFPplcRfWffNpzYRKdT")
Amazon::AWS::EC2::Types::Tag.new(Key => "wLykmBVOPGOSEHrQ", key => "BaJjfdPOJTvuzIzKbqB", Value => "LyJfowSxLUKAeZDJfRLnqzKYs", value => "wyfOPFPplcRfWffNpzYRKdT")
# Key
# key
# Value
# value
Amazon::AWS::EC2::Types::Tag.new(Key => "lehzuFEZCCKmYJF", key => "pKZIDjQtrArvHQQyYwcIDs", Value => "KjAfdKYE", value => "rqjcsGJsHMQBVhpUWgUHjw")
Amazon::AWS::EC2::Types::Tag.new(Key => "lehzuFEZCCKmYJF", key => "pKZIDjQtrArvHQQyYwcIDs", Value => "KjAfdKYE", value => "rqjcsGJsHMQBVhpUWgUHjw")
# Key
# key
# Value
# value
# transitGatewayId
# type
# vgwTelemetry
Amazon::AWS::EC2::Types::VgwTelemetry.new(acceptedRouteCount => 29, lastStatusChange => "IOtjVxCEpKH", outsideIpAddress => "rcxrXzJ", status => "DOWN", statusMessage => "aLaaiNZmQzFlZwJvwNtERkvRxECS")
Amazon::AWS::EC2::Types::VgwTelemetry.new(acceptedRouteCount => 29, lastStatusChange => "IOtjVxCEpKH", outsideIpAddress => "rcxrXzJ", status => "DOWN", statusMessage => "aLaaiNZmQzFlZwJvwNtERkvRxECS")
# acceptedRouteCount
# lastStatusChange
# outsideIpAddress
# status
# statusMessage
Amazon::AWS::EC2::Types::VgwTelemetry.new(acceptedRouteCount => 24, lastStatusChange => "LdpvqCAnKAjkdGiPRifAJnk", outsideIpAddress => "ZRPKdPXDWRfAElu", status => "DOWN", statusMessage => "jqYQnwIqvx")
Amazon::AWS::EC2::Types::VgwTelemetry.new(acceptedRouteCount => 24, lastStatusChange => "LdpvqCAnKAjkdGiPRifAJnk", outsideIpAddress => "ZRPKdPXDWRfAElu", status => "DOWN", statusMessage => "jqYQnwIqvx")
# acceptedRouteCount
# lastStatusChange
# outsideIpAddress
# status
# statusMessage
Amazon::AWS::EC2::Types::VgwTelemetry.new(acceptedRouteCount => 6, lastStatusChange => "FyfOXQnkBhPbBqlibLhMtuJjuZUa", outsideIpAddress => "ZlqDQteccmxUKnLOCpjsI", status => "DOWN", statusMessage => "nmsFuxmd")
Amazon::AWS::EC2::Types::VgwTelemetry.new(acceptedRouteCount => 6, lastStatusChange => "FyfOXQnkBhPbBqlibLhMtuJjuZUa", outsideIpAddress => "ZlqDQteccmxUKnLOCpjsI", status => "DOWN", statusMessage => "nmsFuxmd")
# acceptedRouteCount
# lastStatusChange
# outsideIpAddress
# status
# statusMessage
# vpnConnectionId
# vpnGatewayId
ok 2429 - Amazon::AWS::EC2::Types::VpnConnection compares ok
# CHANGE!
# vicselect
# category, customerGatewayConfiguration, customerGatewayId, options, routes, state, tags, transitGatewayId, type, vgwTelemetry, vpnConnectionId, vpnGatewayId
# state -- Str
# Setting state to syzygy!available
ok 2430 - Changed Amazon::AWS::EC2::Types::VpnConnection fails eqv
ok 2431 - Amazon::AWS::EC2::Types::VpnConnectionOptionsSpecification loads. Is not a Failure object
ok 2432 - Amazon::AWS::EC2::Types::VpnConnectionOptionsSpecification exists
ok 2433 - Amazon::AWS::EC2::Types::VpnConnectionOptionsSpecification can be populated
ok 2434 - Amazon::AWS::EC2::Types::VpnConnectionOptionsSpecification serializes ok
ok 2435 - Amazon::AWS::EC2::Types::VpnConnectionOptionsSpecification deseralizes ok
# StaticRoutesOnly
# TunnelOptions
Amazon::AWS::EC2::Types::VpnTunnelOptionsSpecification.new(PreSharedKey => "tuKpZYv", TunnelInsideCidr => "IHsRfQpllKIqodwzArcddswGxAU")
Amazon::AWS::EC2::Types::VpnTunnelOptionsSpecification.new(PreSharedKey => "tuKpZYv", TunnelInsideCidr => "IHsRfQpllKIqodwzArcddswGxAU")
# PreSharedKey
# TunnelInsideCidr
Amazon::AWS::EC2::Types::VpnTunnelOptionsSpecification.new(PreSharedKey => "AvCXSRCXaGwLYCHRQquvydpjGgWbx", TunnelInsideCidr => "XvhxgwhqLsRWOQ")
Amazon::AWS::EC2::Types::VpnTunnelOptionsSpecification.new(PreSharedKey => "AvCXSRCXaGwLYCHRQquvydpjGgWbx", TunnelInsideCidr => "XvhxgwhqLsRWOQ")
# PreSharedKey
# TunnelInsideCidr
ok 2436 - Amazon::AWS::EC2::Types::VpnConnectionOptionsSpecification compares ok
# CHANGE!
# vicselect
# StaticRoutesOnly, TunnelOptions
# TunnelOptions -- Str
# Setting TunnelOptions to []
# Type check failed in assignment to @!TunnelOptions; expected Amazon::AWS::EC2::Types::VpnTunnelOptionsSpecification but got Array[Amazon::AWS::EC2::Types::VpnTunnelOptionsSpecification] (Array[Amazon::AWS::EC2::Types::VpnTunnelOptionsSpecification].new())
ok 2437 - Amazon::AWS::EC2::Types::AccountAttribute loads. Is not a Failure object
ok 2438 - Amazon::AWS::EC2::Types::AccountAttribute exists
ok 2439 - Amazon::AWS::EC2::Types::AccountAttribute can be populated
ok 2440 - Amazon::AWS::EC2::Types::AccountAttribute serializes ok
ok 2441 - Amazon::AWS::EC2::Types::AccountAttribute deseralizes ok
# attributeName
# attributes
Amazon::AWS::EC2::Types::AccountAttributeValue.new(attributeValue => "iGztxJqLiEE")
Amazon::AWS::EC2::Types::AccountAttributeValue.new(attributeValue => "iGztxJqLiEE")
# attributeValue
Amazon::AWS::EC2::Types::AccountAttributeValue.new(attributeValue => "CkjJNNokuZhRdawCnpC")
Amazon::AWS::EC2::Types::AccountAttributeValue.new(attributeValue => "CkjJNNokuZhRdawCnpC")
# attributeValue
Amazon::AWS::EC2::Types::AccountAttributeValue.new(attributeValue => "iDPtmXNxfEuuAxMtsvjVKqry")
Amazon::AWS::EC2::Types::AccountAttributeValue.new(attributeValue => "iDPtmXNxfEuuAxMtsvjVKqry")
# attributeValue
Amazon::AWS::EC2::Types::AccountAttributeValue.new(attributeValue => "RRbUetjUWiYBwOUPgsrcgOLkYIfESK")
Amazon::AWS::EC2::Types::AccountAttributeValue.new(attributeValue => "RRbUetjUWiYBwOUPgsrcgOLkYIfESK")
# attributeValue
ok 2442 - Amazon::AWS::EC2::Types::AccountAttribute compares ok
# CHANGE!
# vicselect
# attributeName, attributes
# attributeName -- Str
# Setting attributeName to syzygy!RYAxrhdXMxyHUNOY
ok 2443 - Changed Amazon::AWS::EC2::Types::AccountAttribute fails eqv
ok 2444 - Amazon::AWS::EC2::Types::AvailabilityZone loads. Is not a Failure object
ok 2445 - Amazon::AWS::EC2::Types::AvailabilityZone exists
ok 2446 - Amazon::AWS::EC2::Types::AvailabilityZone can be populated
ok 2447 - Amazon::AWS::EC2::Types::AvailabilityZone serializes ok
ok 2448 - Amazon::AWS::EC2::Types::AvailabilityZone deseralizes ok
# messages
Amazon::AWS::EC2::Types::AvailabilityZoneMessage.new(message => "EmKwQG")
Amazon::AWS::EC2::Types::AvailabilityZoneMessage.new(message => "EmKwQG")
# message
Amazon::AWS::EC2::Types::AvailabilityZoneMessage.new(message => "XSvSuWXdsZlWpBYcabnrjhquHNJamE")
Amazon::AWS::EC2::Types::AvailabilityZoneMessage.new(message => "XSvSuWXdsZlWpBYcabnrjhquHNJamE")
# message
# regionName
# zoneId
# zoneName
# zoneState
ok 2449 - Amazon::AWS::EC2::Types::AvailabilityZone compares ok
# CHANGE!
# vicselect
# messages, regionName, zoneId, zoneName, zoneState
# regionName -- Str
# Setting regionName to syzygy!XHKrnmtvFlYnjwbqKekS
ok 2450 - Changed Amazon::AWS::EC2::Types::AvailabilityZone fails eqv
ok 2451 - Amazon::AWS::EC2::Types::ConversionTask loads. Is not a Failure object
ok 2452 - Amazon::AWS::EC2::Types::ConversionTask exists
ok 2453 - Amazon::AWS::EC2::Types::ConversionTask can be populated
ok 2454 - Amazon::AWS::EC2::Types::ConversionTask serializes ok
ok 2455 - Amazon::AWS::EC2::Types::ConversionTask deseralizes ok
# conversionTaskId
# expirationTime
# importInstance
# description
not ok 2456 - Amazon::AWS::EC2::Types::ConversionTask compares ok
# Failed test 'Amazon::AWS::EC2::Types::ConversionTask compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# conversionTaskId, expirationTime, importInstance, importVolume, state, statusMessage, tags
# importInstance -- Str
# Setting importInstance to Amazon::AWS::EC2::Types::ImportInstanceTaskDetails.new(description => Str, instanceId => Str, platform => Str, volumes => Array[Amazon::AWS::EC2::Types::ImportInstanceVolumeDetailItem].new())
ok 2457 - Changed Amazon::AWS::EC2::Types::ConversionTask fails eqv
ok 2458 - Amazon::AWS::EC2::Types::CreateFleetError loads. Is not a Failure object
ok 2459 - Amazon::AWS::EC2::Types::CreateFleetError exists
ok 2460 - Amazon::AWS::EC2::Types::CreateFleetError can be populated
ok 2461 - Amazon::AWS::EC2::Types::CreateFleetError serializes ok
ok 2462 - Amazon::AWS::EC2::Types::CreateFleetError deseralizes ok
# errorCode
# errorMessage
# launchTemplateAndOverrides
# launchTemplateSpecification
# LaunchTemplateId
not ok 2463 - Amazon::AWS::EC2::Types::CreateFleetError compares ok
# Failed test 'Amazon::AWS::EC2::Types::CreateFleetError compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# errorCode, errorMessage, launchTemplateAndOverrides, lifecycle
# lifecycle -- Str
# Setting lifecycle to syzygy!spot
ok 2464 - Changed Amazon::AWS::EC2::Types::CreateFleetError fails eqv
ok 2465 - Amazon::AWS::EC2::Types::CreateFleetInstance loads. Is not a Failure object
ok 2466 - Amazon::AWS::EC2::Types::CreateFleetInstance exists
ok 2467 - Amazon::AWS::EC2::Types::CreateFleetInstance can be populated
ok 2468 - Amazon::AWS::EC2::Types::CreateFleetInstance serializes ok
ok 2469 - Amazon::AWS::EC2::Types::CreateFleetInstance deseralizes ok
# instanceIds
QKxzZVqZvVAjpnwNTb
QKxzZVqZvVAjpnwNTb
# instanceType
# launchTemplateAndOverrides
# launchTemplateSpecification
# LaunchTemplateId
not ok 2470 - Amazon::AWS::EC2::Types::CreateFleetInstance compares ok
# Failed test 'Amazon::AWS::EC2::Types::CreateFleetInstance compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# instanceIds, instanceType, launchTemplateAndOverrides, lifecycle, platform
# lifecycle -- Str
# Setting lifecycle to syzygy!on
ok 2471 - Changed Amazon::AWS::EC2::Types::CreateFleetInstance fails eqv
ok 2472 - Amazon::AWS::EC2::Types::DescribeFleetError loads. Is not a Failure object
ok 2473 - Amazon::AWS::EC2::Types::DescribeFleetError exists
ok 2474 - Amazon::AWS::EC2::Types::DescribeFleetError can be populated
ok 2475 - Amazon::AWS::EC2::Types::DescribeFleetError serializes ok
ok 2476 - Amazon::AWS::EC2::Types::DescribeFleetError deseralizes ok
# errorCode
# errorMessage
# launchTemplateAndOverrides
# launchTemplateSpecification
# LaunchTemplateId
not ok 2477 - Amazon::AWS::EC2::Types::DescribeFleetError compares ok
# Failed test 'Amazon::AWS::EC2::Types::DescribeFleetError compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# errorCode, errorMessage, launchTemplateAndOverrides, lifecycle
# errorMessage -- Str
# Setting errorMessage to syzygy!SkSBOyDkmE
ok 2478 - Changed Amazon::AWS::EC2::Types::DescribeFleetError fails eqv
ok 2479 - Amazon::AWS::EC2::Types::DescribeFleetsInstances loads. Is not a Failure object
ok 2480 - Amazon::AWS::EC2::Types::DescribeFleetsInstances exists
ok 2481 - Amazon::AWS::EC2::Types::DescribeFleetsInstances can be populated
ok 2482 - Amazon::AWS::EC2::Types::DescribeFleetsInstances serializes ok
ok 2483 - Amazon::AWS::EC2::Types::DescribeFleetsInstances deseralizes ok
# instanceIds
LrLMhQT
LrLMhQT
dJqrRjzQRVExPmHokBrzsRsIdQ
dJqrRjzQRVExPmHokBrzsRsIdQ
pZawKdlheKbKnggVLShCzzGajN
pZawKdlheKbKnggVLShCzzGajN
# instanceType
# launchTemplateAndOverrides
# launchTemplateSpecification
# LaunchTemplateId
not ok 2484 - Amazon::AWS::EC2::Types::DescribeFleetsInstances compares ok
# Failed test 'Amazon::AWS::EC2::Types::DescribeFleetsInstances compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# instanceIds, instanceType, launchTemplateAndOverrides, lifecycle, platform
# instanceIds -- Str
# Setting instanceIds to []
# Type check failed in assignment to @!instanceIds; expected Str but got Array[Str] (Array[Str].new())
ok 2485 - Amazon::AWS::EC2::Types::FleetLaunchTemplateConfig loads. Is not a Failure object
ok 2486 - Amazon::AWS::EC2::Types::FleetLaunchTemplateConfig exists
ok 2487 - Amazon::AWS::EC2::Types::FleetLaunchTemplateConfig can be populated
ok 2488 - Amazon::AWS::EC2::Types::FleetLaunchTemplateConfig serializes ok
ok 2489 - Amazon::AWS::EC2::Types::FleetLaunchTemplateConfig deseralizes ok
# launchTemplateSpecification
# LaunchTemplateId
not ok 2490 - Amazon::AWS::EC2::Types::FleetLaunchTemplateConfig compares ok
# Failed test 'Amazon::AWS::EC2::Types::FleetLaunchTemplateConfig compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# launchTemplateSpecification, overrides
# launchTemplateSpecification -- Str
# Setting launchTemplateSpecification to Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecification.new(LaunchTemplateId => Str, launchTemplateId => Str, LaunchTemplateName => Str, launchTemplateName => Str, Version => Str, version => Str)
ok 2491 - Changed Amazon::AWS::EC2::Types::FleetLaunchTemplateConfig fails eqv
ok 2492 - Amazon::AWS::EC2::Types::FleetLaunchTemplateConfigRequest loads. Is not a Failure object
ok 2493 - Amazon::AWS::EC2::Types::FleetLaunchTemplateConfigRequest exists
ok 2494 - Amazon::AWS::EC2::Types::FleetLaunchTemplateConfigRequest can be populated
ok 2495 - Amazon::AWS::EC2::Types::FleetLaunchTemplateConfigRequest serializes ok
ok 2496 - Amazon::AWS::EC2::Types::FleetLaunchTemplateConfigRequest deseralizes ok
# LaunchTemplateSpecification
# LaunchTemplateId
not ok 2497 - Amazon::AWS::EC2::Types::FleetLaunchTemplateConfigRequest compares ok
# Failed test 'Amazon::AWS::EC2::Types::FleetLaunchTemplateConfigRequest compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# LaunchTemplateSpecification, Overrides
# Overrides -- Str
# Setting Overrides to []
# Type check failed in assignment to @!Overrides; expected Amazon::AWS::EC2::Types::FleetLaunchTemplateOverridesRequest but got Array[Amazon::AWS::EC2::Types::FleetLaunchTemplateOverridesRequest] (Array[Amazon::AWS::EC2::Types::FleetLaunchTemplateOverridesRequest].new())
ok 2498 - Amazon::AWS::EC2::Types::ImportImageTask loads. Is not a Failure object
ok 2499 - Amazon::AWS::EC2::Types::ImportImageTask exists
ok 2500 - Amazon::AWS::EC2::Types::ImportImageTask can be populated
ok 2501 - Amazon::AWS::EC2::Types::ImportImageTask serializes ok
ok 2502 - Amazon::AWS::EC2::Types::ImportImageTask deseralizes ok
# architecture
# description
# encrypted
# hypervisor
# imageId
# importTaskId
# kmsKeyId
# licenseType
# platform
# progress
# snapshotDetails
Amazon::AWS::EC2::Types::SnapshotDetail.new(description => "mEghrNiqcg", deviceName => "sMrCvRsweXTgpqyWtpBKBeQCjKW", diskImageSize => 13.502114264109279e0, format => "XnPQqikvkfBwnMMPQEpLDXPdEAdnq", progress => "pzizKIjkFWryHsoZhXXUC", snapshotId => "JyksEWGhvhBOzSBoK", status => "PredRXjRbmAHG", statusMessage => "MpArWrejRAFPxNCOxAoQVMXSdLk", url => "YCUAMFJTWrVNyjFyESXTR", userBucket => Amazon::AWS::EC2::Types::UserBucketDetails.new(s3Bucket => "blgcSzvZPqGufSMnBiC", s3Key => "whZklhanouaYDyOj"))
Amazon::AWS::EC2::Types::SnapshotDetail.new(description => "mEghrNiqcg", deviceName => "sMrCvRsweXTgpqyWtpBKBeQCjKW", diskImageSize => 13.502114264109279e0, format => "XnPQqikvkfBwnMMPQEpLDXPdEAdnq", progress => "pzizKIjkFWryHsoZhXXUC", snapshotId => "JyksEWGhvhBOzSBoK", status => "PredRXjRbmAHG", statusMessage => "MpArWrejRAFPxNCOxAoQVMXSdLk", url => "YCUAMFJTWrVNyjFyESXTR", userBucket => Amazon::AWS::EC2::Types::UserBucketDetails.new(s3Bucket => Str, s3Key => Str))
# description
# deviceName
# diskImageSize
# format
# progress
# snapshotId
# status
# statusMessage
# url
# userBucket
# s3Bucket
not ok 2503 - Amazon::AWS::EC2::Types::ImportImageTask compares ok
# Failed test 'Amazon::AWS::EC2::Types::ImportImageTask compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# architecture, description, encrypted, hypervisor, imageId, importTaskId, kmsKeyId, licenseType, platform, progress, snapshotDetails, status, statusMessage
# progress -- Str
# Setting progress to syzygy!LIqXfBMCPA
ok 2504 - Changed Amazon::AWS::EC2::Types::ImportImageTask fails eqv
ok 2505 - Amazon::AWS::EC2::Types::ImportSnapshotTask loads. Is not a Failure object
ok 2506 - Amazon::AWS::EC2::Types::ImportSnapshotTask exists
ok 2507 - Amazon::AWS::EC2::Types::ImportSnapshotTask can be populated
ok 2508 - Amazon::AWS::EC2::Types::ImportSnapshotTask serializes ok
ok 2509 - Amazon::AWS::EC2::Types::ImportSnapshotTask deseralizes ok
# description
# importTaskId
# snapshotTaskDetail
# description
not ok 2510 - Amazon::AWS::EC2::Types::ImportSnapshotTask compares ok
# Failed test 'Amazon::AWS::EC2::Types::ImportSnapshotTask compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# description, importTaskId, snapshotTaskDetail
# description -- Str
# Setting description to syzygy!saslqW
ok 2511 - Changed Amazon::AWS::EC2::Types::ImportSnapshotTask fails eqv
ok 2512 - Amazon::AWS::EC2::Types::Instance loads. Is not a Failure object
ok 2513 - Amazon::AWS::EC2::Types::Instance exists
ok 2514 - Amazon::AWS::EC2::Types::Instance can be populated
ok 2515 - Amazon::AWS::EC2::Types::Instance serializes ok
ok 2516 - Amazon::AWS::EC2::Types::Instance deseralizes ok
# amiLaunchIndex
# architecture
# capacityReservationId
# capacityReservationSpecification
# CapacityReservationPreference
# CapacityReservationTarget
# CapacityReservationId
# clientToken
# cpuOptions
# coreCount
not ok 2517 - Amazon::AWS::EC2::Types::Instance compares ok
# Failed test 'Amazon::AWS::EC2::Types::Instance compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# amiLaunchIndex, architecture, capacityReservationId, capacityReservationSpecification, clientToken, cpuOptions, dnsName, ebsOptimized, enaSupport, hibernationOptions, hypervisor, iamInstanceProfile, imageId, instanceId, instanceLifecycle, instanceState, instanceType, ipAddress, kernelId, keyName, placement, platform, privateDnsName, ramdiskId, reason, rootDeviceName, rootDeviceType, sourceDestCheck, spotInstanceRequestId, sirovNetSupport, stateReason, subnetId, vpcId, groups, block-device-mappings, elasticGpuAssociations, elasticInferenceAccelatorAssociations, licenses, networkInterfaces, product-codes, tags
# capacityReservationId -- Str
# Setting capacityReservationId to syzygy!RuPmUheOwLXNjXKVKRyOZZoi
ok 2518 - Changed Amazon::AWS::EC2::Types::Instance fails eqv
ok 2519 - Amazon::AWS::EC2::Types::LaunchTemplateVersion loads. Is not a Failure object
ok 2520 - Amazon::AWS::EC2::Types::LaunchTemplateVersion exists
ok 2521 - Amazon::AWS::EC2::Types::LaunchTemplateVersion can be populated
ok 2522 - Amazon::AWS::EC2::Types::LaunchTemplateVersion serializes ok
ok 2523 - Amazon::AWS::EC2::Types::LaunchTemplateVersion deseralizes ok
# createdBy
# createTime
# defaultVersion
# launchTemplateData
# blockDeviceMappings
not ok 2524 - Amazon::AWS::EC2::Types::LaunchTemplateVersion compares ok
# Failed test 'Amazon::AWS::EC2::Types::LaunchTemplateVersion compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# createdBy, createTime, defaultVersion, launchTemplateData, launchTemplateId, launchTemplateName, versionDescription, versionNumber
# defaultVersion -- Str
# Setting defaultVersion to True
ok 2525 - Changed Amazon::AWS::EC2::Types::LaunchTemplateVersion fails eqv
ok 2526 - Amazon::AWS::EC2::Types::NetworkAcl loads. Is not a Failure object
ok 2527 - Amazon::AWS::EC2::Types::NetworkAcl exists
ok 2528 - Amazon::AWS::EC2::Types::NetworkAcl can be populated
ok 2529 - Amazon::AWS::EC2::Types::NetworkAcl serializes ok
ok 2530 - Amazon::AWS::EC2::Types::NetworkAcl deseralizes ok
# associations
Amazon::AWS::EC2::Types::NetworkAclAssociation.new(networkAclAssociationId => "cxsALrhNOzBmFxWKd", networkAclId => "nbiHUJZMetLw", subnetId => "FjckXDKJj")
Amazon::AWS::EC2::Types::NetworkAclAssociation.new(networkAclAssociationId => "cxsALrhNOzBmFxWKd", networkAclId => "nbiHUJZMetLw", subnetId => "FjckXDKJj")
# networkAclAssociationId
# networkAclId
# subnetId
Amazon::AWS::EC2::Types::NetworkAclAssociation.new(networkAclAssociationId => "jljjcgifkZrtjqlIKZevMPBiNrGQ", networkAclId => "sImFsPEtRoAMeMlONWj", subnetId => "KcygA")
Amazon::AWS::EC2::Types::NetworkAclAssociation.new(networkAclAssociationId => "jljjcgifkZrtjqlIKZevMPBiNrGQ", networkAclId => "sImFsPEtRoAMeMlONWj", subnetId => "KcygA")
# networkAclAssociationId
# networkAclId
# subnetId
# default
# entrys
Amazon::AWS::EC2::Types::NetworkAclEntry.new(cidrBlock => "VQIJIojodkvPYUZa", egress => Bool::True, icmpTypeCode => Amazon::AWS::EC2::Types::IcmpTypeCode.new(Code => 8, code => 15, Type => 26, type => 14), ipv6CidrBlock => "CCbrkeRZGbHrEuuKTN", portRange => Amazon::AWS::EC2::Types::PortRange.new(From => 9, from => 11, To => 13, to => 27), protocol => "VHCtPHjFWTNn", ruleAction => "deny", ruleNumber => 21)
Amazon::AWS::EC2::Types::NetworkAclEntry.new(cidrBlock => "VQIJIojodkvPYUZa", egress => Bool::True, icmpTypeCode => Amazon::AWS::EC2::Types::IcmpTypeCode.new(Code => Int, code => Int, Type => Int, type => Int), ipv6CidrBlock => "CCbrkeRZGbHrEuuKTN", portRange => Amazon::AWS::EC2::Types::PortRange.new(From => Int, from => Int, To => Int, to => Int), protocol => "VHCtPHjFWTNn", ruleAction => "deny", ruleNumber => 21)
# cidrBlock
# egress
# icmpTypeCode
# Code
not ok 2531 - Amazon::AWS::EC2::Types::NetworkAcl compares ok
# Failed test 'Amazon::AWS::EC2::Types::NetworkAcl compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# associations, default, entrys, networkAclId, ownerId, tags, vpcId
# tags -- Str
# Setting tags to []
# Type check failed in assignment to @!tags; expected Amazon::AWS::EC2::Types::Tag but got Array[Amazon::AWS::EC2::Types::Tag] (Array[Amazon::AWS::EC2::Types::Tag].new())
ok 2532 - Amazon::AWS::EC2::Types::Reservation loads. Is not a Failure object
ok 2533 - Amazon::AWS::EC2::Types::Reservation exists
ok 2534 - Amazon::AWS::EC2::Types::Reservation can be populated
ok 2535 - Amazon::AWS::EC2::Types::Reservation serializes ok
ok 2536 - Amazon::AWS::EC2::Types::Reservation deseralizes ok
# groups
Amazon::AWS::EC2::Types::GroupIdentifier.new(GroupId => "zMMnnOOTrpRexwzzwTsYjUmukN", groupId => "bGXHqtMsoRQ", GroupName => "cOodFLtgQVFUjwpmDmsDPbdGYhPo", groupName => "VsiShUwbbfEGEnv")
Amazon::AWS::EC2::Types::GroupIdentifier.new(GroupId => "zMMnnOOTrpRexwzzwTsYjUmukN", groupId => "bGXHqtMsoRQ", GroupName => "cOodFLtgQVFUjwpmDmsDPbdGYhPo", groupName => "VsiShUwbbfEGEnv")
# GroupId
# groupId
# GroupName
# groupName
Amazon::AWS::EC2::Types::GroupIdentifier.new(GroupId => "nLcgFebvAdNgSaKrLPxfm", groupId => "jwOzIelNdrZcpzcZzSVV", GroupName => "brhdDMgsVaSIHwQZfTuaSx", groupName => "hjUpOrnEyeLNlmPazsi")
Amazon::AWS::EC2::Types::GroupIdentifier.new(GroupId => "nLcgFebvAdNgSaKrLPxfm", groupId => "jwOzIelNdrZcpzcZzSVV", GroupName => "brhdDMgsVaSIHwQZfTuaSx", groupName => "hjUpOrnEyeLNlmPazsi")
# GroupId
# groupId
# GroupName
# groupName
Amazon::AWS::EC2::Types::GroupIdentifier.new(GroupId => "dvTxPLMNBv", groupId => "ZmzPhUc", GroupName => "BDTwUWagrlUylT", groupName => "PSPSMqqSRnMZBZJgacSU")
Amazon::AWS::EC2::Types::GroupIdentifier.new(GroupId => "dvTxPLMNBv", groupId => "ZmzPhUc", GroupName => "BDTwUWagrlUylT", groupName => "PSPSMqqSRnMZBZJgacSU")
# GroupId
# groupId
# GroupName
# groupName
# instancess
# ownerId
# requesterId
# reservationId
ok 2537 - Amazon::AWS::EC2::Types::Reservation compares ok
# CHANGE!
# vicselect
# groups, instancess, ownerId, requesterId, reservationId
# reservationId -- Str
# Setting reservationId to syzygy!GFJcBbghBHbJiEhfO
ok 2538 - Changed Amazon::AWS::EC2::Types::Reservation fails eqv
ok 2539 - Amazon::AWS::EC2::Types::ScheduledInstancesLaunchSpecification loads. Is not a Failure object
ok 2540 - Amazon::AWS::EC2::Types::ScheduledInstancesLaunchSpecification exists
ok 2541 - Amazon::AWS::EC2::Types::ScheduledInstancesLaunchSpecification can be populated
ok 2542 - Amazon::AWS::EC2::Types::ScheduledInstancesLaunchSpecification serializes ok
ok 2543 - Amazon::AWS::EC2::Types::ScheduledInstancesLaunchSpecification deseralizes ok
# BlockDeviceMappings
# EbsOptimized
# IamInstanceProfile
# Arn
not ok 2544 - Amazon::AWS::EC2::Types::ScheduledInstancesLaunchSpecification compares ok
# Failed test 'Amazon::AWS::EC2::Types::ScheduledInstancesLaunchSpecification compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# BlockDeviceMappings, EbsOptimized, IamInstanceProfile, ImageId, InstanceType, KernelId, KeyName, Monitoring, NetworkInterfaces, Placement, RamdiskId, SecurityGroupIds, SubnetId, UserData
# NetworkInterfaces -- Str
# Setting NetworkInterfaces to []
# Type check failed in assignment to @!NetworkInterfaces; expected Amazon::AWS::EC2::Types::ScheduledInstancesNetworkInterface but got Array[Amazon::AWS::EC2::Types::ScheduledInstancesNetworkInterface] (Array[Amazon::AWS::EC2::Types::ScheduledInstancesNetworkInterface].new())
ok 2545 - Amazon::AWS::EC2::Types::SpotFleetLaunchSpecification loads. Is not a Failure object
not ok 2546 - Amazon::AWS::EC2::Types::SpotFleetLaunchSpecification exists
# Failed test 'Amazon::AWS::EC2::Types::SpotFleetLaunchSpecification exists'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
Nil
Perl6::Metamodel::ClassHOW.new
# No such symbol 'Amazon::AWS::EC2::Types::SpotFleetLaunchSpecification'
not ok 2547 - Amazon::AWS::EC2::Types::SpotFleetLaunchSpecification can be populated
# Failed test 'Amazon::AWS::EC2::Types::SpotFleetLaunchSpecification can be populated'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such symbol 'Amazon::AWS::EC2::Types::SpotFleetLaunchSpecification'
not ok 2548 - Amazon::AWS::EC2::Types::SpotFleetLaunchSpecification serializes ok
# Failed test 'Amazon::AWS::EC2::Types::SpotFleetLaunchSpecification serializes ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such method 'to-xml' for invocant of type 'Any'
ok 2549 - Amazon::AWS::EC2::Types::SpotFleetLaunchSpecification deseralizes ok
# No such method 'eqv' for invocant of type 'Any'
ok 2550 - Amazon::AWS::EC2::Types::SpotFleetRequestConfigData loads. Is not a Failure object
not ok 2551 - Amazon::AWS::EC2::Types::SpotFleetRequestConfigData exists
# Failed test 'Amazon::AWS::EC2::Types::SpotFleetRequestConfigData exists'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
Nil
Perl6::Metamodel::ClassHOW.new
# No such symbol 'Amazon::AWS::EC2::Types::SpotFleetRequestConfigData'
not ok 2552 - Amazon::AWS::EC2::Types::SpotFleetRequestConfigData can be populated
# Failed test 'Amazon::AWS::EC2::Types::SpotFleetRequestConfigData can be populated'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such symbol 'Amazon::AWS::EC2::Types::SpotFleetRequestConfigData'
not ok 2553 - Amazon::AWS::EC2::Types::SpotFleetRequestConfigData serializes ok
# Failed test 'Amazon::AWS::EC2::Types::SpotFleetRequestConfigData serializes ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such method 'to-xml' for invocant of type 'Any'
ok 2554 - Amazon::AWS::EC2::Types::SpotFleetRequestConfigData deseralizes ok
# No such method 'eqv' for invocant of type 'Any'
ok 2555 - Amazon::AWS::EC2::Types::Vpc loads. Is not a Failure object
ok 2556 - Amazon::AWS::EC2::Types::Vpc exists
ok 2557 - Amazon::AWS::EC2::Types::Vpc can be populated
ok 2558 - Amazon::AWS::EC2::Types::Vpc serializes ok
ok 2559 - Amazon::AWS::EC2::Types::Vpc deseralizes ok
# cidrBlock
# cidrBlockAssociations
Amazon::AWS::EC2::Types::VpcCidrBlockAssociation.new(associationId => "bmcYikborhSLlw", cidrBlock => "LuueRrQqu", cidrBlockState => Amazon::AWS::EC2::Types::VpcCidrBlockState.new(state => "failed", statusMessage => "HFXmGKcKMdUs"))
Amazon::AWS::EC2::Types::VpcCidrBlockAssociation.new(associationId => "bmcYikborhSLlw", cidrBlock => "LuueRrQqu", cidrBlockState => Amazon::AWS::EC2::Types::VpcCidrBlockState.new(state => Str, statusMessage => Str))
# associationId
# cidrBlock
# cidrBlockState
# state
not ok 2560 - Amazon::AWS::EC2::Types::Vpc compares ok
# Failed test 'Amazon::AWS::EC2::Types::Vpc compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# cidrBlock, cidrBlockAssociations, dhcpOptionsId, instanceTenancy, ipv6CidrBlockAssociations, isDefault, ownerId, state, tags, vpcId
# isDefault -- Str
# Setting isDefault to True
ok 2561 - Changed Amazon::AWS::EC2::Types::Vpc fails eqv
ok 2562 - Amazon::AWS::EC2::Types::FleetData loads. Is not a Failure object
ok 2563 - Amazon::AWS::EC2::Types::FleetData exists
ok 2564 - Amazon::AWS::EC2::Types::FleetData can be populated
ok 2565 - Amazon::AWS::EC2::Types::FleetData serializes ok
ok 2566 - Amazon::AWS::EC2::Types::FleetData deseralizes ok
# activityStatus
# clientToken
# createTime
# errors
Amazon::AWS::EC2::Types::DescribeFleetError.new(errorCode => "ITFEyCzejaRgMLTyWLSU", errorMessage => "LyPaVppgazWGL", launchTemplateAndOverrides => Amazon::AWS::EC2::Types::LaunchTemplateAndOverridesResponse.new(launchTemplateSpecification => Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecification.new(LaunchTemplateId => "RmjGrSTUKFCFWmOlmLm", launchTemplateId => "uHNAbTzvEnuhkg", LaunchTemplateName => "doimjNwP", launchTemplateName => "FCpjevViKyCqoxfOENTcuHnbmgt", Version => "LEBVpIryT", version => "utPJLOvHMoZrmWpN"), overrides => Amazon::AWS::EC2::Types::FleetLaunchTemplateOverrides.new(availabilityZone => "lQhSqpRsxVHUeBsPExDjWXNqj", instanceType => "t1", maxPrice => "HfrZjbMsTLP", placement => Amazon::AWS::EC2::Types::PlacementResponse.new(groupName => "RptDVVXpcReF"), priority => 27.77440991731737e0, subnetId => "LdaFRUqFmHdsLDjBzx", weightedCapacity => 1.5012008102016416e0)), lifecycle => "on")
Amazon::AWS::EC2::Types::DescribeFleetError.new(errorCode => "ITFEyCzejaRgMLTyWLSU", errorMessage => "LyPaVppgazWGL", launchTemplateAndOverrides => Amazon::AWS::EC2::Types::LaunchTemplateAndOverridesResponse.new(launchTemplateSpecification => Amazon::AWS::EC2::Types::FleetLaunchTemplateSpecification.new(LaunchTemplateId => Str, launchTemplateId => Str, LaunchTemplateName => Str, launchTemplateName => Str, Version => Str, version => Str), overrides => Amazon::AWS::EC2::Types::FleetLaunchTemplateOverrides.new(availabilityZone => Str, instanceType => Str, maxPrice => Str, placement => Amazon::AWS::EC2::Types::PlacementResponse.new(groupName => Str), priority => Num, subnetId => Str, weightedCapacity => Num)), lifecycle => "on")
# errorCode
# errorMessage
# launchTemplateAndOverrides
# launchTemplateSpecification
# LaunchTemplateId
not ok 2567 - Amazon::AWS::EC2::Types::FleetData compares ok
# Failed test 'Amazon::AWS::EC2::Types::FleetData compares ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# CHANGE!
# vicselect
# activityStatus, clientToken, createTime, errors, excessCapacityTerminationPolicy, fleetId, fleetInstances, fleetState, fulfilledCapacity, fulfilledOnDemandCapacity, launchTemplateConfigs, onDemandOptions, replaceUnhealthyInstances, spotOptions, tags, targetCapacitySpecification, terminateInstancesWithExpiration, type, validFrom, validUntil
# createTime -- Str
# Setting createTime to syzygy!eKZMPxmI
ok 2568 - Changed Amazon::AWS::EC2::Types::FleetData fails eqv
ok 2569 - Amazon::AWS::EC2::Types::SpotFleetRequestConfig loads. Is not a Failure object
not ok 2570 - Amazon::AWS::EC2::Types::SpotFleetRequestConfig exists
# Failed test 'Amazon::AWS::EC2::Types::SpotFleetRequestConfig exists'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
Nil
Perl6::Metamodel::ClassHOW.new
# No such symbol 'Amazon::AWS::EC2::Types::SpotFleetRequestConfig'
not ok 2571 - Amazon::AWS::EC2::Types::SpotFleetRequestConfig can be populated
# Failed test 'Amazon::AWS::EC2::Types::SpotFleetRequestConfig can be populated'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such symbol 'Amazon::AWS::EC2::Types::SpotFleetRequestConfig'
not ok 2572 - Amazon::AWS::EC2::Types::SpotFleetRequestConfig serializes ok
# Failed test 'Amazon::AWS::EC2::Types::SpotFleetRequestConfig serializes ok'
# at /home/cbwood/Projects/p6-Amazon-AWS-EC2.obj-testing/lib/Amazon/AWS/TestUtils.pm6 (Amazon::AWS::TestUtils) line 97
# No such method 'to-xml' for invocant of type 'Any'
ok 2573 - Amazon::AWS::EC2::Types::SpotFleetRequestConfig deseralizes ok
# No such method 'eqv' for invocant of type 'Any'
# Looks like you planned 2625 tests, but ran 2573
# Looks like you failed 139 tests of 2573
